{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/function.js"],"sourcesContent":["/**\n * @name isFunction\n * @summary Tests for a `function`.\n * @description\n * Checks to see if the input value is a JavaScript function.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isFunction } from '@polkadot/util';\n *\n * isFunction(() => false); // => true\n * ```\n */\nexport function isFunction(value) {\n    return typeof value === 'function';\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;CAaC;;;;AACM,SAAS,WAAW,KAAK;IAC5B,OAAO,OAAO,UAAU;AAC5B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/detectPackage.js"],"sourcesContent":["import { xglobal } from '@polkadot/x-global';\nimport { isFunction } from './is/function.js';\nconst DEDUPE = 'Either remove and explicitly install matching versions or dedupe using your package manager.\\nThe following conflicting packages were found:';\nexport const POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG = 'POLKADOTJS_DISABLE_ESM_CJS_WARNING';\n/** @internal */\nfunction getEntry(name) {\n    const _global = xglobal;\n    if (!_global.__polkadotjs) {\n        _global.__polkadotjs = {};\n    }\n    if (!_global.__polkadotjs[name]) {\n        _global.__polkadotjs[name] = [];\n    }\n    return _global.__polkadotjs[name];\n}\n/** @internal */\nfunction formatDisplay(all, fmt) {\n    let max = 0;\n    for (let i = 0, count = all.length; i < count; i++) {\n        max = Math.max(max, all[i].version.length);\n    }\n    return all\n        .map((d) => `\\t${fmt(d.version.padEnd(max), d).join('\\t')}`)\n        .join('\\n');\n}\n/** @internal */\nfunction formatInfo(version, { name }) {\n    return [\n        version,\n        name\n    ];\n}\n/** @internal */\nfunction formatVersion(version, { path, type }) {\n    let extracted;\n    if (path && path.length >= 5) {\n        const nmIndex = path.indexOf('node_modules');\n        extracted = nmIndex === -1\n            ? path\n            : path.substring(nmIndex);\n    }\n    else {\n        extracted = '<unknown>';\n    }\n    return [\n        `${`${type || ''}`.padStart(3)} ${version}`,\n        extracted\n    ];\n}\n/** @internal */\nfunction getPath(infoPath, pathOrFn) {\n    if (infoPath) {\n        return infoPath;\n    }\n    else if (isFunction(pathOrFn)) {\n        try {\n            return pathOrFn() || '';\n        }\n        catch {\n            return '';\n        }\n    }\n    return pathOrFn || '';\n}\n/** @internal */\nfunction warn(pre, all, fmt) {\n    console.warn(`${pre}\\n${DEDUPE}\\n${formatDisplay(all, fmt)}`);\n}\n/**\n * @name detectPackage\n * @summary Checks that a specific package is only imported once\n * @description A `@polkadot/*` version detection utility, checking for one occurrence of a package in addition to checking for dependency versions.\n */\nexport function detectPackage({ name, path, type, version }, pathOrFn, deps = []) {\n    if (!name.startsWith('@polkadot')) {\n        throw new Error(`Invalid package descriptor ${name}`);\n    }\n    const entry = getEntry(name);\n    entry.push({ path: getPath(path, pathOrFn), type, version });\n    // if we have more than one entry at DIFFERENT version types then warn. If there is\n    // more than one entry at the same version and ESM/CJS dual warnings are disabled,\n    // then do not display warnings\n    const entriesSameVersion = entry.every((e) => e.version === version);\n    const esmCjsWarningDisabled = xglobal.process?.env?.[POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG] === '1';\n    const multipleEntries = entry.length !== 1;\n    const disableWarnings = esmCjsWarningDisabled && entriesSameVersion;\n    if (multipleEntries && !disableWarnings) {\n        warn(`${name} has multiple versions, ensure that there is only one installed.`, entry, formatVersion);\n    }\n    else {\n        const mismatches = deps.filter((d) => d && d.version !== version);\n        if (mismatches.length) {\n            warn(`${name} requires direct dependencies exactly matching version ${version}.`, mismatches, formatInfo);\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/hex/toU8a.js"],"sourcesContent":["const CHR = '0123456789abcdef';\nconst U8 = new Uint8Array(256);\nconst U16 = new Uint8Array(256 * 256);\nfor (let i = 0, count = CHR.length; i < count; i++) {\n    U8[CHR[i].charCodeAt(0) | 0] = i | 0;\n    if (i > 9) {\n        U8[CHR[i].toUpperCase().charCodeAt(0) | 0] = i | 0;\n    }\n}\nfor (let i = 0; i < 256; i++) {\n    const s = i << 8;\n    for (let j = 0; j < 256; j++) {\n        U16[s | j] = (U8[i] << 4) | U8[j];\n    }\n}\n/**\n * @name hexToU8a\n * @summary Creates a Uint8Array object from a hex string.\n * @description\n * `null` inputs returns an empty `Uint8Array` result. Hex input values return the actual bytes value converted to a Uint8Array. Anything that is not a hex string (including the `0x` prefix) throws an error.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexToU8a } from '@polkadot/util';\n *\n * hexToU8a('0x80001f'); // Uint8Array([0x80, 0x00, 0x1f])\n * hexToU8a('0x80001f', 32); // Uint8Array([0x00, 0x80, 0x00, 0x1f])\n * ```\n */\nexport function hexToU8a(value, bitLength = -1) {\n    if (!value) {\n        return new Uint8Array();\n    }\n    let s = value.startsWith('0x')\n        ? 2\n        : 0;\n    const decLength = Math.ceil((value.length - s) / 2);\n    const endLength = Math.ceil(bitLength === -1\n        ? decLength\n        : bitLength / 8);\n    const result = new Uint8Array(endLength);\n    const offset = endLength > decLength\n        ? endLength - decLength\n        : 0;\n    for (let i = offset; i < endLength; i++, s += 2) {\n        // The big factor here is actually the string lookups. If we do\n        // HEX_TO_U16[value.substring()] we get an 10x slowdown. In the\n        // same vein using charCodeAt (as opposed to value[s] or value.charAt(s)) is\n        // also the faster operation by at least 2x with the character map above\n        result[i] = U16[(value.charCodeAt(s) << 8) | value.charCodeAt(s + 1)];\n    }\n    return result;\n}\n"],"names":[],"mappings":";;;;AAAA,MAAM,MAAM;AACZ,MAAM,KAAK,IAAI,WAAW;AAC1B,MAAM,MAAM,IAAI,WAAW,MAAM;AACjC,IAAK,IAAI,IAAI,GAAG,QAAQ,IAAI,MAAM,EAAE,IAAI,OAAO,IAAK;IAChD,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,GAAG,IAAI;IACnC,IAAI,IAAI,GAAG;QACP,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,WAAW,GAAG,UAAU,CAAC,KAAK,EAAE,GAAG,IAAI;IACrD;AACJ;AACA,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,IAAK;IAC1B,MAAM,IAAI,KAAK;IACf,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,IAAK;QAC1B,GAAG,CAAC,IAAI,EAAE,GAAG,AAAC,EAAE,CAAC,EAAE,IAAI,IAAK,EAAE,CAAC,EAAE;IACrC;AACJ;AAgBO,SAAS,SAAS,KAAK;QAAE,YAAA,iEAAY,CAAC;IACzC,IAAI,CAAC,OAAO;QACR,OAAO,IAAI;IACf;IACA,IAAI,IAAI,MAAM,UAAU,CAAC,QACnB,IACA;IACN,MAAM,YAAY,KAAK,IAAI,CAAC,CAAC,MAAM,MAAM,GAAG,CAAC,IAAI;IACjD,MAAM,YAAY,KAAK,IAAI,CAAC,cAAc,CAAC,IACrC,YACA,YAAY;IAClB,MAAM,SAAS,IAAI,WAAW;IAC9B,MAAM,SAAS,YAAY,YACrB,YAAY,YACZ;IACN,IAAK,IAAI,IAAI,QAAQ,IAAI,WAAW,KAAK,KAAK,EAAG;QAC7C,+DAA+D;QAC/D,+DAA+D;QAC/D,4EAA4E;QAC5E,wEAAwE;QACxE,MAAM,CAAC,EAAE,GAAG,GAAG,CAAC,AAAC,MAAM,UAAU,CAAC,MAAM,IAAK,MAAM,UAAU,CAAC,IAAI,GAAG;IACzE;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/hex.js"],"sourcesContent":["export const REGEX_HEX_PREFIXED = /^0x[\\da-fA-F]+$/;\nexport const REGEX_HEX_NOPREFIX = /^[\\da-fA-F]+$/;\n/**\n * @name isHex\n * @summary Tests for a hex string.\n * @description\n * Checks to see if the input value is a `0x` prefixed hex string. Optionally (`bitLength` !== -1) checks to see if the bitLength is correct.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isHex } from '@polkadot/util';\n *\n * isHex('0x1234'); // => true\n * isHex('0x1234', 8); // => false\n * ```\n */\nexport function isHex(value, bitLength = -1, ignoreLength) {\n    return (typeof value === 'string' && (value === '0x' ||\n        REGEX_HEX_PREFIXED.test(value))) && (bitLength === -1\n        ? (ignoreLength || (value.length % 2 === 0))\n        : (value.length === (2 + Math.ceil(bitLength / 4))));\n}\n"],"names":[],"mappings":";;;;;;;;AAAO,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAgB3B,SAAS,MAAM,KAAK;QAAE,YAAA,iEAAY,CAAC,GAAG;IACzC,OAAO,AAAC,OAAO,UAAU,YAAY,CAAC,UAAU,QAC5C,mBAAmB,IAAI,CAAC,MAAM,KAAM,CAAC,cAAc,CAAC,IACjD,gBAAiB,MAAM,MAAM,GAAG,MAAM,IACtC,MAAM,MAAM,KAAM,IAAI,KAAK,IAAI,CAAC,YAAY,EAAI;AAC3D","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/string/toU8a.js"],"sourcesContent":["import { TextEncoder } from '@polkadot/x-textencoder';\nconst encoder = new TextEncoder();\n/**\n * @name stringToU8a\n * @summary Creates a Uint8Array object from a utf-8 string.\n * @description\n * String input values return the actual encoded `UInt8Array`. `null` or `undefined` values returns an empty encoded array.\n * @example\n * <BR>\n *\n * ```javascript\n * import { stringToU8a } from '@polkadot/util';\n *\n * stringToU8a('hello'); // [0x68, 0x65, 0x6c, 0x6c, 0x6f]\n * ```\n */\nexport function stringToU8a(value) {\n    return value\n        ? encoder.encode(value.toString())\n        : new Uint8Array();\n}\n"],"names":[],"mappings":";;;;AAAA;;AACA,MAAM,UAAU,IAAI,2LAAW;AAexB,SAAS,YAAY,KAAK;IAC7B,OAAO,QACD,QAAQ,MAAM,CAAC,MAAM,QAAQ,MAC7B,IAAI;AACd","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/has.js"],"sourcesContent":["import { BigInt } from '@polkadot/x-bigint';\nimport { xglobal } from '@polkadot/x-global';\n/** true if the environment has proper BigInt support */\nexport const hasBigInt = typeof BigInt === 'function' && typeof BigInt.asIntN === 'function';\n/** true if the environment is CJS */\nexport const hasCjs = typeof require === 'function' && typeof module !== 'undefined';\n/** true if the environment has __dirname available */\nexport const hasDirname = typeof __dirname !== 'undefined';\n/** true if the environment is ESM */\nexport const hasEsm = !hasCjs;\n/** true if the environment has WebAssembly available */\nexport const hasWasm = typeof WebAssembly !== 'undefined';\n/** true if the environment has support for Buffer (typically Node.js) */\nexport const hasBuffer = typeof xglobal.Buffer === 'function' && typeof xglobal.Buffer.isBuffer === 'function';\n/** true if the environment has process available (typically Node.js) */\nexport const hasProcess = typeof xglobal.process === 'object';\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;;;AAEO,MAAM,YAAY,OAAO,+KAAM,KAAK,cAAc,OAAO,+KAAM,CAAC,MAAM,KAAK;AAE3E,MAAM,SAAS,iDAAmB,cAAc,kDAAkB;AAElE,MAAM,aAAa,iFAAqB;AAExC,MAAM,SAAS,CAAC;AAEhB,MAAM,UAAU,OAAO,gBAAgB;AAEvC,MAAM,YAAY,OAAO,gLAAO,CAAC,MAAM,KAAK,cAAc,OAAO,gLAAO,CAAC,MAAM,CAAC,QAAQ,KAAK;AAE7F,MAAM,aAAa,OAAO,gLAAO,CAAC,OAAO,KAAK","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/buffer.js"],"sourcesContent":["import { xglobal } from '@polkadot/x-global';\nimport { hasBuffer } from '../has.js';\nimport { isFunction } from './function.js';\n/**\n * @name isBuffer\n * @summary Tests for a `Buffer` object instance.\n * @description\n * Checks to see if the input object is an instance of `Buffer`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isBuffer } from '@polkadot/util';\n *\n * console.log('isBuffer', isBuffer(Buffer.from([]))); // => true\n * ```\n */\nexport function isBuffer(value) {\n    // we do check a function first, since it is slightly faster than isBuffer itself\n    return hasBuffer && !!value && isFunction(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAeO,SAAS,SAAS,KAAK;IAC1B,iFAAiF;IACjF,OAAO,yJAAS,IAAI,CAAC,CAAC,SAAS,IAAA,qKAAU,EAAC,MAAM,YAAY,KAAK,gLAAO,CAAC,MAAM,CAAC,QAAQ,CAAC;AAC7F","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/u8a.js"],"sourcesContent":["/**\n * @name isU8a\n * @summary Tests for a `Uint8Array` object instance.\n * @description\n * Checks to see if the input object is an instance of `Uint8Array`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isUint8Array } from '@polkadot/util';\n *\n * console.log('isU8a', isU8a([])); // => false\n * ```\n */\nexport function isU8a(value) {\n    // here we defer the instanceof check which is actually slightly\n    // slower than just checking the constrctor (direct instances)\n    return (((value && value.constructor) === Uint8Array) ||\n        value instanceof Uint8Array);\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;CAaC;;;;AACM,SAAS,MAAM,KAAK;IACvB,gEAAgE;IAChE,8DAA8D;IAC9D,OAAQ,AAAC,CAAC,SAAS,MAAM,WAAW,MAAM,cACtC,iBAAiB;AACzB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/u8a/toU8a.js"],"sourcesContent":["import { hexToU8a } from '../hex/toU8a.js';\nimport { isBuffer } from '../is/buffer.js';\nimport { isHex } from '../is/hex.js';\nimport { isU8a } from '../is/u8a.js';\nimport { stringToU8a } from '../string/toU8a.js';\n/**\n * @name u8aToU8a\n * @summary Creates a Uint8Array value from a Uint8Array, Buffer, string or hex input.\n * @description\n * `null` or `undefined` inputs returns a `[]` result, Uint8Array values returns the value, hex strings returns a Uint8Array representation.\n * If `strict` is true, `null` or `undefined` will throw an error instead of returning an empty array.\n * Supports input types: Uint8Array, Buffer, hex string, string, or number array.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aToU8a } from '@polkadot/util';\n *\n * u8aToU8a(new Uint8Array([0x12, 0x34]); // => Uint8Array([0x12, 0x34])\n * u8aToU8a(0x1234); // => Uint8Array([0x12, 0x34])\n * ```\n */\nexport function u8aToU8a(value, strict = false) {\n    if (strict && (value === null || value === undefined)) {\n        throw new Error('u8aToU8a: Expected non-null, non-undefined value');\n    }\n    return isU8a(value)\n        // NOTE isBuffer needs to go here since it actually extends\n        // Uint8Array on Node.js environments, so all Buffer are Uint8Array,\n        // but Uint8Array is not Buffer\n        ? isBuffer(value)\n            ? new Uint8Array(value)\n            : value\n        : isHex(value)\n            ? hexToU8a(value)\n            : Array.isArray(value)\n                ? new Uint8Array(value)\n                : stringToU8a(value);\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAkBO,SAAS,SAAS,KAAK;QAAE,SAAA,iEAAS;IACrC,IAAI,UAAU,CAAC,UAAU,QAAQ,UAAU,SAAS,GAAG;QACnD,MAAM,IAAI,MAAM;IACpB;IACA,OAAO,IAAA,2JAAK,EAAC,SAIP,IAAA,iKAAQ,EAAC,SACL,IAAI,WAAW,SACf,QACJ,IAAA,2JAAK,EAAC,SACF,IAAA,iKAAQ,EAAC,SACT,MAAM,OAAO,CAAC,SACV,IAAI,WAAW,SACf,IAAA,uKAAW,EAAC;AAC9B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 299, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/u8a/concat.js"],"sourcesContent":["import { u8aToU8a } from './toU8a.js';\n/**\n * @name u8aConcat\n * @summary Creates a concatenated Uint8Array from the inputs.\n * @description\n * Concatenates the input arrays into a single `UInt8Array`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { { u8aConcat } from '@polkadot/util';\n *\n * u8aConcat(\n *   new Uint8Array([1, 2, 3]),\n *   new Uint8Array([4, 5, 6])\n * ); // [1, 2, 3, 4, 5, 6]\n * ```\n */\nexport function u8aConcat(...list) {\n    const count = list.length;\n    const u8as = new Array(count);\n    let length = 0;\n    for (let i = 0; i < count; i++) {\n        u8as[i] = u8aToU8a(list[i]);\n        length += u8as[i].length;\n    }\n    return u8aConcatStrict(u8as, length);\n}\n/**\n * @name u8aConcatStrict\n * @description A strict version of [[u8aConcat]], accepting only Uint8Array inputs\n */\nexport function u8aConcatStrict(u8as, length = 0) {\n    const count = u8as.length;\n    let offset = 0;\n    if (!length) {\n        for (let i = 0; i < count; i++) {\n            length += u8as[i].length;\n        }\n    }\n    const result = new Uint8Array(length);\n    for (let i = 0; i < count; i++) {\n        result.set(u8as[i], offset);\n        offset += u8as[i].length;\n    }\n    return result;\n}\n"],"names":[],"mappings":";;;;;;AAAA;;AAkBO,SAAS;IAAU,IAAA,IAAA,OAAA,UAAA,QAAA,AAAG,OAAH,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;QAAG,KAAH,QAAA,SAAA,CAAA,KAAO;;IAC7B,MAAM,QAAQ,KAAK,MAAM;IACzB,MAAM,OAAO,IAAI,MAAM;IACvB,IAAI,SAAS;IACb,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,IAAK;QAC5B,IAAI,CAAC,EAAE,GAAG,IAAA,iKAAQ,EAAC,IAAI,CAAC,EAAE;QAC1B,UAAU,IAAI,CAAC,EAAE,CAAC,MAAM;IAC5B;IACA,OAAO,gBAAgB,MAAM;AACjC;AAKO,SAAS,gBAAgB,IAAI;QAAE,SAAA,iEAAS;IAC3C,MAAM,QAAQ,KAAK,MAAM;IACzB,IAAI,SAAS;IACb,IAAI,CAAC,QAAQ;QACT,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,IAAK;YAC5B,UAAU,IAAI,CAAC,EAAE,CAAC,MAAM;QAC5B;IACJ;IACA,MAAM,SAAS,IAAI,WAAW;IAC9B,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,IAAK;QAC5B,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE;QACpB,UAAU,IAAI,CAAC,EAAE,CAAC,MAAM;IAC5B;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 340, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/u8a/toString.js"],"sourcesContent":["import { TextDecoder } from '@polkadot/x-textdecoder';\nconst decoder = new TextDecoder('utf-8');\n/**\n * @name u8aToString\n * @summary Creates a utf-8 string from a Uint8Array object.\n * @description\n * `UInt8Array` input values return the actual decoded utf-8 string. `null` or `undefined` values returns an empty string.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aToString } from '@polkadot/util';\n *\n * u8aToString(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0x6f])); // hello\n * ```\n */\nexport function u8aToString(value) {\n    return value\n        ? decoder.decode(value)\n        : '';\n}\n"],"names":[],"mappings":";;;;AAAA;;AACA,MAAM,UAAU,IAAI,2LAAW,CAAC;AAezB,SAAS,YAAY,KAAK;IAC7B,OAAO,QACD,QAAQ,MAAM,CAAC,SACf;AACV","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 354, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/u8a/toHex.js"],"sourcesContent":["const U8 = new Array(256);\nconst U16 = new Array(256 * 256);\nfor (let n = 0; n < 256; n++) {\n    U8[n] = n.toString(16).padStart(2, '0');\n}\nfor (let i = 0; i < 256; i++) {\n    const s = i << 8;\n    for (let j = 0; j < 256; j++) {\n        U16[s | j] = U8[i] + U8[j];\n    }\n}\n/** @internal */\nfunction hex(value, result) {\n    const mod = (value.length % 2) | 0;\n    const length = (value.length - mod) | 0;\n    for (let i = 0; i < length; i += 2) {\n        result += U16[(value[i] << 8) | value[i + 1]];\n    }\n    if (mod) {\n        result += U8[value[length] | 0];\n    }\n    return result;\n}\n/**\n * @name u8aToHex\n * @summary Creates a hex string from a Uint8Array object.\n * @description\n * `UInt8Array` input values return the actual hex string. `null` or `undefined` values returns an `0x` string.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aToHex } from '@polkadot/util';\n *\n * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f\n * ```\n */\nexport function u8aToHex(value, bitLength = -1, isPrefixed = true) {\n    // this is not 100% correct sinmce we support isPrefixed = false....\n    const empty = isPrefixed\n        ? '0x'\n        : '';\n    if (!value?.length) {\n        return empty;\n    }\n    else if (bitLength > 0) {\n        const length = Math.ceil(bitLength / 8);\n        if (value.length > length) {\n            return `${hex(value.subarray(0, length / 2), empty)}…${hex(value.subarray(value.length - length / 2), '')}`;\n        }\n    }\n    return hex(value, empty);\n}\n"],"names":[],"mappings":";;;;AAAA,MAAM,KAAK,IAAI,MAAM;AACrB,MAAM,MAAM,IAAI,MAAM,MAAM;AAC5B,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,IAAK;IAC1B,EAAE,CAAC,EAAE,GAAG,EAAE,QAAQ,CAAC,IAAI,QAAQ,CAAC,GAAG;AACvC;AACA,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,IAAK;IAC1B,MAAM,IAAI,KAAK;IACf,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,IAAK;QAC1B,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE;IAC9B;AACJ;AACA,cAAc,GACd,SAAS,IAAI,KAAK,EAAE,MAAM;IACtB,MAAM,MAAM,AAAC,MAAM,MAAM,GAAG,IAAK;IACjC,MAAM,SAAS,AAAC,MAAM,MAAM,GAAG,MAAO;IACtC,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,KAAK,EAAG;QAChC,UAAU,GAAG,CAAC,AAAC,KAAK,CAAC,EAAE,IAAI,IAAK,KAAK,CAAC,IAAI,EAAE,CAAC;IACjD;IACA,IAAI,KAAK;QACL,UAAU,EAAE,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE;IACnC;IACA,OAAO;AACX;AAeO,SAAS,SAAS,KAAK;QAAE,YAAA,iEAAY,CAAC,GAAG,aAAA,iEAAa;IACzD,oEAAoE;IACpE,MAAM,QAAQ,aACR,OACA;IACN,IAAI,EAAC,kBAAA,4BAAA,MAAO,MAAM,GAAE;QAChB,OAAO;IACX,OACK,IAAI,YAAY,GAAG;QACpB,MAAM,SAAS,KAAK,IAAI,CAAC,YAAY;QACrC,IAAI,MAAM,MAAM,GAAG,QAAQ;YACvB,OAAO,AAAC,GAA+C,OAA7C,IAAI,MAAM,QAAQ,CAAC,GAAG,SAAS,IAAI,QAAO,KAAsD,OAAnD,IAAI,MAAM,QAAQ,CAAC,MAAM,MAAM,GAAG,SAAS,IAAI;QAC1G;IACJ;IACA,OAAO,IAAI,OAAO;AACtB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/hex/stripPrefix.js"],"sourcesContent":["import { REGEX_HEX_NOPREFIX, REGEX_HEX_PREFIXED } from '../is/hex.js';\n/**\n * @name hexStripPrefix\n * @summary Strips any leading `0x` prefix.\n * @description\n * Tests for the existence of a `0x` prefix, and returns the value without the prefix. Un-prefixed values are returned as-is.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexStripPrefix } from '@polkadot/util';\n *\n * console.log('stripped', hexStripPrefix('0x1234')); // => 1234\n * ```\n */\nexport function hexStripPrefix(value) {\n    if (!value || value === '0x') {\n        return '';\n    }\n    else if (REGEX_HEX_PREFIXED.test(value)) {\n        return value.substring(2);\n    }\n    else if (REGEX_HEX_NOPREFIX.test(value)) {\n        return value;\n    }\n    throw new Error(`Expected hex value to convert, found '${value}'`);\n}\n"],"names":[],"mappings":";;;;AAAA;;AAeO,SAAS,eAAe,KAAK;IAChC,IAAI,CAAC,SAAS,UAAU,MAAM;QAC1B,OAAO;IACX,OACK,IAAI,wKAAkB,CAAC,IAAI,CAAC,QAAQ;QACrC,OAAO,MAAM,SAAS,CAAC;IAC3B,OACK,IAAI,wKAAkB,CAAC,IAAI,CAAC,QAAQ;QACrC,OAAO;IACX;IACA,MAAM,IAAI,MAAM,AAAC,yCAA8C,OAAN,OAAM;AACnE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 418, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/hex/toBn.js"],"sourcesContent":["import { BN } from '../bn/bn.js';\nimport { hexStripPrefix } from './stripPrefix.js';\n/**\n * @name hexToBn\n * @summary Creates a BN.js object from a hex string.\n * @description\n * `null` inputs returns a `BN(0)` result. Hex input values return the actual value converted to a BN. Anything that is not a hex string (including the `0x` prefix) throws an error.\n * @param _value The value to convert\n * @param _options Options to pass while converting\n * @param _options.isLe Convert using Little Endian\n * @param _options.isNegative Convert using two's complement\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexToBn } from '@polkadot/util';\n *\n * hexToBn('0x123480001f'); // => BN(0x123480001f)\n * ```\n */\nexport function hexToBn(value, { isLe = false, isNegative = false } = {}) {\n    if (!value || value === '0x') {\n        return new BN(0);\n    }\n    const stripped = hexStripPrefix(value);\n    const bn = new BN(stripped, 16, isLe ? 'le' : 'be');\n    // fromTwos takes as parameter the number of bits, which is the hex length\n    // multiplied by 4 (2 bytes being 8 bits)\n    return isNegative\n        ? bn.fromTwos(stripped.length * 4)\n        : bn;\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAmBO,SAAS,QAAQ,KAAK;QAAE,EAAE,OAAO,KAAK,EAAE,aAAa,KAAK,EAAE,GAApC,iEAAuC,CAAC;IACnE,IAAI,CAAC,SAAS,UAAU,MAAM;QAC1B,OAAO,IAAI,+KAAE,CAAC;IAClB;IACA,MAAM,WAAW,IAAA,6KAAc,EAAC;IAChC,MAAM,KAAK,IAAI,+KAAE,CAAC,UAAU,IAAI,OAAO,OAAO;IAC9C,0EAA0E;IAC1E,yCAAyC;IACzC,OAAO,aACD,GAAG,QAAQ,CAAC,SAAS,MAAM,GAAG,KAC9B;AACV","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 441, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/bigInt.js"],"sourcesContent":["/**\n * @name isBigInt\n * @summary Tests for a `BigInt` object instance.\n * @description\n * Checks to see if the input object is an instance of `BigInt`\n * @example\n * <BR>\n *\n * ```javascript\n * import { isBigInt } from '@polkadot/util';\n *\n * console.log('isBigInt', isBigInt(123_456n)); // => true\n * ```\n */\nexport function isBigInt(value) {\n    return typeof value === 'bigint';\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;CAaC;;;;AACM,SAAS,SAAS,KAAK;IAC1B,OAAO,OAAO,UAAU;AAC5B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 465, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/object.js"],"sourcesContent":["/**\n * @name isObject\n * @summary Tests for an `object`.\n * @description\n * Checks to see if the input value is a JavaScript object.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isObject } from '@polkadot/util';\n *\n * isObject({}); // => true\n * isObject('something'); // => false\n * ```\n */\nexport function isObject(value) {\n    return !!value && typeof value === 'object';\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;CAcC;;;;AACM,SAAS,SAAS,KAAK;IAC1B,OAAO,CAAC,CAAC,SAAS,OAAO,UAAU;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 490, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/helpers.js"],"sourcesContent":["import { isFunction } from './function.js';\nimport { isObject } from './object.js';\nexport function isOn(...fns) {\n    return (value) => (isObject(value) || isFunction(value)) &&\n        fns.every((f) => isFunction(value[f]));\n}\nexport function isOnFunction(...fns) {\n    return (value) => isFunction(value) &&\n        fns.every((f) => isFunction(value[f]));\n}\nexport function isOnObject(...fns) {\n    return (value) => isObject(value) &&\n        fns.every((f) => isFunction(value[f]));\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;AACA;;;AACO,SAAS;IAAK,IAAA,IAAA,OAAA,UAAA,QAAA,AAAG,MAAH,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;QAAG,IAAH,QAAA,SAAA,CAAA,KAAM;;IACvB,OAAO,CAAC,QAAU,CAAC,IAAA,iKAAQ,EAAC,UAAU,IAAA,qKAAU,EAAC,MAAM,KACnD,IAAI,KAAK,CAAC,CAAC,IAAM,IAAA,qKAAU,EAAC,KAAK,CAAC,EAAE;AAC5C;AACO,SAAS;IAAa,IAAA,IAAA,OAAA,UAAA,QAAA,AAAG,MAAH,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;QAAG,IAAH,QAAA,SAAA,CAAA,KAAM;;IAC/B,OAAO,CAAC,QAAU,IAAA,qKAAU,EAAC,UACzB,IAAI,KAAK,CAAC,CAAC,IAAM,IAAA,qKAAU,EAAC,KAAK,CAAC,EAAE;AAC5C;AACO,SAAS;IAAW,IAAA,IAAA,OAAA,UAAA,QAAA,AAAG,MAAH,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;QAAG,IAAH,QAAA,SAAA,CAAA,KAAM;;IAC7B,OAAO,CAAC,QAAU,IAAA,iKAAQ,EAAC,UACvB,IAAI,KAAK,CAAC,CAAC,IAAM,IAAA,qKAAU,EAAC,KAAK,CAAC,EAAE;AAC5C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 524, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/toBigInt.js"],"sourcesContent":["import { isOn } from './helpers.js';\nexport const isToBigInt = /*#__PURE__*/ isOn('toBigInt');\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,aAAa,WAAW,GAAG,IAAA,8JAAI,EAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 535, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/toBn.js"],"sourcesContent":["import { isOn } from './helpers.js';\nexport const isToBn = /*#__PURE__*/ isOn('toBn');\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,SAAS,WAAW,GAAG,IAAA,8JAAI,EAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 546, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/bn/toBn.js"],"sourcesContent":["import { hexToBn } from '../hex/toBn.js';\nimport { isBigInt } from '../is/bigInt.js';\nimport { isHex } from '../is/hex.js';\nimport { isToBigInt } from '../is/toBigInt.js';\nimport { isToBn } from '../is/toBn.js';\nimport { BN } from './bn.js';\n/**\n * @name bnToBn\n * @summary Creates a BN value from a BN, bigint, string (base 10 or hex) or number input.\n * @description\n * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnToBn } from '@polkadot/util';\n *\n * bnToBn(0x1234); // => BN(0x1234)\n * bnToBn(new BN(0x1234)); // => BN(0x1234)\n * ```\n */\nexport function bnToBn(value) {\n    return value\n        ? BN.isBN(value)\n            ? value\n            : isHex(value)\n                ? hexToBn(value.toString())\n                : isBigInt(value)\n                    ? new BN(value.toString())\n                    : isToBn(value)\n                        ? value.toBn()\n                        : isToBigInt(value)\n                            ? new BN(value.toBigInt().toString())\n                            : new BN(value)\n        : new BN(0);\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAiBO,SAAS,OAAO,KAAK;IACxB,OAAO,QACD,+KAAE,CAAC,IAAI,CAAC,SACJ,QACA,IAAA,2JAAK,EAAC,SACF,IAAA,+JAAO,EAAC,MAAM,QAAQ,MACtB,IAAA,iKAAQ,EAAC,SACL,IAAI,+KAAE,CAAC,MAAM,QAAQ,MACrB,IAAA,6JAAM,EAAC,SACH,MAAM,IAAI,KACV,IAAA,qKAAU,EAAC,SACP,IAAI,+KAAE,CAAC,MAAM,QAAQ,GAAG,QAAQ,MAChC,IAAI,+KAAE,CAAC,SAC3B,IAAI,+KAAE,CAAC;AACjB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 569, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/bn/toU8a.js"],"sourcesContent":["import { bnToBn } from './toBn.js';\nconst DEFAULT_OPTS = { bitLength: -1, isLe: true, isNegative: false };\n/**\n * @name bnToU8a\n * @summary Creates a Uint8Array object from a BN.\n * @description\n * `null`/`undefined`/`NaN` inputs returns an empty `Uint8Array` result. `BN` input values return the actual bytes value converted to a `Uint8Array`. Optionally convert using little-endian format if `isLE` is set.\n * @example\n * <BR>\n *\n * ```javascript\n * import { bnToU8a } from '@polkadot/util';\n *\n * bnToU8a(new BN(0x1234)); // => [0x12, 0x34]\n * ```\n */\nexport function bnToU8a(value, { bitLength = -1, isLe = true, isNegative = false } = DEFAULT_OPTS) {\n    const valueBn = bnToBn(value);\n    const byteLength = bitLength === -1\n        ? Math.ceil(valueBn.bitLength() / 8)\n        : Math.ceil((bitLength || 0) / 8);\n    if (!value) {\n        return bitLength === -1\n            ? new Uint8Array(1)\n            : new Uint8Array(byteLength);\n    }\n    const output = new Uint8Array(byteLength);\n    const bn = isNegative\n        ? valueBn.toTwos(byteLength * 8)\n        : valueBn;\n    output.set(bn.toArray(isLe ? 'le' : 'be', byteLength), 0);\n    return output;\n}\n"],"names":[],"mappings":";;;;AAAA;;AACA,MAAM,eAAe;IAAE,WAAW,CAAC;IAAG,MAAM;IAAM,YAAY;AAAM;AAe7D,SAAS,QAAQ,KAAK;QAAE,EAAE,YAAY,CAAC,CAAC,EAAE,OAAO,IAAI,EAAE,aAAa,KAAK,EAAE,GAAnD,iEAAsD;IACjF,MAAM,UAAU,IAAA,6JAAM,EAAC;IACvB,MAAM,aAAa,cAAc,CAAC,IAC5B,KAAK,IAAI,CAAC,QAAQ,SAAS,KAAK,KAChC,KAAK,IAAI,CAAC,CAAC,aAAa,CAAC,IAAI;IACnC,IAAI,CAAC,OAAO;QACR,OAAO,cAAc,CAAC,IAChB,IAAI,WAAW,KACf,IAAI,WAAW;IACzB;IACA,MAAM,SAAS,IAAI,WAAW;IAC9B,MAAM,KAAK,aACL,QAAQ,MAAM,CAAC,aAAa,KAC5B;IACN,OAAO,GAAG,CAAC,GAAG,OAAO,CAAC,OAAO,OAAO,MAAM,aAAa;IACvD,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 596, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/u8a/empty.js"],"sourcesContent":["/**\n * @name u8aEmpty\n * @summary Tests for a `Uint8Array` for emptyness\n * @description\n * Checks to see if the input `Uint8Array` has zero length or contains all 0 values.\n */\nexport function u8aEmpty(value) {\n    const len = value.length | 0;\n    // on smaller sizes, the byte-by-byte compare is faster than allocating\n    // another object for DataView (on very large arrays the DataView is faster)\n    for (let i = 0; i < len; i++) {\n        if (value[i] | 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;;AACM,SAAS,SAAS,KAAK;IAC1B,MAAM,MAAM,MAAM,MAAM,GAAG;IAC3B,uEAAuE;IACvE,4EAA4E;IAC5E,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,IAAK;QAC1B,IAAI,KAAK,CAAC,EAAE,GAAG,GAAG;YACd,OAAO;QACX;IACJ;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 620, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/bi/consts.js"],"sourcesContent":["import { BigInt } from '@polkadot/x-bigint';\n/**\n * @name _0n\n * @summary BigInt constant for 0.\n */\nexport const _0n = /*#__PURE__*/ BigInt(0);\n/**\n * @name _1n\n * @summary BigInt constant for 1.\n */\nexport const _1n = /*#__PURE__*/ BigInt(1);\n/**\n * @name _2n\n * @summary BigInt constant for 2.\n */\nexport const _2n = /*#__PURE__*/ BigInt(2);\n/**\n * @name _3n\n * @summary BigInt constant for 3.\n */\nexport const _3n = /*#__PURE__*/ BigInt(3);\n/**\n * @name _4n\n * @summary BigInt constant for 4.\n */\nexport const _4n = /*#__PURE__*/ BigInt(4);\n/**\n * @name _5n\n * @summary BigInt constant for 5.\n */\nexport const _5n = /*#__PURE__*/ BigInt(5);\n/**\n * @name _6n\n * @summary BigInt constant for 6.\n */\nexport const _6n = /*#__PURE__*/ BigInt(6);\n/**\n * @name _7n\n * @summary BigInt constant for 7.\n */\nexport const _7n = /*#__PURE__*/ BigInt(7);\n/**\n * @name _8n\n * @summary BigInt constant for 8.\n */\nexport const _8n = /*#__PURE__*/ BigInt(8);\n/**\n * @name _9n\n * @summary BigInt constant for 9.\n */\nexport const _9n = /*#__PURE__*/ BigInt(9);\n/**\n * @name _10n\n * @summary BigInt constant for 10.\n */\nexport const _10n = /*#__PURE__*/ BigInt(10);\n/**\n * @name _100n\n * @summary BigInt constant for 100.\n */\nexport const _100n = /*#__PURE__*/ BigInt(100);\n/**\n * @name _1000n\n * @summary BigInt constant for 1000.\n */\nexport const _1000n = /*#__PURE__*/ BigInt(1_000);\n/**\n * @name _1Mn\n * @summary BigInt constant for 1,000,000 (million).\n */\nexport const _1Mn = /*#__PURE__*/ BigInt(1_000_000);\n/**\n* @name _1Bn\n* @summary BigInt constant for 1,000,000,000 (billion).\n*/\nexport const _1Bn = /*#__PURE__*/ BigInt(1_000_000_000);\n/**\n* @name _1Qn\n* @summary BigInt constant for 1,000,000,000,000,000,000 (quitillion).\n*/\nexport const _1Qn = _1Bn * _1Bn;\n/**\n* @name _2pow53n\n* @summary BigInt constant for MAX_SAFE_INTEGER\n*/\nexport const _2pow53n = /*#__PURE__*/ BigInt(Number.MAX_SAFE_INTEGER);\n/**\n * @name _sqrt2pow53n\n * @summary BigInt constant for Math.sqrt(MAX_SAFE_INTEGER)\n */\nexport const _sqrt2pow53n = /*#__PURE__*/ BigInt(94906265);\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAKO,MAAM,MAAM,WAAW,GAAG,IAAA,+KAAM,EAAC;AAKjC,MAAM,MAAM,WAAW,GAAG,IAAA,+KAAM,EAAC;AAKjC,MAAM,MAAM,WAAW,GAAG,IAAA,+KAAM,EAAC;AAKjC,MAAM,MAAM,WAAW,GAAG,IAAA,+KAAM,EAAC;AAKjC,MAAM,MAAM,WAAW,GAAG,IAAA,+KAAM,EAAC;AAKjC,MAAM,MAAM,WAAW,GAAG,IAAA,+KAAM,EAAC;AAKjC,MAAM,MAAM,WAAW,GAAG,IAAA,+KAAM,EAAC;AAKjC,MAAM,MAAM,WAAW,GAAG,IAAA,+KAAM,EAAC;AAKjC,MAAM,MAAM,WAAW,GAAG,IAAA,+KAAM,EAAC;AAKjC,MAAM,MAAM,WAAW,GAAG,IAAA,+KAAM,EAAC;AAKjC,MAAM,OAAO,WAAW,GAAG,IAAA,+KAAM,EAAC;AAKlC,MAAM,QAAQ,WAAW,GAAG,IAAA,+KAAM,EAAC;AAKnC,MAAM,SAAS,WAAW,GAAG,IAAA,+KAAM,EAAC;AAKpC,MAAM,OAAO,WAAW,GAAG,IAAA,+KAAM,EAAC;AAKlC,MAAM,OAAO,WAAW,GAAG,IAAA,+KAAM,EAAC;AAKlC,MAAM,OAAO,OAAO;AAKpB,MAAM,WAAW,WAAW,GAAG,IAAA,+KAAM,EAAC,OAAO,gBAAgB;AAK7D,MAAM,eAAe,WAAW,GAAG,IAAA,+KAAM,EAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 682, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/u8a/toBigInt.js"],"sourcesContent":["import { BigInt } from '@polkadot/x-bigint';\nimport { _1n } from '../bi/consts.js';\nconst U8_MAX = BigInt(256);\nconst U16_MAX = BigInt(256 * 256);\nconst U64_MAX = BigInt('0x10000000000000000');\n/**\n * @name u8aToBigInt\n * @summary Creates a BigInt from a Uint8Array object.\n */\nexport function u8aToBigInt(value, { isLe = true, isNegative = false } = {}) {\n    // slice + reverse is expensive, however SCALE is LE by default so this is the path\n    // we are most interested in (the BE is added for the sake of being comprehensive)\n    if (!isLe) {\n        value = value.slice().reverse();\n    }\n    const count = value.length;\n    if (isNegative && count && (value[count - 1] & 0x80)) {\n        switch (count) {\n            case 0:\n                return BigInt(0);\n            case 1:\n                return BigInt(((value[0] ^ 0x0000_00ff) * -1) - 1);\n            case 2:\n                return BigInt((((value[0] + (value[1] << 8)) ^ 0x0000_ffff) * -1) - 1);\n            case 4:\n                return BigInt((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00)) ^ 0xffff_ffff) * -1) - 1);\n        }\n        const dvI = new DataView(value.buffer, value.byteOffset);\n        if (count === 8) {\n            return dvI.getBigInt64(0, true);\n        }\n        let result = BigInt(0);\n        const mod = count % 2;\n        for (let i = count - 2; i >= mod; i -= 2) {\n            result = (result * U16_MAX) + BigInt(dvI.getUint16(i, true) ^ 0xffff);\n        }\n        if (mod) {\n            result = (result * U8_MAX) + BigInt(value[0] ^ 0xff);\n        }\n        return (result * -_1n) - _1n;\n    }\n    switch (count) {\n        case 0:\n            return BigInt(0);\n        case 1:\n            return BigInt(value[0]);\n        case 2:\n            return BigInt(value[0] + (value[1] << 8));\n        case 4:\n            return BigInt(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00));\n    }\n    const dvI = new DataView(value.buffer, value.byteOffset);\n    switch (count) {\n        case 8:\n            return dvI.getBigUint64(0, true);\n        case 16:\n            return (dvI.getBigUint64(8, true) * U64_MAX) + dvI.getBigUint64(0, true);\n        default: {\n            let result = BigInt(0);\n            const mod = count % 2;\n            for (let i = count - 2; i >= mod; i -= 2) {\n                result = (result * U16_MAX) + BigInt(dvI.getUint16(i, true));\n            }\n            if (mod) {\n                result = (result * U8_MAX) + BigInt(value[0]);\n            }\n            return result;\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 760, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/hex/toBigInt.js"],"sourcesContent":["import { BigInt } from '@polkadot/x-bigint';\nimport { u8aToBigInt } from '../u8a/toBigInt.js';\nimport { hexToU8a } from './toU8a.js';\n/**\n * @name hexToBigInt\n * @summary Creates a BigInt instance object from a hex string.\n */\nexport function hexToBigInt(value, { isLe = false, isNegative = false } = {}) {\n    return !value || value === '0x'\n        ? BigInt(0)\n        : u8aToBigInt(hexToU8a(value), { isLe, isNegative });\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAKO,SAAS,YAAY,KAAK;QAAE,EAAE,OAAO,KAAK,EAAE,aAAa,KAAK,EAAE,GAApC,iEAAuC,CAAC;IACvE,OAAO,CAAC,SAAS,UAAU,OACrB,IAAA,+KAAM,EAAC,KACP,IAAA,uKAAW,EAAC,IAAA,iKAAQ,EAAC,QAAQ;QAAE;QAAM;IAAW;AAC1D","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 781, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/bn.js"],"sourcesContent":["import { BN } from '../bn/bn.js';\n/**\n * @name isBn\n * @summary Tests for a `BN` object instance.\n * @description\n * Checks to see if the input object is an instance of `BN` (bn.js).\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { isBn } from '@polkadot/util';\n *\n * console.log('isBn', isBn(new BN(1))); // => true\n * ```\n */\nexport function isBn(value) {\n    return BN.isBN(value);\n}\n"],"names":[],"mappings":";;;;AAAA;;AAgBO,SAAS,KAAK,KAAK;IACtB,OAAO,+KAAE,CAAC,IAAI,CAAC;AACnB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 794, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/bi/toBigInt.js"],"sourcesContent":["import { BigInt } from '@polkadot/x-bigint';\nimport { hexToBigInt } from '../hex/toBigInt.js';\nimport { isBn } from '../is/bn.js';\nimport { isHex } from '../is/hex.js';\nimport { isToBigInt } from '../is/toBigInt.js';\nimport { isToBn } from '../is/toBn.js';\n/**\n * @name nToBigInt\n * @summary Creates a bigInt value from a BN, bigint, string (base 10 or hex) or number input.\n */\nexport function nToBigInt(value) {\n    return typeof value === 'bigint'\n        ? value\n        : !value\n            ? BigInt(0)\n            : isHex(value)\n                ? hexToBigInt(value.toString())\n                : isBn(value)\n                    ? BigInt(value.toString())\n                    : isToBigInt(value)\n                        ? value.toBigInt()\n                        : isToBn(value)\n                            ? BigInt(value.toBn().toString())\n                            : BigInt(value);\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAKO,SAAS,UAAU,KAAK;IAC3B,OAAO,OAAO,UAAU,WAClB,QACA,CAAC,QACG,IAAA,+KAAM,EAAC,KACP,IAAA,2JAAK,EAAC,SACF,IAAA,uKAAW,EAAC,MAAM,QAAQ,MAC1B,IAAA,yJAAI,EAAC,SACD,IAAA,+KAAM,EAAC,MAAM,QAAQ,MACrB,IAAA,qKAAU,EAAC,SACP,MAAM,QAAQ,KACd,IAAA,6JAAM,EAAC,SACH,IAAA,+KAAM,EAAC,MAAM,IAAI,GAAG,QAAQ,MAC5B,IAAA,+KAAM,EAAC;AACrC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 817, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/bi/toU8a.js"],"sourcesContent":["import { BigInt } from '@polkadot/x-bigint';\nimport { _0n, _1n } from './consts.js';\nimport { nToBigInt } from './toBigInt.js';\nconst DIV = BigInt(256);\nconst NEG_MASK = BigInt(0xff);\nfunction toU8a(value, isLe, isNegative) {\n    const arr = [];\n    const withSigned = isNegative && (value < _0n);\n    if (withSigned) {\n        value = (value + _1n) * -_1n;\n    }\n    while (value !== _0n) {\n        const mod = value % DIV;\n        const val = Number(withSigned\n            ? mod ^ NEG_MASK\n            : mod);\n        if (isLe) {\n            arr.push(val);\n        }\n        else {\n            arr.unshift(val);\n        }\n        value = (value - mod) / DIV;\n    }\n    return Uint8Array.from(arr);\n}\n/**\n * @name nToU8a\n * @summary Creates a Uint8Array object from a bigint.\n */\nexport function nToU8a(value, { bitLength = -1, isLe = true, isNegative = false } = {}) {\n    const valueBi = nToBigInt(value);\n    if (valueBi === _0n) {\n        return bitLength === -1\n            ? new Uint8Array(1)\n            : new Uint8Array(Math.ceil((bitLength || 0) / 8));\n    }\n    const u8a = toU8a(valueBi, isLe, isNegative);\n    if (bitLength === -1) {\n        return u8a;\n    }\n    const byteLength = Math.ceil((bitLength || 0) / 8);\n    const output = new Uint8Array(byteLength);\n    if (isNegative) {\n        output.fill(0xff);\n    }\n    output.set(u8a, isLe ? 0 : byteLength - u8a.length);\n    return output;\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AACA,MAAM,MAAM,IAAA,+KAAM,EAAC;AACnB,MAAM,WAAW,IAAA,+KAAM,EAAC;AACxB,SAAS,MAAM,KAAK,EAAE,IAAI,EAAE,UAAU;IAClC,MAAM,MAAM,EAAE;IACd,MAAM,aAAa,cAAe,QAAQ,4JAAG;IAC7C,IAAI,YAAY;QACZ,QAAQ,CAAC,QAAQ,4JAAG,IAAI,CAAC,4JAAG;IAChC;IACA,MAAO,UAAU,4JAAG,CAAE;QAClB,MAAM,MAAM,QAAQ;QACpB,MAAM,MAAM,OAAO,aACb,MAAM,WACN;QACN,IAAI,MAAM;YACN,IAAI,IAAI,CAAC;QACb,OACK;YACD,IAAI,OAAO,CAAC;QAChB;QACA,QAAQ,CAAC,QAAQ,GAAG,IAAI;IAC5B;IACA,OAAO,WAAW,IAAI,CAAC;AAC3B;AAKO,SAAS,OAAO,KAAK;QAAE,EAAE,YAAY,CAAC,CAAC,EAAE,OAAO,IAAI,EAAE,aAAa,KAAK,EAAE,GAAnD,iEAAsD,CAAC;IACjF,MAAM,UAAU,IAAA,oKAAS,EAAC;IAC1B,IAAI,YAAY,4JAAG,EAAE;QACjB,OAAO,cAAc,CAAC,IAChB,IAAI,WAAW,KACf,IAAI,WAAW,KAAK,IAAI,CAAC,CAAC,aAAa,CAAC,IAAI;IACtD;IACA,MAAM,MAAM,MAAM,SAAS,MAAM;IACjC,IAAI,cAAc,CAAC,GAAG;QAClB,OAAO;IACX;IACA,MAAM,aAAa,KAAK,IAAI,CAAC,CAAC,aAAa,CAAC,IAAI;IAChD,MAAM,SAAS,IAAI,WAAW;IAC9B,IAAI,YAAY;QACZ,OAAO,IAAI,CAAC;IAChB;IACA,OAAO,GAAG,CAAC,KAAK,OAAO,IAAI,aAAa,IAAI,MAAM;IAClD,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 869, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/bn/consts.js"],"sourcesContent":["import { BN } from './bn.js';\n/**\n * @name BN_ZERO\n * @summary BN constant for 0.\n */\nexport const BN_ZERO = /*#__PURE__*/ new BN(0);\n/**\n * @name BN_ONE\n * @summary BN constant for 1.\n */\nexport const BN_ONE = /*#__PURE__*/ new BN(1);\n/**\n * @name BN_TWO\n * @summary BN constant for 2.\n */\nexport const BN_TWO = /*#__PURE__*/ new BN(2);\n/**\n * @name BN_THREE\n * @summary BN constant for 3.\n */\nexport const BN_THREE = /*#__PURE__*/ new BN(3);\n/**\n * @name BN_FOUR\n * @summary BN constant for 4.\n */\nexport const BN_FOUR = /*#__PURE__*/ new BN(4);\n/**\n * @name BN_FIVE\n * @summary BN constant for 5.\n */\nexport const BN_FIVE = /*#__PURE__*/ new BN(5);\n/**\n * @name BN_SIX\n * @summary BN constant for 6.\n */\nexport const BN_SIX = /*#__PURE__*/ new BN(6);\n/**\n * @name BN_SEVEN\n * @summary BN constant for 7.\n */\nexport const BN_SEVEN = /*#__PURE__*/ new BN(7);\n/**\n * @name BN_EIGHT\n * @summary BN constant for 8.\n */\nexport const BN_EIGHT = /*#__PURE__*/ new BN(8);\n/**\n * @name BN_NINE\n * @summary BN constant for 9.\n */\nexport const BN_NINE = /*#__PURE__*/ new BN(9);\n/**\n * @name BN_TEN\n * @summary BN constant for 10.\n */\nexport const BN_TEN = /*#__PURE__*/ new BN(10);\n/**\n * @name BN_HUNDRED\n * @summary BN constant for 100.\n */\nexport const BN_HUNDRED = /*#__PURE__*/ new BN(100);\n/**\n * @name BN_THOUSAND\n * @summary BN constant for 1,000.\n */\nexport const BN_THOUSAND = /*#__PURE__*/ new BN(1_000);\n/**\n * @name BN_MILLION\n * @summary BN constant for 1,000,000.\n */\nexport const BN_MILLION = /*#__PURE__*/ new BN(1_000_000);\n/**\n * @name BN_BILLION\n * @summary BN constant for 1,000,000,000.\n */\nexport const BN_BILLION = /*#__PURE__*/ new BN(1_000_000_000);\n/**\n * @name BN_QUINTILL\n * @summary BN constant for 1,000,000,000,000,000,000.\n */\nexport const BN_QUINTILL = BN_BILLION.mul(BN_BILLION);\n/**\n * @name BN_MAX_INTEGER\n * @summary BN constant for MAX_SAFE_INTEGER\n */\nexport const BN_MAX_INTEGER = /*#__PURE__*/ new BN(Number.MAX_SAFE_INTEGER);\n/**\n * @name BN_SQRT_MAX_INTEGER\n * @summary BN constant for Math.sqrt(MAX_SAFE_INTEGER)\n */\nexport const BN_SQRT_MAX_INTEGER = /*#__PURE__*/ new BN(94906265);\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAKO,MAAM,UAAU,WAAW,GAAG,IAAI,+KAAE,CAAC;AAKrC,MAAM,SAAS,WAAW,GAAG,IAAI,+KAAE,CAAC;AAKpC,MAAM,SAAS,WAAW,GAAG,IAAI,+KAAE,CAAC;AAKpC,MAAM,WAAW,WAAW,GAAG,IAAI,+KAAE,CAAC;AAKtC,MAAM,UAAU,WAAW,GAAG,IAAI,+KAAE,CAAC;AAKrC,MAAM,UAAU,WAAW,GAAG,IAAI,+KAAE,CAAC;AAKrC,MAAM,SAAS,WAAW,GAAG,IAAI,+KAAE,CAAC;AAKpC,MAAM,WAAW,WAAW,GAAG,IAAI,+KAAE,CAAC;AAKtC,MAAM,WAAW,WAAW,GAAG,IAAI,+KAAE,CAAC;AAKtC,MAAM,UAAU,WAAW,GAAG,IAAI,+KAAE,CAAC;AAKrC,MAAM,SAAS,WAAW,GAAG,IAAI,+KAAE,CAAC;AAKpC,MAAM,aAAa,WAAW,GAAG,IAAI,+KAAE,CAAC;AAKxC,MAAM,cAAc,WAAW,GAAG,IAAI,+KAAE,CAAC;AAKzC,MAAM,aAAa,WAAW,GAAG,IAAI,+KAAE,CAAC;AAKxC,MAAM,aAAa,WAAW,GAAG,IAAI,+KAAE,CAAC;AAKxC,MAAM,cAAc,WAAW,GAAG,CAAC;AAKnC,MAAM,iBAAiB,WAAW,GAAG,IAAI,+KAAE,CAAC,OAAO,gBAAgB;AAKnE,MAAM,sBAAsB,WAAW,GAAG,IAAI,+KAAE,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 931, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/compact/toU8a.js"],"sourcesContent":["import { BN, BN_ONE, BN_TWO, bnToBn, bnToU8a } from '../bn/index.js';\nimport { u8aConcatStrict } from '../u8a/index.js';\nconst MAX_U8 = BN_TWO.pow(new BN(8 - 2)).isub(BN_ONE);\nconst MAX_U16 = BN_TWO.pow(new BN(16 - 2)).isub(BN_ONE);\nconst MAX_U32 = BN_TWO.pow(new BN(32 - 2)).isub(BN_ONE);\nconst BL_16 = { bitLength: 16 };\nconst BL_32 = { bitLength: 32 };\n/**\n * @name compactToU8a\n * @description Encodes a number into a compact representation\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactToU8a } from '@polkadot/util';\n *\n * console.log(compactToU8a(511, 32)); // Uint8Array([0b11111101, 0b00000111])\n * ```\n */\nexport function compactToU8a(value) {\n    const bn = bnToBn(value);\n    if (bn.lte(MAX_U8)) {\n        return new Uint8Array([bn.toNumber() << 2]);\n    }\n    else if (bn.lte(MAX_U16)) {\n        return bnToU8a(bn.shln(2).iadd(BN_ONE), BL_16);\n    }\n    else if (bn.lte(MAX_U32)) {\n        return bnToU8a(bn.shln(2).iadd(BN_TWO), BL_32);\n    }\n    const u8a = bnToU8a(bn);\n    let length = u8a.length;\n    // adjust to the minimum number of bytes\n    while (u8a[length - 1] === 0) {\n        length--;\n    }\n    if (length < 4) {\n        throw new Error('Invalid length, previous checks match anything less than 2^30');\n    }\n    return u8aConcatStrict([\n        // subtract 4 as minimum (also catered for in decoding)\n        new Uint8Array([((length - 4) << 2) + 0b11]),\n        u8a.subarray(0, length)\n    ]);\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AAAA;AACA;;;AACA,MAAM,SAAS,+JAAM,CAAC,GAAG,CAAC,IAAI,+KAAE,CAAC,IAAI,IAAI,IAAI,CAAC,+JAAM;AACpD,MAAM,UAAU,+JAAM,CAAC,GAAG,CAAC,IAAI,+KAAE,CAAC,KAAK,IAAI,IAAI,CAAC,+JAAM;AACtD,MAAM,UAAU,+JAAM,CAAC,GAAG,CAAC,IAAI,+KAAE,CAAC,KAAK,IAAI,IAAI,CAAC,+JAAM;AACtD,MAAM,QAAQ;IAAE,WAAW;AAAG;AAC9B,MAAM,QAAQ;IAAE,WAAW;AAAG;AAavB,SAAS,aAAa,KAAK;IAC9B,MAAM,KAAK,IAAA,6JAAM,EAAC;IAClB,IAAI,GAAG,GAAG,CAAC,SAAS;QAChB,OAAO,IAAI,WAAW;YAAC,GAAG,QAAQ,MAAM;SAAE;IAC9C,OACK,IAAI,GAAG,GAAG,CAAC,UAAU;QACtB,OAAO,IAAA,+JAAO,EAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,+JAAM,GAAG;IAC5C,OACK,IAAI,GAAG,GAAG,CAAC,UAAU;QACtB,OAAO,IAAA,+JAAO,EAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,+JAAM,GAAG;IAC5C;IACA,MAAM,MAAM,IAAA,+JAAO,EAAC;IACpB,IAAI,SAAS,IAAI,MAAM;IACvB,wCAAwC;IACxC,MAAO,GAAG,CAAC,SAAS,EAAE,KAAK,EAAG;QAC1B;IACJ;IACA,IAAI,SAAS,GAAG;QACZ,MAAM,IAAI,MAAM;IACpB;IACA,OAAO,IAAA,yKAAe,EAAC;QACnB,uDAAuD;QACvD,IAAI,WAAW;YAAC,CAAC,AAAC,SAAS,KAAM,CAAC,IAAI;SAAK;QAC3C,IAAI,QAAQ,CAAC,GAAG;KACnB;AACL","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 983, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/compact/addLength.js"],"sourcesContent":["import { u8aConcatStrict } from '../u8a/index.js';\nimport { compactToU8a } from './toU8a.js';\n/**\n * @name compactAddLength\n * @description Adds a length prefix to the input value\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactAddLength } from '@polkadot/util';\n *\n * console.log(compactAddLength(new Uint8Array([0xde, 0xad, 0xbe, 0xef]))); // Uint8Array([4 << 2, 0xde, 0xad, 0xbe, 0xef])\n * ```\n */\nexport function compactAddLength(input) {\n    return u8aConcatStrict([\n        compactToU8a(input.length),\n        input\n    ]);\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAaO,SAAS,iBAAiB,KAAK;IAClC,OAAO,IAAA,yKAAe,EAAC;QACnB,IAAA,yKAAY,EAAC,MAAM,MAAM;QACzB;KACH;AACL","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1001, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/number.js"],"sourcesContent":["/**\n * @name isNumber\n * @summary Tests for a JavaScript number.\n * @description\n * Checks to see if the input value is a valid number.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isNumber } from '@polkadot/util';\n *\n * console.log('isNumber', isNumber(1234)); // => true\n * ```\n */\nexport function isNumber(value) {\n    return typeof value === 'number';\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;CAaC;;;;AACM,SAAS,SAAS,KAAK;IAC1B,OAAO,OAAO,UAAU;AAC5B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1025, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/string.js"],"sourcesContent":["/**\n * @name isString\n * @summary Tests for a string.\n * @description\n * Checks to see if the input value is a JavaScript string.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isString } from '@polkadot/util';\n *\n * console.log('isString', isString('test')); // => true\n * ```\n */\nexport function isString(value) {\n    return typeof value === 'string' || value instanceof String;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;CAaC;;;;AACM,SAAS,SAAS,KAAK;IAC1B,OAAO,OAAO,UAAU,YAAY,iBAAiB;AACzD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1049, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/object/spread.js"],"sourcesContent":["/**\n * @name objectSpread\n * @summary Concats all sources into the destination\n * @description Spreads object properties while maintaining object integrity\n */\nexport function objectSpread(dest, ...sources) {\n    const filterProps = new Set(['__proto__', 'constructor', 'prototype']);\n    for (let i = 0, count = sources.length; i < count; i++) {\n        const src = sources[i];\n        if (src) {\n            if (typeof src.entries === 'function') {\n                for (const [key, value] of src.entries()) {\n                    if (!filterProps.has(key)) {\n                        dest[key] = value;\n                    }\n                }\n            }\n            else {\n                // Create a clean copy of the source object\n                const sanitizedSrc = Object.create(null);\n                for (const [key, value] of Object.entries(src)) {\n                    if (!filterProps.has(key)) {\n                        sanitizedSrc[key] = value;\n                    }\n                }\n                Object.assign(dest, sanitizedSrc);\n            }\n        }\n    }\n    return dest;\n}\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;AACM,SAAS,aAAa,IAAI;IAAE,IAAA,IAAA,OAAA,UAAA,QAAA,AAAG,UAAH,UAAA,OAAA,IAAA,OAAA,QAAA,OAAA,GAAA,OAAA,MAAA;QAAG,QAAH,OAAA,KAAA,SAAA,CAAA,KAAU;;IACzC,MAAM,cAAc,IAAI,IAAI;QAAC;QAAa;QAAe;KAAY;IACrE,IAAK,IAAI,IAAI,GAAG,QAAQ,QAAQ,MAAM,EAAE,IAAI,OAAO,IAAK;QACpD,MAAM,MAAM,OAAO,CAAC,EAAE;QACtB,IAAI,KAAK;YACL,IAAI,OAAO,IAAI,OAAO,KAAK,YAAY;gBACnC,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,IAAI,OAAO,GAAI;oBACtC,IAAI,CAAC,YAAY,GAAG,CAAC,MAAM;wBACvB,IAAI,CAAC,IAAI,GAAG;oBAChB;gBACJ;YACJ,OACK;gBACD,2CAA2C;gBAC3C,MAAM,eAAe,OAAO,MAAM,CAAC;gBACnC,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,OAAO,CAAC,KAAM;oBAC5C,IAAI,CAAC,YAAY,GAAG,CAAC,MAAM;wBACvB,YAAY,CAAC,IAAI,GAAG;oBACxB;gBACJ;gBACA,OAAO,MAAM,CAAC,MAAM;YACxB;QACJ;IACJ;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1093, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/u8a/eq.js"],"sourcesContent":["import { u8aToU8a } from './toU8a.js';\n/**\n * @name u8aEq\n * @summary Compares two Uint8Arrays for equality.\n * @description\n * For `UInt8Array` (or hex string) input values true if there is a match.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aEq } from '@polkadot/util';\n *\n * u8aEq(new Uint8Array([0x68, 0x65]), new Uint8Array([0x68, 0x65])); // true\n * ```\n */\nexport function u8aEq(a, b) {\n    const u8aa = u8aToU8a(a);\n    const u8ab = u8aToU8a(b);\n    if (u8aa.length === u8ab.length) {\n        const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);\n        const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);\n        const mod = (u8aa.length % 4) | 0;\n        const length = (u8aa.length - mod) | 0;\n        for (let i = 0; i < length; i += 4) {\n            if (dvA.getUint32(i) !== dvB.getUint32(i)) {\n                return false;\n            }\n        }\n        for (let i = length, count = u8aa.length; i < count; i++) {\n            if (u8aa[i] !== u8ab[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n"],"names":[],"mappings":";;;;AAAA;;AAeO,SAAS,MAAM,CAAC,EAAE,CAAC;IACtB,MAAM,OAAO,IAAA,iKAAQ,EAAC;IACtB,MAAM,OAAO,IAAA,iKAAQ,EAAC;IACtB,IAAI,KAAK,MAAM,KAAK,KAAK,MAAM,EAAE;QAC7B,MAAM,MAAM,IAAI,SAAS,KAAK,MAAM,EAAE,KAAK,UAAU;QACrD,MAAM,MAAM,IAAI,SAAS,KAAK,MAAM,EAAE,KAAK,UAAU;QACrD,MAAM,MAAM,AAAC,KAAK,MAAM,GAAG,IAAK;QAChC,MAAM,SAAS,AAAC,KAAK,MAAM,GAAG,MAAO;QACrC,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,KAAK,EAAG;YAChC,IAAI,IAAI,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,IAAI;gBACvC,OAAO;YACX;QACJ;QACA,IAAK,IAAI,IAAI,QAAQ,QAAQ,KAAK,MAAM,EAAE,IAAI,OAAO,IAAK;YACtD,IAAI,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,EAAE;gBACrB,OAAO;YACX;QACJ;QACA,OAAO;IACX;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1125, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/u8a/wrap.js"],"sourcesContent":["import { u8aConcatStrict } from './concat.js';\nimport { u8aEq } from './eq.js';\nimport { u8aToU8a } from './toU8a.js';\n/** @internal */\nexport const U8A_WRAP_ETHEREUM = /*#__PURE__*/ u8aToU8a('\\x19Ethereum Signed Message:\\n');\n/** @internal */\nexport const U8A_WRAP_PREFIX = /*#__PURE__*/ u8aToU8a('<Bytes>');\n/** @internal */\nexport const U8A_WRAP_POSTFIX = /*#__PURE__*/ u8aToU8a('</Bytes>');\nconst WRAP_LEN = U8A_WRAP_PREFIX.length + U8A_WRAP_POSTFIX.length;\n/** @internal */\nexport function u8aIsWrapped(u8a, withEthereum) {\n    return ((u8a.length >= WRAP_LEN &&\n        u8aEq(u8a.subarray(0, U8A_WRAP_PREFIX.length), U8A_WRAP_PREFIX) &&\n        u8aEq(u8a.slice(-U8A_WRAP_POSTFIX.length), U8A_WRAP_POSTFIX)) ||\n        (withEthereum &&\n            u8a.length >= U8A_WRAP_ETHEREUM.length &&\n            u8aEq(u8a.subarray(0, U8A_WRAP_ETHEREUM.length), U8A_WRAP_ETHEREUM)));\n}\n/**\n * @name u8aUnwrapBytes\n * @description Removes all <Bytes>...</Bytes> wrappers from the supplied value\n */\nexport function u8aUnwrapBytes(bytes) {\n    const u8a = u8aToU8a(bytes);\n    // we don't want to unwrap Ethereum-style wraps\n    return u8aIsWrapped(u8a, false)\n        ? u8a.subarray(U8A_WRAP_PREFIX.length, u8a.length - U8A_WRAP_POSTFIX.length)\n        : u8a;\n}\n/**\n * @name u8aWrapBytes\n * @description\n * Adds a <Bytes>...</Bytes> wrapper to the supplied value, if\n * - We don't already have a Bytes wrapper\n * - The message is not an Ethereum-style message\n */\nexport function u8aWrapBytes(bytes) {\n    const u8a = u8aToU8a(bytes);\n    return u8aIsWrapped(u8a, true)\n        ? u8a\n        : u8aConcatStrict([U8A_WRAP_PREFIX, u8a, U8A_WRAP_POSTFIX]);\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;;;;AAEO,MAAM,oBAAoB,WAAW,GAAG,IAAA,iKAAQ,EAAC;AAEjD,MAAM,kBAAkB,WAAW,GAAG,IAAA,iKAAQ,EAAC;AAE/C,MAAM,mBAAmB,WAAW,GAAG,IAAA,iKAAQ,EAAC;AACvD,MAAM,WAAW,gBAAgB,MAAM,GAAG,iBAAiB,MAAM;AAE1D,SAAS,aAAa,GAAG,EAAE,YAAY;IAC1C,OAAQ,AAAC,IAAI,MAAM,IAAI,YACnB,IAAA,2JAAK,EAAC,IAAI,QAAQ,CAAC,GAAG,gBAAgB,MAAM,GAAG,oBAC/C,IAAA,2JAAK,EAAC,IAAI,KAAK,CAAC,CAAC,iBAAiB,MAAM,GAAG,qBAC1C,gBACG,IAAI,MAAM,IAAI,kBAAkB,MAAM,IACtC,IAAA,2JAAK,EAAC,IAAI,QAAQ,CAAC,GAAG,kBAAkB,MAAM,GAAG;AAC7D;AAKO,SAAS,eAAe,KAAK;IAChC,MAAM,MAAM,IAAA,iKAAQ,EAAC;IACrB,+CAA+C;IAC/C,OAAO,aAAa,KAAK,SACnB,IAAI,QAAQ,CAAC,gBAAgB,MAAM,EAAE,IAAI,MAAM,GAAG,iBAAiB,MAAM,IACzE;AACV;AAQO,SAAS,aAAa,KAAK;IAC9B,MAAM,MAAM,IAAA,iKAAQ,EAAC;IACrB,OAAO,aAAa,KAAK,QACnB,MACA,IAAA,yKAAe,EAAC;QAAC;QAAiB;QAAK;KAAiB;AAClE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1169, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/u8a/fixLength.js"],"sourcesContent":["/**\n * @name u8aFixLength\n * @summary Shifts a Uint8Array to a specific bitLength\n * @description\n * Returns a uint8Array with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aFixLength } from '@polkadot/util';\n *\n * u8aFixLength('0x12') // => 0x12\n * u8aFixLength('0x12', 16) // => 0x0012\n * u8aFixLength('0x1234', 8) // => 0x12\n * ```\n */\nexport function u8aFixLength(value, bitLength = -1, atStart = false) {\n    const byteLength = Math.ceil(bitLength / 8);\n    if (bitLength === -1 || value.length === byteLength) {\n        return value;\n    }\n    else if (value.length > byteLength) {\n        return value.subarray(0, byteLength);\n    }\n    const result = new Uint8Array(byteLength);\n    result.set(value, atStart ? 0 : (byteLength - value.length));\n    return result;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;CAeC;;;;AACM,SAAS,aAAa,KAAK;QAAE,YAAA,iEAAY,CAAC,GAAG,UAAA,iEAAU;IAC1D,MAAM,aAAa,KAAK,IAAI,CAAC,YAAY;IACzC,IAAI,cAAc,CAAC,KAAK,MAAM,MAAM,KAAK,YAAY;QACjD,OAAO;IACX,OACK,IAAI,MAAM,MAAM,GAAG,YAAY;QAChC,OAAO,MAAM,QAAQ,CAAC,GAAG;IAC7B;IACA,MAAM,SAAS,IAAI,WAAW;IAC9B,OAAO,GAAG,CAAC,OAAO,UAAU,IAAK,aAAa,MAAM,MAAM;IAC1D,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1204, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/u8a/toBn.js"],"sourcesContent":["import { BN } from '../bn/bn.js';\n/**\n * @name u8aToBn\n * @summary Creates a BN from a Uint8Array object.\n * @description\n * `UInt8Array` input values return the actual BN. `null` or `undefined` values returns an `0x0` value.\n * @param value The value to convert\n * @param options Options to pass while converting\n * @param options.isLe Convert using Little Endian (default)\n * @param options.isNegative Convert using two's complement\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aToBn } from '@polkadot/util';\n *\n * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f\n * ```\n */\nexport function u8aToBn(value, { isLe = true, isNegative = false } = {}) {\n    // slice + reverse is expensive, however SCALE is LE by default so this is the path\n    // we are most interested in (the BE is added for the sake of being comprehensive)\n    if (!isLe) {\n        value = value.slice().reverse();\n    }\n    const count = value.length;\n    // shortcut for <= u48 values - in this case the manual conversion\n    // here seems to be more efficient than passing the full array\n    if (isNegative && count && (value[count - 1] & 0x80)) {\n        // Most common case i{8, 16, 32} default LE SCALE-encoded\n        // For <= 32, we also optimize the xor to a single op\n        switch (count) {\n            case 0:\n                return new BN(0);\n            case 1:\n                return new BN(((value[0] ^ 0x0000_00ff) * -1) - 1);\n            case 2:\n                return new BN((((value[0] + (value[1] << 8)) ^ 0x0000_ffff) * -1) - 1);\n            case 3:\n                return new BN((((value[0] + (value[1] << 8) + (value[2] << 16)) ^ 0x00ff_ffff) * -1) - 1);\n            case 4:\n                // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n                // 32-bit, in the case where the top-most bit is set this yields a negative value\n                return new BN((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00)) ^ 0xffff_ffff) * -1) - 1);\n            case 5:\n                return new BN(((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00)) ^ 0xffff_ffff) + ((value[4] ^ 0xff) * 0x1_00_00_00_00)) * -1) - 1);\n            case 6:\n                return new BN(((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00)) ^ 0xffff_ffff) + (((value[4] + (value[5] << 8)) ^ 0x0000_ffff) * 0x1_00_00_00_00)) * -1) - 1);\n            default:\n                return new BN(value, 'le').fromTwos(count * 8);\n        }\n    }\n    // Most common case - u{8, 16, 32} default LE SCALE-encoded\n    //\n    // There are some slight benefits in unrolling this specific loop,\n    // however it comes with diminishing returns since here the actual\n    // `new BN` does seem to take up the bulk of the time\n    switch (count) {\n        case 0:\n            return new BN(0);\n        case 1:\n            return new BN(value[0]);\n        case 2:\n            return new BN(value[0] + (value[1] << 8));\n        case 3:\n            return new BN(value[0] + (value[1] << 8) + (value[2] << 16));\n        case 4:\n            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n            // 32-bit, in the case where the top-most bit is set this yields a negative value\n            return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00));\n        case 5:\n            return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8)) * 0x1_00_00_00));\n        case 6:\n            return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8) + (value[5] << 16)) * 0x1_00_00_00));\n        default:\n            return new BN(value, 'le');\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1274, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/format/formatDate.js"],"sourcesContent":["/** @internal */\nfunction zeroPad(value) {\n    return value.toString().padStart(2, '0');\n}\n/**\n * @name formatDate\n * @description Formats a date in CCYY-MM-DD HH:MM:SS format\n */\nexport function formatDate(date) {\n    const year = date.getFullYear().toString();\n    const month = zeroPad((date.getMonth() + 1));\n    const day = zeroPad(date.getDate());\n    const hour = zeroPad(date.getHours());\n    const minute = zeroPad(date.getMinutes());\n    const second = zeroPad(date.getSeconds());\n    return `${year}-${month}-${day} ${hour}:${minute}:${second}`;\n}\n"],"names":[],"mappings":"AAAA,cAAc;;;;AACd,SAAS,QAAQ,KAAK;IAClB,OAAO,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG;AACxC;AAKO,SAAS,WAAW,IAAI;IAC3B,MAAM,OAAO,KAAK,WAAW,GAAG,QAAQ;IACxC,MAAM,QAAQ,QAAS,KAAK,QAAQ,KAAK;IACzC,MAAM,MAAM,QAAQ,KAAK,OAAO;IAChC,MAAM,OAAO,QAAQ,KAAK,QAAQ;IAClC,MAAM,SAAS,QAAQ,KAAK,UAAU;IACtC,MAAM,SAAS,QAAQ,KAAK,UAAU;IACtC,OAAO,AAAC,GAAU,OAAR,MAAK,KAAY,OAAT,OAAM,KAAU,OAAP,KAAI,KAAW,OAAR,MAAK,KAAa,OAAV,QAAO,KAAU,OAAP;AACxD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1294, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/noop.js"],"sourcesContent":["/**\n * A sharable identity function. Returns the input as-is with no transformation applied.\n */\nexport function identity(value) {\n    return value;\n}\n/**\n * A sharable noop function. As the name suggests, does nothing\n */\nexport function noop() {\n    // noop\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;;AACM,SAAS,SAAS,KAAK;IAC1B,OAAO;AACX;AAIO,SAAS;AACZ,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1312, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/logger.js"],"sourcesContent":["import { xglobal } from '@polkadot/x-global';\nimport { formatDate } from './format/formatDate.js';\nimport { isBn } from './is/bn.js';\nimport { isBuffer } from './is/buffer.js';\nimport { isFunction } from './is/function.js';\nimport { isObject } from './is/object.js';\nimport { isU8a } from './is/u8a.js';\nimport { u8aToHex } from './u8a/toHex.js';\nimport { u8aToU8a } from './u8a/toU8a.js';\nimport { noop } from './noop.js';\nconst logTo = {\n    debug: 'log',\n    error: 'error',\n    log: 'log',\n    warn: 'warn'\n};\nfunction formatOther(value) {\n    if (value && isObject(value) && value.constructor === Object) {\n        const result = {};\n        for (const [k, v] of Object.entries(value)) {\n            result[k] = loggerFormat(v);\n        }\n        return result;\n    }\n    return value;\n}\nexport function loggerFormat(value) {\n    if (Array.isArray(value)) {\n        return value.map(loggerFormat);\n    }\n    else if (isBn(value)) {\n        return value.toString();\n    }\n    else if (isU8a(value) || isBuffer(value)) {\n        return u8aToHex(u8aToU8a(value));\n    }\n    return formatOther(value);\n}\nfunction formatWithLength(maxLength) {\n    return (v) => {\n        if (maxLength <= 0) {\n            return v;\n        }\n        const r = `${v}`;\n        return r.length < maxLength\n            ? v\n            : `${r.substring(0, maxLength)} ...`;\n    };\n}\nfunction apply(log, type, values, maxSize = -1) {\n    if (values.length === 1 && isFunction(values[0])) {\n        const fnResult = values[0]();\n        return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);\n    }\n    console[logTo[log]](formatDate(new Date()), type, ...values\n        .map(loggerFormat)\n        .map(formatWithLength(maxSize)));\n}\nfunction isDebugOn(e, type) {\n    return !!e && (e === '*' ||\n        type === e ||\n        (e.endsWith('*') &&\n            type.startsWith(e.slice(0, -1))));\n}\nfunction isDebugOff(e, type) {\n    return !!e && (e.startsWith('-') &&\n        (type === e.slice(1) ||\n            (e.endsWith('*') &&\n                type.startsWith(e.slice(1, -1)))));\n}\nfunction getDebugFlag(env, type) {\n    let flag = false;\n    for (const e of env) {\n        if (isDebugOn(e, type)) {\n            flag = true;\n        }\n        else if (isDebugOff(e, type)) {\n            flag = false;\n        }\n    }\n    return flag;\n}\nfunction parseEnv(type) {\n    const maxSize = parseInt(xglobal.process?.env?.['DEBUG_MAX'] || '-1', 10);\n    return [\n        getDebugFlag((xglobal.process?.env?.['DEBUG'] || '').toLowerCase().split(','), type),\n        isNaN(maxSize)\n            ? -1\n            : maxSize\n    ];\n}\n/**\n * @name Logger\n * @summary Creates a consistent log interface for messages\n * @description\n * Returns a `Logger` that has `.log`, `.error`, `.warn` and `.debug` (controlled with environment `DEBUG=typeA,typeB`) methods. Logging is done with a consistent prefix (type of logger, date) followed by the actual message using the underlying console.\n * @example\n * <BR>\n *\n * ```javascript\n * import { logger } from '@polkadot/util';\n *\n * const l = logger('test');\n * ```\n */\nexport function logger(origin) {\n    const type = `${origin.toUpperCase()}:`.padStart(16);\n    const [isDebug, maxSize] = parseEnv(origin.toLowerCase());\n    return {\n        debug: isDebug\n            ? (...values) => apply('debug', type, values, maxSize)\n            : noop,\n        error: (...values) => apply('error', type, values),\n        log: (...values) => apply('log', type, values),\n        noop,\n        warn: (...values) => apply('warn', type, values)\n    };\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1443, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/stringify.js"],"sourcesContent":["import { isBigInt } from './is/bigInt.js';\n/** @internal */\nfunction replacer(_, v) {\n    return isBigInt(v)\n        ? v.toString()\n        : v;\n}\n/**\n * @name stringify\n * @summary Performs a JSON.stringify, with BigInt handling\n * @description A wrapper for JSON.stringify that handles BigInt values transparently, converting them to string. No differences from the native JSON.stringify function otherwise.\n */\nexport function stringify(value, space) {\n    return JSON.stringify(value, replacer, space);\n}\n"],"names":[],"mappings":";;;;AAAA;;AACA,cAAc,GACd,SAAS,SAAS,CAAC,EAAE,CAAC;IAClB,OAAO,IAAA,iKAAQ,EAAC,KACV,EAAE,QAAQ,KACV;AACV;AAMO,SAAS,UAAU,KAAK,EAAE,KAAK;IAClC,OAAO,KAAK,SAAS,CAAC,OAAO,UAAU;AAC3C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1459, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/undefined.js"],"sourcesContent":["/**\n * @name isUndefined\n * @summary Tests for a `undefined` values.\n * @description\n * Checks to see if the input value is `undefined`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isUndefined } from '@polkadot/util';\n *\n * console.log('isUndefined', isUndefined(void(0))); // => true\n * ```\n */\nexport function isUndefined(value) {\n    return value === undefined;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;CAaC;;;;AACM,SAAS,YAAY,KAAK;IAC7B,OAAO,UAAU;AACrB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1483, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/error.js"],"sourcesContent":["/**\n * @name isError\n * @summary Tests for a `Error` object instance.\n * @description\n * Checks to see if the input object is an instance of `Error`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isError } from '@polkadot/util';\n *\n * console.log('isError', isError(new Error('message'))); // => true\n * ```\n */\nexport function isError(value) {\n    return (((value && value.constructor) === Error) ||\n        value instanceof Error);\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;CAaC;;;;AACM,SAAS,QAAQ,KAAK;IACzB,OAAQ,AAAC,CAAC,SAAS,MAAM,WAAW,MAAM,SACtC,iBAAiB;AACzB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1507, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/class.js"],"sourcesContent":["import { isOnFunction } from './helpers.js';\n/**\n * @name isClass\n * Tests if the supplied argument is a Class\n */\nexport const isClass = /*#__PURE__*/ isOnFunction('isPrototypeOf', 'hasOwnProperty');\n"],"names":[],"mappings":";;;;AAAA;;AAKO,MAAM,UAAU,WAAW,GAAG,IAAA,sKAAY,EAAC,iBAAiB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1518, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/childClass.js"],"sourcesContent":["import { isClass } from './class.js';\n/**\n * @name isChildClass\n * @summary Tests if the child extends the parent Class\n * @description\n * Checks to see if the child Class extends the parent Class\n * @example\n * <BR>\n *\n * ```javascript\n * import { isChildClass } from '@polkadot/util';\n *\n * console.log('isChildClass', isChildClass(BN, BN); // => true\n * console.log('isChildClass', isChildClass(BN, Uint8Array); // => false\n * ```\n */\nexport function isChildClass(Parent, Child) {\n    // https://stackoverflow.com/questions/30993434/check-if-a-constructor-inherits-another-in-es6/30993664\n    return isClass(Child) && isClass(Parent)\n        // eslint-disable-next-line no-prototype-builtins\n        ? Parent === Child || Parent.isPrototypeOf(Child)\n        : false;\n}\n"],"names":[],"mappings":";;;;AAAA;;AAgBO,SAAS,aAAa,MAAM,EAAE,KAAK;IACtC,uGAAuG;IACvG,OAAO,IAAA,+JAAO,EAAC,UAAU,IAAA,+JAAO,EAAC,UAE3B,WAAW,SAAS,OAAO,aAAa,CAAC,SACzC;AACV","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1532, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/null.js"],"sourcesContent":["/**\n * @name isNull\n * @summary Tests for a `null` values.\n * @description\n * Checks to see if the input value is `null`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isNull } from '@polkadot/util';\n *\n * console.log('isNull', isNull(null)); // => true\n * ```\n */\nexport function isNull(value) {\n    return value === null;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;CAaC;;;;AACM,SAAS,OAAO,KAAK;IACxB,OAAO,UAAU;AACrB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1556, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/boolean.js"],"sourcesContent":["/**\n * @name isBoolean\n * @summary Tests for a boolean value.\n * @description\n * Checks to see if the input value is a JavaScript boolean.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isBoolean } from '@polkadot/util';\n *\n * isBoolean(false); // => true\n * ```\n */\nexport function isBoolean(value) {\n    return typeof value === 'boolean';\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;CAaC;;;;AACM,SAAS,UAAU,KAAK;IAC3B,OAAO,OAAO,UAAU;AAC5B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1580, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/object/property.js"],"sourcesContent":["/**\n * @name objectProperty\n * @summary Assign a get property on the input object\n */\nexport function objectProperty(that, key, getter, getName, index = 0) {\n    const name = getName\n        ? getName(key, index)\n        : key;\n    // There are 3 approaches here -\n    //  - Object.prototype.hasOwnProperty.call(that, key) - this only checks the current class, i.e\n    //    will retuirn false if the property is set in the parent class\n    //  - isUndefined(...) - this may yield a false positive when the property is there, but not set.\n    //    Additionally, on pre-defined getters it may make a call\n    //  - key in that - Does not need to be combined with either of the above and checks the full chain\n    if (!(name in that)) {\n        Object.defineProperty(that, name, {\n            enumerable: true,\n            // Unlike in lazy, we always call into the upper function, i.e. this method\n            // does not cache old values (it is expected to be used for dynamic values)\n            get: function () {\n                return getter(key, index, this);\n            }\n        });\n    }\n}\n/**\n * @name objectProperties\n * @summary Assign get properties on the input object\n */\nexport function objectProperties(that, keys, getter, getName) {\n    for (let i = 0, count = keys.length; i < count; i++) {\n        objectProperty(that, keys[i], getter, getName, i);\n    }\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;AACM,SAAS,eAAe,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO;QAAE,QAAA,iEAAQ;IAC/D,MAAM,OAAO,UACP,QAAQ,KAAK,SACb;IACN,gCAAgC;IAChC,+FAA+F;IAC/F,mEAAmE;IACnE,iGAAiG;IACjG,6DAA6D;IAC7D,mGAAmG;IACnG,IAAI,CAAC,CAAC,QAAQ,IAAI,GAAG;QACjB,OAAO,cAAc,CAAC,MAAM,MAAM;YAC9B,YAAY;YACZ,2EAA2E;YAC3E,2EAA2E;YAC3E,KAAK;gBACD,OAAO,OAAO,KAAK,OAAO,IAAI;YAClC;QACJ;IACJ;AACJ;AAKO,SAAS,iBAAiB,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO;IACxD,IAAK,IAAI,IAAI,GAAG,QAAQ,KAAK,MAAM,EAAE,IAAI,OAAO,IAAK;QACjD,eAAe,MAAM,IAAI,CAAC,EAAE,EAAE,QAAQ,SAAS;IACnD;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1618, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/string/camelCase.js"],"sourcesContent":["export const CC_TO_UP = new Array(256);\nexport const CC_TO_LO = new Array(256);\nfor (let i = 0, count = CC_TO_UP.length; i < count; i++) {\n    CC_TO_LO[i] = String.fromCharCode(i).toLowerCase();\n    CC_TO_UP[i] = String.fromCharCode(i).toUpperCase();\n}\n/** @internal */\nfunction formatAllCaps(w) {\n    return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP[w.charCodeAt(w.length - 1)];\n}\n/**\n * @internal\n *\n * Inspired by https://stackoverflow.com/a/2970667\n *\n * This is not as optimal as the original SO answer (we split into per-word),\n * however it does pass the tests (which the SO version doesn't) and is still\n * a major improvement over the original camelcase npm package -\n *\n *   camelcase: 20.88 μs/op\n *        this:  1.00 μs/op\n *\n * Caveat of this: only Ascii, but acceptable for the intended usecase\n */\nfunction converter(format) {\n    return (value) => {\n        const parts = value\n            // replace all separators (including consequtive) with spaces\n            .replace(/[-_., ]+/g, ' ')\n            // we don't want leading or trailing spaces\n            .trim()\n            // split into words\n            .split(' ');\n        let result = '';\n        for (let i = 0, count = parts.length; i < count; i++) {\n            const w = parts[i];\n            // apply the formatting\n            result += format(/^[\\dA-Z]+$/.test(w)\n                // all full uppercase + letters are changed to lowercase\n                ? w.toLowerCase()\n                // all consecutive capitals + letters are changed to lowercase\n                // e.g. UUID64 -> uuid64, while preserving splits, eg. NFTOrder -> nftOrder\n                : w.replace(/^[\\dA-Z]{2,}[^a-z]/, formatAllCaps), i);\n        }\n        return result;\n    };\n}\n/**\n * @name stringCamelCase\n * @summary Convert a dash/dot/underscore/space separated Ascii string/String to camelCase\n */\nexport const stringCamelCase = /*#__PURE__*/ converter((w, i) => \n(i ? CC_TO_UP[w.charCodeAt(0)] : CC_TO_LO[w.charCodeAt(0)]) + w.slice(1));\n/**\n * @name stringPascalCase\n * @summary Convert a dash/dot/underscore/space separated Ascii string/String to PascalCase\n */\nexport const stringPascalCase = /*#__PURE__*/ converter((w) => \nCC_TO_UP[w.charCodeAt(0)] + w.slice(1));\n"],"names":[],"mappings":";;;;;;;;;;AAAO,MAAM,WAAW,IAAI,MAAM;AAC3B,MAAM,WAAW,IAAI,MAAM;AAClC,IAAK,IAAI,IAAI,GAAG,QAAQ,SAAS,MAAM,EAAE,IAAI,OAAO,IAAK;IACrD,QAAQ,CAAC,EAAE,GAAG,OAAO,YAAY,CAAC,GAAG,WAAW;IAChD,QAAQ,CAAC,EAAE,GAAG,OAAO,YAAY,CAAC,GAAG,WAAW;AACpD;AACA,cAAc,GACd,SAAS,cAAc,CAAC;IACpB,OAAO,EAAE,KAAK,CAAC,GAAG,EAAE,MAAM,GAAG,GAAG,WAAW,KAAK,QAAQ,CAAC,EAAE,UAAU,CAAC,EAAE,MAAM,GAAG,GAAG;AACxF;AACA;;;;;;;;;;;;;CAaC,GACD,SAAS,UAAU,MAAM;IACrB,OAAO,CAAC;QACJ,MAAM,QAAQ,KACV,6DAA6D;SAC5D,OAAO,CAAC,aAAa,IACtB,2CAA2C;SAC1C,IAAI,EACL,mBAAmB;SAClB,KAAK,CAAC;QACX,IAAI,SAAS;QACb,IAAK,IAAI,IAAI,GAAG,QAAQ,MAAM,MAAM,EAAE,IAAI,OAAO,IAAK;YAClD,MAAM,IAAI,KAAK,CAAC,EAAE;YAClB,uBAAuB;YACvB,UAAU,OAAO,aAAa,IAAI,CAAC,KAE7B,EAAE,WAAW,KAGb,EAAE,OAAO,CAAC,sBAAsB,gBAAgB;QAC1D;QACA,OAAO;IACX;AACJ;AAKO,MAAM,kBAAkB,WAAW,GAAG,UAAU,CAAC,GAAG,IAC3D,CAAC,IAAI,QAAQ,CAAC,EAAE,UAAU,CAAC,GAAG,GAAG,QAAQ,CAAC,EAAE,UAAU,CAAC,GAAG,IAAI,EAAE,KAAK,CAAC;AAK/D,MAAM,mBAAmB,WAAW,GAAG,UAAU,CAAC,IACzD,QAAQ,CAAC,EAAE,UAAU,CAAC,GAAG,GAAG,EAAE,KAAK,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1671, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/bn/toHex.js"],"sourcesContent":["import { u8aToHex } from '../u8a/index.js';\nimport { bnToU8a } from './toU8a.js';\n/**\n * @name bnToHex\n * @summary Creates a hex value from a BN.js bignumber object.\n * @description\n * `null` inputs returns a `0x` result, BN values return the actual value as a `0x` prefixed hex value. Anything that is not a BN object throws an error. With `bitLength` set, it fixes the number to the specified length.\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnToHex } from '@polkadot/util';\n *\n * bnToHex(new BN(0x123456)); // => '0x123456'\n * ```\n */\nexport function bnToHex(value, { bitLength = -1, isLe = false, isNegative = false } = {}) {\n    return u8aToHex(bnToU8a(value, { bitLength, isLe, isNegative }));\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAgBO,SAAS,QAAQ,KAAK;QAAE,EAAE,YAAY,CAAC,CAAC,EAAE,OAAO,KAAK,EAAE,aAAa,KAAK,EAAE,GAApD,iEAAuD,CAAC;IACnF,OAAO,IAAA,iKAAQ,EAAC,IAAA,+JAAO,EAAC,OAAO;QAAE;QAAW;QAAM;IAAW;AACjE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1691, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/format/formatDecimal.js"],"sourcesContent":["const NUMBER_REGEX = new RegExp('(\\\\d+?)(?=(\\\\d{3})+(?!\\\\d)|$)', 'g');\n/**\n * @name formatDecimal\n * @description Formats a number into string format with thousand separators\n */\nexport function formatDecimal(value, separator = ',') {\n    // We can do this by adjusting the regx, however for the sake of clarity\n    // we rather strip and re-add the negative sign in the output\n    const isNegative = value[0].startsWith('-');\n    const matched = isNegative\n        ? value.substring(1).match(NUMBER_REGEX)\n        : value.match(NUMBER_REGEX);\n    return matched\n        ? `${isNegative ? '-' : ''}${matched.join(separator)}`\n        : value;\n}\n"],"names":[],"mappings":";;;;AAAA,MAAM,eAAe,IAAI,OAAO,iCAAiC;AAK1D,SAAS,cAAc,KAAK;QAAE,YAAA,iEAAY;IAC7C,wEAAwE;IACxE,6DAA6D;IAC7D,MAAM,aAAa,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC;IACvC,MAAM,UAAU,aACV,MAAM,SAAS,CAAC,GAAG,KAAK,CAAC,gBACzB,MAAM,KAAK,CAAC;IAClB,OAAO,UACD,AAAC,GAA0B,OAAxB,aAAa,MAAM,IAA6B,OAAxB,QAAQ,IAAI,CAAC,cACxC;AACV","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1708, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/format/getSeparator.js"],"sourcesContent":["/**\n * Get the decimal and thousand separator of a locale\n * @param locale\n * @returns {decimal: string, thousand: string}\n */\nexport function getSeparator(locale) {\n    return {\n        decimal: (0.1).toLocaleString(locale, { useGrouping: false }).charAt(1),\n        thousand: (1000).toLocaleString(locale, { useGrouping: true }).replace(/\\d/g, '').charAt(0)\n    };\n}\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;AACM,SAAS,aAAa,MAAM;IAC/B,OAAO;QACH,SAAS,AAAC,IAAK,cAAc,CAAC,QAAQ;YAAE,aAAa;QAAM,GAAG,MAAM,CAAC;QACrE,UAAU,AAAC,MAAM,cAAc,CAAC,QAAQ;YAAE,aAAa;QAAK,GAAG,OAAO,CAAC,OAAO,IAAI,MAAM,CAAC;IAC7F;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1730, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/format/si.js"],"sourcesContent":["/** @internal */\nexport const SI_MID = 8;\n/** @internal */\nexport const SI = [\n    { power: -24, text: 'yocto', value: 'y' },\n    { power: -21, text: 'zepto', value: 'z' },\n    { power: -18, text: 'atto', value: 'a' },\n    { power: -15, text: 'femto', value: 'f' },\n    { power: -12, text: 'pico', value: 'p' },\n    { power: -9, text: 'nano', value: 'n' },\n    { power: -6, text: 'micro', value: 'µ' },\n    { power: -3, text: 'milli', value: 'm' },\n    { power: 0, text: 'Unit', value: '-' }, // position 8\n    { power: 3, text: 'Kilo', value: 'k' },\n    { power: 6, text: 'Mill', value: 'M' }, // Mega, M\n    { power: 9, text: 'Bill', value: 'B' }, // Giga, G\n    { power: 12, text: 'Tril', value: 'T' }, // Tera, T\n    { power: 15, text: 'Peta', value: 'P' },\n    { power: 18, text: 'Exa', value: 'E' },\n    { power: 21, text: 'Zeta', value: 'Z' },\n    { power: 24, text: 'Yotta', value: 'Y' }\n];\n/** @internal */\nexport function findSi(type) {\n    // use a loop here, better RN support (which doesn't have [].find)\n    for (let i = 0, count = SI.length; i < count; i++) {\n        if (SI[i].value === type) {\n            return SI[i];\n        }\n    }\n    return SI[SI_MID];\n}\n/** @internal */\nexport function calcSi(text, decimals, forceUnit) {\n    if (forceUnit) {\n        return findSi(forceUnit);\n    }\n    const siDefIndex = (SI_MID - 1) + Math.ceil((text.length - decimals) / 3);\n    return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];\n}\n"],"names":[],"mappings":"AAAA,cAAc;;;;;;;;;;AACP,MAAM,SAAS;AAEf,MAAM,KAAK;IACd;QAAE,OAAO,CAAC;QAAI,MAAM;QAAS,OAAO;IAAI;IACxC;QAAE,OAAO,CAAC;QAAI,MAAM;QAAS,OAAO;IAAI;IACxC;QAAE,OAAO,CAAC;QAAI,MAAM;QAAQ,OAAO;IAAI;IACvC;QAAE,OAAO,CAAC;QAAI,MAAM;QAAS,OAAO;IAAI;IACxC;QAAE,OAAO,CAAC;QAAI,MAAM;QAAQ,OAAO;IAAI;IACvC;QAAE,OAAO,CAAC;QAAG,MAAM;QAAQ,OAAO;IAAI;IACtC;QAAE,OAAO,CAAC;QAAG,MAAM;QAAS,OAAO;IAAI;IACvC;QAAE,OAAO,CAAC;QAAG,MAAM;QAAS,OAAO;IAAI;IACvC;QAAE,OAAO;QAAG,MAAM;QAAQ,OAAO;IAAI;IACrC;QAAE,OAAO;QAAG,MAAM;QAAQ,OAAO;IAAI;IACrC;QAAE,OAAO;QAAG,MAAM;QAAQ,OAAO;IAAI;IACrC;QAAE,OAAO;QAAG,MAAM;QAAQ,OAAO;IAAI;IACrC;QAAE,OAAO;QAAI,MAAM;QAAQ,OAAO;IAAI;IACtC;QAAE,OAAO;QAAI,MAAM;QAAQ,OAAO;IAAI;IACtC;QAAE,OAAO;QAAI,MAAM;QAAO,OAAO;IAAI;IACrC;QAAE,OAAO;QAAI,MAAM;QAAQ,OAAO;IAAI;IACtC;QAAE,OAAO;QAAI,MAAM;QAAS,OAAO;IAAI;CAC1C;AAEM,SAAS,OAAO,IAAI;IACvB,kEAAkE;IAClE,IAAK,IAAI,IAAI,GAAG,QAAQ,GAAG,MAAM,EAAE,IAAI,OAAO,IAAK;QAC/C,IAAI,EAAE,CAAC,EAAE,CAAC,KAAK,KAAK,MAAM;YACtB,OAAO,EAAE,CAAC,EAAE;QAChB;IACJ;IACA,OAAO,EAAE,CAAC,OAAO;AACrB;AAEO,SAAS,OAAO,IAAI,EAAE,QAAQ,EAAE,SAAS;IAC5C,IAAI,WAAW;QACX,OAAO,OAAO;IAClB;IACA,MAAM,aAAa,AAAC,SAAS,IAAK,KAAK,IAAI,CAAC,CAAC,KAAK,MAAM,GAAG,QAAQ,IAAI;IACvE,OAAO,EAAE,CAAC,WAAW,IAAI,EAAE,CAAC,aAAa,IAAI,IAAI,GAAG,MAAM,GAAG,EAAE;AACnE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1848, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/format/formatBalance.js"],"sourcesContent":["import { bnToBn } from '../bn/toBn.js';\nimport { isBoolean } from '../is/boolean.js';\nimport { formatDecimal } from './formatDecimal.js';\nimport { getSeparator } from './getSeparator.js';\nimport { calcSi, findSi, SI, SI_MID } from './si.js';\nconst DEFAULT_DECIMALS = 0;\nconst DEFAULT_UNIT = SI[SI_MID].text;\nlet defaultDecimals = DEFAULT_DECIMALS;\nlet defaultUnit = DEFAULT_UNIT;\nfunction _formatBalance(input, { decimals = defaultDecimals, forceUnit, locale = 'en', withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {\n    // we only work with string inputs here - convert anything\n    // into the string-only value\n    let text = bnToBn(input).toString();\n    if (text.length === 0 || text === '0') {\n        return '0';\n    }\n    // strip the negative sign so we can work with clean groupings, re-add this in the\n    // end when we return the result (from here on we work with positive numbers)\n    let sign = '';\n    if (text[0].startsWith('-')) {\n        sign = '-';\n        text = text.substring(1);\n    }\n    // We start at midpoint (8) minus 1 - this means that values display as\n    // 123.4567 instead of 0.1234 k (so we always have the most relevant).\n    const si = calcSi(text, decimals, forceUnit);\n    const mid = text.length - (decimals + si.power);\n    const pre = mid <= 0 ? '0' : text.substring(0, mid);\n    // get the post from the midpoint onward and then first add max decimals\n    // before trimming to the correct (calculated) amount of decimals again\n    let post = text\n        .padStart(mid < 0 ? decimals : 1, '0')\n        .substring(mid < 0 ? 0 : mid)\n        .padEnd(withAll ? Math.max(decimals, 4) : 4, '0')\n        .substring(0, withAll ? Math.max(4, decimals + si.power) : 4);\n    // remove all trailing 0's (if required via flag)\n    if (!withZero) {\n        let end = post.length - 1;\n        // This looks inefficient, however it is better to do the checks and\n        // only make one final slice than it is to do it in multiples\n        do {\n            if (post[end] === '0') {\n                end--;\n            }\n        } while (post[end] === '0');\n        post = post.substring(0, end + 1);\n    }\n    // the display unit\n    const unit = isBoolean(withUnit)\n        ? SI[SI_MID].text\n        : withUnit;\n    // format the units for display based on the flags\n    const units = withSi || withSiFull\n        ? si.value === '-'\n            ? withUnit\n                ? ` ${unit}`\n                : ''\n            : ` ${withSiFull ? `${si.text}${withUnit ? ' ' : ''}` : si.value}${withUnit ? unit : ''}`\n        : '';\n    const { decimal, thousand } = getSeparator(locale);\n    return `${sign}${formatDecimal(pre, thousand)}${post && `${decimal}${post}`}${units}`;\n}\nexport const formatBalance = _formatBalance;\nformatBalance.calcSi = (text, decimals = defaultDecimals) => calcSi(text, decimals);\nformatBalance.findSi = findSi;\nformatBalance.getDefaults = () => {\n    return {\n        decimals: defaultDecimals,\n        unit: defaultUnit\n    };\n};\nformatBalance.getOptions = (decimals = defaultDecimals) => {\n    return SI.filter(({ power }) => power < 0\n        ? (decimals + power) >= 0\n        : true);\n};\nformatBalance.setDefaults = ({ decimals, unit }) => {\n    defaultDecimals = (Array.isArray(decimals)\n        ? decimals[0]\n        : decimals) ?? defaultDecimals;\n    defaultUnit = (Array.isArray(unit)\n        ? unit[0]\n        : unit) ?? defaultUnit;\n    SI[SI_MID].text = defaultUnit;\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1939, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/format/formatNumber.js"],"sourcesContent":["import { bnToBn } from '../bn/toBn.js';\nimport { formatDecimal } from './formatDecimal.js';\nimport { getSeparator } from './getSeparator.js';\n/**\n * @name formatNumber\n * @description Formats a number into string format with thousand separators\n */\nexport function formatNumber(value, { locale = 'en' } = {}) {\n    const { thousand } = getSeparator(locale);\n    return formatDecimal(bnToBn(value).toString(), thousand);\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAKO,SAAS,aAAa,KAAK;QAAE,EAAE,SAAS,IAAI,EAAE,GAAjB,iEAAoB,CAAC;IACrD,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAA,+KAAY,EAAC;IAClC,OAAO,IAAA,iLAAa,EAAC,IAAA,6JAAM,EAAC,OAAO,QAAQ,IAAI;AACnD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1958, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/u8a/toNumber.js"],"sourcesContent":["/**\n * @name u8aToNumber\n * @summary Creates a number from a Uint8Array object.\n */\nexport function u8aToNumber(value, { isLe = true, isNegative = false } = {}) {\n    // slice + reverse is expensive, however SCALE is LE by default so this is the path\n    // we are most interested in (the BE is added for the sake of being comprehensive)\n    if (!isLe) {\n        value = value.slice().reverse();\n    }\n    const count = value.length;\n    // When the value is a i{8, 16, 24, 32, 40, 40} values and the top-most bit\n    // indicates a signed value, we use a two's complement conversion. If one of these\n    // flags are not set, we just do a normal unsigned conversion (the same shortcut\n    // applies in both the u8aTo{BigInt, Bn} conversions as well)\n    if (isNegative && count && (value[count - 1] & 0x80)) {\n        switch (count) {\n            case 0:\n                return 0;\n            case 1:\n                return (((value[0] ^ 0x0000_00ff) * -1) - 1);\n            case 2:\n                return ((((value[0] + (value[1] << 8)) ^ 0x0000_ffff) * -1) - 1);\n            case 3:\n                return ((((value[0] + (value[1] << 8) + (value[2] << 16)) ^ 0x00ff_ffff) * -1) - 1);\n            case 4:\n                // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n                // 32-bit, in the case where the top-most bit is set this yields a negative value\n                return ((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00)) ^ 0xffff_ffff) * -1) - 1);\n            case 5:\n                return (((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00)) ^ 0xffff_ffff) + ((value[4] ^ 0xff) * 0x1_00_00_00_00)) * -1) - 1);\n            case 6:\n                return (((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00)) ^ 0xffff_ffff) + (((value[4] + (value[5] << 8)) ^ 0x0000_ffff) * 0x1_00_00_00_00)) * -1) - 1);\n            default:\n                throw new Error('Value more than 48-bits cannot be reliably converted');\n        }\n    }\n    switch (count) {\n        case 0:\n            return 0;\n        case 1:\n            return value[0];\n        case 2:\n            return value[0] + (value[1] << 8);\n        case 3:\n            return value[0] + (value[1] << 8) + (value[2] << 16);\n        case 4:\n            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n            // 32-bit, in the case where the top-most bit is set this yields a negative value\n            return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00);\n        case 5:\n            return value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8)) * 0x1_00_00_00);\n        case 6:\n            return value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8) + (value[5] << 16)) * 0x1_00_00_00);\n        default:\n            throw new Error('Value more than 48-bits cannot be reliably converted');\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2024, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/ascii.js"],"sourcesContent":["import { u8aToU8a } from '../u8a/toU8a.js';\nimport { isHex } from './hex.js';\nimport { isString } from './string.js';\n/** @internal */\nfunction isAsciiStr(str) {\n    for (let i = 0, count = str.length; i < count; i++) {\n        const b = str.charCodeAt(i);\n        // check is inlined here, it is faster than making a call\n        if (b < 32 || b > 126) {\n            return false;\n        }\n    }\n    return true;\n}\n/** @internal */\nfunction isAsciiBytes(u8a) {\n    for (let i = 0, count = u8a.length; i < count; i++) {\n        const b = u8a[i] | 0;\n        // check is inlined here, it is faster than making a call\n        if (b < 32 || b > 126) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @name isAscii\n * @summary Tests if the input is printable ASCII\n * @description\n * Checks to see if the input string or Uint8Array is printable ASCII, 32-127 + formatters\n */\nexport function isAscii(value) {\n    return isString(value)\n        ? isHex(value)\n            ? isAsciiBytes(u8aToU8a(value))\n            : isAsciiStr(value)\n        : value\n            ? isAsciiBytes(value)\n            : false;\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AACA,cAAc,GACd,SAAS,WAAW,GAAG;IACnB,IAAK,IAAI,IAAI,GAAG,QAAQ,IAAI,MAAM,EAAE,IAAI,OAAO,IAAK;QAChD,MAAM,IAAI,IAAI,UAAU,CAAC;QACzB,yDAAyD;QACzD,IAAI,IAAI,MAAM,IAAI,KAAK;YACnB,OAAO;QACX;IACJ;IACA,OAAO;AACX;AACA,cAAc,GACd,SAAS,aAAa,GAAG;IACrB,IAAK,IAAI,IAAI,GAAG,QAAQ,IAAI,MAAM,EAAE,IAAI,OAAO,IAAK;QAChD,MAAM,IAAI,GAAG,CAAC,EAAE,GAAG;QACnB,yDAAyD;QACzD,IAAI,IAAI,MAAM,IAAI,KAAK;YACnB,OAAO;QACX;IACJ;IACA,OAAO;AACX;AAOO,SAAS,QAAQ,KAAK;IACzB,OAAO,IAAA,iKAAQ,EAAC,SACV,IAAA,2JAAK,EAAC,SACF,aAAa,IAAA,iKAAQ,EAAC,UACtB,WAAW,SACf,QACI,aAAa,SACb;AACd","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2061, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/utf8.js"],"sourcesContent":["import { u8aToU8a } from '../u8a/toU8a.js';\nimport { isString } from './string.js';\n/**\n * @name isUtf8\n * @summary Tests if the input is valid Utf8\n * @description\n * Checks to see if the input string or Uint8Array is valid Utf8\n */\nexport function isUtf8(value) {\n    if (!value) {\n        return isString(value);\n    }\n    const u8a = u8aToU8a(value);\n    const len = u8a.length;\n    let i = 0;\n    while (i < len) {\n        if (u8a[i] <= 0x7F) /* 00..7F */ {\n            i += 1;\n        }\n        else if (u8a[i] >= 0xC2 && u8a[i] <= 0xDF) /* C2..DF 80..BF */ {\n            if (i + 1 < len) /* Expect a 2nd byte */ {\n                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {\n                    // *message = \"After a first byte between C2 and DF, expecting a 2nd byte between 80 and BF\";\n                    // *faulty_bytes = 2;\n                    return false;\n                }\n            }\n            else {\n                // *message = \"After a first byte between C2 and DF, expecting a 2nd byte.\";\n                // *faulty_bytes = 1;\n                return false;\n            }\n            i += 2;\n        }\n        else if (u8a[i] === 0xE0) /* E0 A0..BF 80..BF */ {\n            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {\n                if (u8a[i + 1] < 0xA0 || u8a[i + 1] > 0xBF) {\n                    // *message = \"After a first byte of E0, expecting a 2nd byte between A0 and BF.\";\n                    // *faulty_bytes = 2;\n                    return false;\n                }\n                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n                    // *message = \"After a first byte of E0, expecting a 3nd byte between 80 and BF.\";\n                    // *faulty_bytes = 3;\n                    return false;\n                }\n            }\n            else {\n                // *message = \"After a first byte of E0, expecting two following bytes.\";\n                // *faulty_bytes = 1;\n                return false;\n            }\n            i += 3;\n        }\n        else if (u8a[i] >= 0xE1 && u8a[i] <= 0xEC) /* E1..EC 80..BF 80..BF */ {\n            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {\n                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {\n                    // *message = \"After a first byte between E1 and EC, expecting the 2nd byte between 80 and BF.\";\n                    // *faulty_bytes = 2;\n                    return false;\n                }\n                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n                    // *message = \"After a first byte between E1 and EC, expecting the 3rd byte between 80 and BF.\";\n                    // *faulty_bytes = 3;\n                    return false;\n                }\n            }\n            else {\n                // *message = \"After a first byte between E1 and EC, expecting two following bytes.\";\n                // *faulty_bytes = 1;\n                return false;\n            }\n            i += 3;\n        }\n        else if (u8a[i] === 0xED) /* ED 80..9F 80..BF */ {\n            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {\n                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x9F) {\n                    // *message = \"After a first byte of ED, expecting 2nd byte between 80 and 9F.\";\n                    // *faulty_bytes = 2;\n                    return false;\n                }\n                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n                    // *message = \"After a first byte of ED, expecting 3rd byte between 80 and BF.\";\n                    // *faulty_bytes = 3;\n                    return false;\n                }\n            }\n            else {\n                // *message = \"After a first byte of ED, expecting two following bytes.\";\n                // *faulty_bytes = 1;\n                return false;\n            }\n            i += 3;\n        }\n        else if (u8a[i] >= 0xEE && u8a[i] <= 0xEF) /* EE..EF 80..BF 80..BF */ {\n            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {\n                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {\n                    // *message = \"After a first byte between EE and EF, expecting 2nd byte between 80 and BF.\";\n                    // *faulty_bytes = 2;\n                    return false;\n                }\n                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n                    // *message = \"After a first byte between EE and EF, expecting 3rd byte between 80 and BF.\";\n                    // *faulty_bytes = 3;\n                    return false;\n                }\n            }\n            else {\n                // *message = \"After a first byte between EE and EF, two following bytes.\";\n                // *faulty_bytes = 1;\n                return false;\n            }\n            i += 3;\n        }\n        else if (u8a[i] === 0xF0) /* F0 90..BF 80..BF 80..BF */ {\n            if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {\n                if (u8a[i + 1] < 0x90 || u8a[i + 1] > 0xBF) {\n                    // *message = \"After a first byte of F0, expecting 2nd byte between 90 and BF.\";\n                    // *faulty_bytes = 2;\n                    return false;\n                }\n                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n                    // *message = \"After a first byte of F0, expecting 3rd byte between 80 and BF.\";\n                    // *faulty_bytes = 3;\n                    return false;\n                }\n                if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {\n                    // *message = \"After a first byte of F0, expecting 4th byte between 80 and BF.\";\n                    // *faulty_bytes = 4;\n                    return false;\n                }\n            }\n            else {\n                // *message = \"After a first byte of F0, expecting three following bytes.\";\n                // *faulty_bytes = 1;\n                return false;\n            }\n            i += 4;\n        }\n        else if (u8a[i] >= 0xF1 && u8a[i] <= 0xF3) /* F1..F3 80..BF 80..BF 80..BF */ {\n            if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {\n                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {\n                    // *message = \"After a first byte of F1, F2, or F3, expecting a 2nd byte between 80 and BF.\";\n                    // *faulty_bytes = 2;\n                    return false;\n                }\n                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n                    // *message = \"After a first byte of F1, F2, or F3, expecting a 3rd byte between 80 and BF.\";\n                    // *faulty_bytes = 3;\n                    return false;\n                }\n                if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {\n                    // *message = \"After a first byte of F1, F2, or F3, expecting a 4th byte between 80 and BF.\";\n                    // *faulty_bytes = 4;\n                    return false;\n                }\n            }\n            else {\n                // *message = \"After a first byte of F1, F2, or F3, expecting three following bytes.\";\n                // *faulty_bytes = 1;\n                return false;\n            }\n            i += 4;\n        }\n        else if (u8a[i] === 0xF4) /* F4 80..8F 80..BF 80..BF */ {\n            if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {\n                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x8F) {\n                    // *message = \"After a first byte of F4, expecting 2nd byte between 80 and 8F.\";\n                    // *faulty_bytes = 2;\n                    return false;\n                }\n                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n                    // *message = \"After a first byte of F4, expecting 3rd byte between 80 and BF.\";\n                    // *faulty_bytes = 3;\n                    return false;\n                }\n                if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {\n                    // *message = \"After a first byte of F4, expecting 4th byte between 80 and BF.\";\n                    // *faulty_bytes = 4;\n                    return false;\n                }\n            }\n            else {\n                // *message = \"After a first byte of F4, expecting three following bytes.\";\n                // *faulty_bytes = 1;\n                return false;\n            }\n            i += 4;\n        }\n        else {\n            // *message = \"Expecting bytes in the following ranges: 00..7F C2..F4.\";\n            // *faulty_bytes = 1;\n            return false;\n        }\n    }\n    return true;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2245, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/compact/fromU8a.js"],"sourcesContent":["import { BN } from '../bn/index.js';\nimport { u8aToBn, u8aToU8a } from '../u8a/index.js';\n/**\n * @name compactFromU8a\n * @description Retrives the offset and encoded length from a compact-prefixed value\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactFromU8a } from '@polkadot/util';\n *\n * const [offset, length] = compactFromU8a(new Uint8Array([254, 255, 3, 0]));\n *\n * console.log('value offset=', offset, 'length=', length); // 4, 0xffff\n * ```\n */\nexport function compactFromU8a(input) {\n    const u8a = u8aToU8a(input);\n    // The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster\n    // than doing an additional call to u8aToBn (as with variable length)\n    switch (u8a[0] & 0b11) {\n        case 0b00:\n            return [1, new BN(u8a[0] >>> 2)];\n        case 0b01:\n            return [2, new BN((u8a[0] + (u8a[1] << 8)) >>> 2)];\n        case 0b10:\n            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n            // 32-bit, in the case where the top-most bit is set this yields a negative value\n            return [4, new BN((u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + (u8a[3] * 0x1_00_00_00)) >>> 2)];\n        // 0b11\n        default: {\n            // add 5 to shifted (4 for base length, 1 for this byte)\n            const offset = (u8a[0] >>> 2) + 5;\n            // we unroll the loop\n            switch (offset) {\n                // there still could be 4 bytes data, similar to 0b10 above (with offsets)\n                case 5:\n                    // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n                    // 32-bit, in the case where the top-most bit is set this yields a negative value\n                    return [5, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] * 0x1_00_00_00))];\n                case 6:\n                    return [6, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8)) * 0x1_00_00_00))];\n                // 6 bytes data is the maximum, 48 bits (56 would overflow)\n                case 7:\n                    return [7, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 0x1_00_00_00))];\n                // for anything else, use the non-unrolled version\n                default:\n                    return [offset, u8aToBn(u8a.subarray(1, offset))];\n            }\n        }\n    }\n}\n/**\n * @name compactFromU8aLim\n * @description A limited version of [[compactFromU8a]], accepting only Uint8Array inputs for values <= 48 bits\n */\nexport function compactFromU8aLim(u8a) {\n    // The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster\n    // than doing an additional call to u8aToBn (as with variable length)\n    switch (u8a[0] & 0b11) {\n        case 0b00:\n            return [1, u8a[0] >>> 2];\n        case 0b01:\n            return [2, (u8a[0] + (u8a[1] << 8)) >>> 2];\n        case 0b10:\n            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n            // 32-bit, in the case where the top-most bit is set this yields a negative value\n            return [4, (u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + (u8a[3] * 0x1_00_00_00)) >>> 2];\n        // 0b11\n        default: {\n            // add 5 to shifted (4 for base length, 1 for this byte)\n            // we unroll the loop\n            switch ((u8a[0] >>> 2) + 5) {\n                // there still could be 4 bytes data, similar to 0b10 above (with offsets)\n                case 5:\n                    return [5, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] * 0x1_00_00_00)];\n                case 6:\n                    return [6, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8)) * 0x1_00_00_00)];\n                // 6 bytes data is the maximum, 48 bits (56 would overflow)\n                case 7:\n                    return [7, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 0x1_00_00_00)];\n                // for anything else, we are above the actual MAX_SAFE_INTEGER - bail out\n                default:\n                    throw new Error('Compact input is > Number.MAX_SAFE_INTEGER');\n            }\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2369, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/codec.js"],"sourcesContent":["import { isOnObject } from './helpers.js';\nconst checkCodec = /*#__PURE__*/ isOnObject('toHex', 'toHuman', 'toU8a');\nconst checkRegistry = /*#__PURE__*/ isOnObject('get');\nexport function isCodec(value) {\n    return checkCodec(value) && checkRegistry(value.registry);\n}\n"],"names":[],"mappings":";;;;AAAA;;AACA,MAAM,aAAa,WAAW,GAAG,IAAA,oKAAU,EAAC,SAAS,WAAW;AAChE,MAAM,gBAAgB,WAAW,GAAG,IAAA,oKAAU,EAAC;AACxC,SAAS,QAAQ,KAAK;IACzB,OAAO,WAAW,UAAU,cAAc,MAAM,QAAQ;AAC5D","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2384, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/compact/stripLength.js"],"sourcesContent":["import { compactFromU8a } from './fromU8a.js';\n/**\n * @name compactStripLength\n * @description Removes the length prefix, returning both the total length (including the value + compact encoding) and the decoded value with the correct length\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactStripLength } from '@polkadot/util';\n *\n * console.log(compactStripLength(new Uint8Array([2 << 2, 0xde, 0xad]))); // [2, Uint8Array[0xde, 0xad]]\n * ```\n */\nexport function compactStripLength(input) {\n    const [offset, length] = compactFromU8a(input);\n    const total = offset + length.toNumber();\n    return [\n        total,\n        input.subarray(offset, total)\n    ];\n}\n"],"names":[],"mappings":";;;;AAAA;;AAaO,SAAS,mBAAmB,KAAK;IACpC,MAAM,CAAC,QAAQ,OAAO,GAAG,IAAA,6KAAc,EAAC;IACxC,MAAM,QAAQ,SAAS,OAAO,QAAQ;IACtC,OAAO;QACH;QACA,MAAM,QAAQ,CAAC,QAAQ;KAC1B;AACL","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2402, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/assert.js"],"sourcesContent":["import { isFunction } from './is/function.js';\n/**\n * @name assert\n * @summary Checks for a valid test, if not Error is thrown.\n * @description\n * Checks that `test` is a truthy value. If value is falsy (`null`, `undefined`, `false`, ...), it throws an Error with the supplied `message`. When `test` passes, `true` is returned.\n * @example\n * <BR>\n *\n * ```javascript\n * const { assert } from '@polkadot/util';\n *\n * assert(true, 'True should be true'); // passes\n * assert(false, 'False should not be true'); // Error thrown\n * assert(false, () => 'message'); // Error with 'message'\n * ```\n */\nexport function assert(condition, message) {\n    if (!condition) {\n        throw new Error(isFunction(message)\n            ? message()\n            : message);\n    }\n}\n/**\n * @name assertReturn\n * @description Returns when the value is not undefined/null, otherwise throws assertion error\n */\nexport function assertReturn(value, message) {\n    assert(value !== undefined && value !== null, message);\n    return value;\n}\n/**\n * @name assertUnreachable\n * @description An assertion helper that ensures all codepaths are followed\n */\nexport function assertUnreachable(x) {\n    throw new Error(`This codepath should be unreachable. Unhandled input: ${x}`);\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAiBO,SAAS,OAAO,SAAS,EAAE,OAAO;IACrC,IAAI,CAAC,WAAW;QACZ,MAAM,IAAI,MAAM,IAAA,qKAAU,EAAC,WACrB,YACA;IACV;AACJ;AAKO,SAAS,aAAa,KAAK,EAAE,OAAO;IACvC,OAAO,UAAU,aAAa,UAAU,MAAM;IAC9C,OAAO;AACX;AAKO,SAAS,kBAAkB,CAAC;IAC/B,MAAM,IAAI,MAAM,AAAC,yDAA0D,OAAF;AAC7E","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2428, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/lazy.js"],"sourcesContent":["/**\n * @name lazyMethod\n * @description\n * Creates a lazy, on-demand getter for the specific value. Upon get the value will be evaluated.\n */\nexport function lazyMethod(result, item, creator, getName, index = 0) {\n    const name = getName\n        ? getName(item, index)\n        : item.toString();\n    let value;\n    Object.defineProperty(result, name, {\n        // This allows for re-configuration with the embedded defineProperty below\n        // and ensures that on tested browsers and Node, it _will_ be redefined\n        // and thus short-circuited for future access\n        configurable: true,\n        enumerable: true,\n        // Use a function here, we don't want to capture the outer this, i.e.\n        // don't use arrow functions in this context since we have a this inside\n        get: function () {\n            // This check should _always_ be false and unneeded, since we override\n            // with a value below ... however we ensure we are quire vigilant against\n            // all environment failures, so we are rather be safe than sorry\n            if (value === undefined) {\n                value = creator(item, index, this);\n                try {\n                    // re-define the property as a value, next time around this\n                    // getter will only return the computed value\n                    Object.defineProperty(this, name, { value });\n                }\n                catch {\n                    // ignore any errors, since this _should_ not happen due to\n                    // the \"configurable\" property above. But if it ever does\n                    // from here-on we will be the cached value the next time\n                    // around (with a very slight dip in performance)\n                }\n            }\n            return value;\n        }\n    });\n}\n/**\n * @name lazyMethods\n * @description\n * Creates lazy, on-demand getters for the specific values.\n */\nexport function lazyMethods(result, items, creator, getName) {\n    for (let i = 0, count = items.length; i < count; i++) {\n        lazyMethod(result, items[i], creator, getName, i);\n    }\n    return result;\n}\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;;AACM,SAAS,WAAW,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO;QAAE,QAAA,iEAAQ;IAC/D,MAAM,OAAO,UACP,QAAQ,MAAM,SACd,KAAK,QAAQ;IACnB,IAAI;IACJ,OAAO,cAAc,CAAC,QAAQ,MAAM;QAChC,0EAA0E;QAC1E,uEAAuE;QACvE,6CAA6C;QAC7C,cAAc;QACd,YAAY;QACZ,qEAAqE;QACrE,wEAAwE;QACxE,KAAK;YACD,sEAAsE;YACtE,yEAAyE;YACzE,gEAAgE;YAChE,IAAI,UAAU,WAAW;gBACrB,QAAQ,QAAQ,MAAM,OAAO,IAAI;gBACjC,IAAI;oBACA,2DAA2D;oBAC3D,6CAA6C;oBAC7C,OAAO,cAAc,CAAC,IAAI,EAAE,MAAM;wBAAE;oBAAM;gBAC9C,EACA,UAAM;gBACF,2DAA2D;gBAC3D,yDAAyD;gBACzD,yDAAyD;gBACzD,iDAAiD;gBACrD;YACJ;YACA,OAAO;QACX;IACJ;AACJ;AAMO,SAAS,YAAY,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO;IACvD,IAAK,IAAI,IAAI,GAAG,QAAQ,MAAM,MAAM,EAAE,IAAI,OAAO,IAAK;QAClD,WAAW,QAAQ,KAAK,CAAC,EAAE,EAAE,SAAS,SAAS;IACnD;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2483, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/float/toU8a.js"],"sourcesContent":["/**\n * @name floatToU8a\n * @description Converts a float into a U8a representation (While we don't use BE in SCALE\n * we still allow for either representation, although, as elsewhere, isLe is default)\n */\nexport function floatToU8a(value = 0.0, { bitLength = 32, isLe = true } = {}) {\n    if (bitLength !== 32 && bitLength !== 64) {\n        throw new Error('Invalid bitLength provided, expected 32 or 64');\n    }\n    const result = new Uint8Array(bitLength / 8);\n    const dv = new DataView(result.buffer, result.byteOffset);\n    if (bitLength === 32) {\n        dv.setFloat32(0, Number(value), isLe);\n    }\n    else {\n        dv.setFloat64(0, Number(value), isLe);\n    }\n    return result;\n}\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;AACM,SAAS;QAAW,QAAA,iEAAQ,KAAK,EAAE,YAAY,EAAE,EAAE,OAAO,IAAI,EAAE,GAA/B,iEAAkC,CAAC;IACvE,IAAI,cAAc,MAAM,cAAc,IAAI;QACtC,MAAM,IAAI,MAAM;IACpB;IACA,MAAM,SAAS,IAAI,WAAW,YAAY;IAC1C,MAAM,KAAK,IAAI,SAAS,OAAO,MAAM,EAAE,OAAO,UAAU;IACxD,IAAI,cAAc,IAAI;QAClB,GAAG,UAAU,CAAC,GAAG,OAAO,QAAQ;IACpC,OACK;QACD,GAAG,UAAU,CAAC,GAAG,OAAO,QAAQ;IACpC;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2509, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/u8a/toFloat.js"],"sourcesContent":["/**\n * @name u8aToFloat\n * @description Converts a Uint8Array value into the float (either 32 or 64-bit)\n * representation.\n */\nexport function u8aToFloat(value, { bitLength = 32, isLe = true } = {}) {\n    if (bitLength !== 32 && bitLength !== 64) {\n        throw new Error('Invalid bitLength provided, expected 32 or 64');\n    }\n    else if (value.length < (bitLength / 8)) {\n        throw new Error(`Invalid input buffer provided, expected at least ${bitLength / 8} bytes, found ${value.length}`);\n    }\n    const dv = new DataView(value.buffer, value.byteOffset);\n    return bitLength === 32\n        ? dv.getFloat32(0, isLe)\n        : dv.getFloat64(0, isLe);\n}\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;AACM,SAAS,WAAW,KAAK;QAAE,EAAE,YAAY,EAAE,EAAE,OAAO,IAAI,EAAE,GAA/B,iEAAkC,CAAC;IACjE,IAAI,cAAc,MAAM,cAAc,IAAI;QACtC,MAAM,IAAI,MAAM;IACpB,OACK,IAAI,MAAM,MAAM,GAAI,YAAY,GAAI;QACrC,MAAM,IAAI,MAAM,AAAC,oDAAiF,OAA9B,YAAY,GAAE,kBAA6B,OAAb,MAAM,MAAM;IAClH;IACA,MAAM,KAAK,IAAI,SAAS,MAAM,MAAM,EAAE,MAAM,UAAU;IACtD,OAAO,cAAc,KACf,GAAG,UAAU,CAAC,GAAG,QACjB,GAAG,UAAU,CAAC,GAAG;AAC3B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2531, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/memoize.js"],"sourcesContent":["import { stringify } from './stringify.js';\nfunction defaultGetId() {\n    return 'none';\n}\n/**\n * @name memoize\n * @description Memomize the function with a specific instanceId\n */\nexport function memoize(fn, { getInstanceId = defaultGetId } = {}) {\n    const cache = {};\n    const memoized = (...args) => {\n        const stringParams = stringify(args);\n        const instanceId = getInstanceId();\n        if (!cache[instanceId]) {\n            cache[instanceId] = {};\n        }\n        if (cache[instanceId][stringParams] === undefined) {\n            cache[instanceId][stringParams] = fn(...args);\n        }\n        return cache[instanceId][stringParams];\n    };\n    memoized.unmemoize = (...args) => {\n        const stringParams = stringify(args);\n        const instanceId = getInstanceId();\n        if (cache[instanceId]?.[stringParams] !== undefined) {\n            delete cache[instanceId][stringParams];\n        }\n    };\n    return memoized;\n}\n"],"names":[],"mappings":";;;;AAAA;;AACA,SAAS;IACL,OAAO;AACX;AAKO,SAAS,QAAQ,EAAE;QAAE,EAAE,gBAAgB,YAAY,EAAE,GAAhC,iEAAmC,CAAC;IAC5D,MAAM,QAAQ,CAAC;IACf,MAAM,WAAW;yCAAI;YAAA;;QACjB,MAAM,eAAe,IAAA,+JAAS,EAAC;QAC/B,MAAM,aAAa;QACnB,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;YACpB,KAAK,CAAC,WAAW,GAAG,CAAC;QACzB;QACA,IAAI,KAAK,CAAC,WAAW,CAAC,aAAa,KAAK,WAAW;YAC/C,KAAK,CAAC,WAAW,CAAC,aAAa,GAAG,MAAM;QAC5C;QACA,OAAO,KAAK,CAAC,WAAW,CAAC,aAAa;IAC1C;IACA,SAAS,SAAS,GAAG;yCAAI;YAAA;;YAGjB;QAFJ,MAAM,eAAe,IAAA,+JAAS,EAAC;QAC/B,MAAM,aAAa;QACnB,IAAI,EAAA,oBAAA,KAAK,CAAC,WAAW,cAAjB,wCAAA,iBAAmB,CAAC,aAAa,MAAK,WAAW;YACjD,OAAO,KAAK,CAAC,WAAW,CAAC,aAAa;QAC1C;IACJ;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2574, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/nextTick.js"],"sourcesContent":["/**\n * @name nextTick\n * @description Defer the operation to the queue for evaluation on the next tick\n */\nexport function nextTick(onExec, onError) {\n    // While Promise.resolve().then(...) would defer to the nextTick, this\n    // actually does not play as nicely in browsers like the setTimeout(...)\n    // approach. So the safer, though less optimal approach is the one taken here\n    setTimeout(() => {\n        Promise\n            .resolve()\n            .then(() => {\n            onExec();\n        })\n            .catch((error) => {\n            if (onError) {\n                onError(error);\n            }\n            else {\n                console.error(error);\n            }\n        });\n    }, 0);\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;AACM,SAAS,SAAS,MAAM,EAAE,OAAO;IACpC,sEAAsE;IACtE,wEAAwE;IACxE,6EAA6E;IAC7E,WAAW;QACP,QACK,OAAO,GACP,IAAI,CAAC;YACN;QACJ,GACK,KAAK,CAAC,CAAC;YACR,IAAI,SAAS;gBACT,QAAQ;YACZ,OACK;gBACD,QAAQ,KAAK,CAAC;YAClB;QACJ;IACJ,GAAG;AACP","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2601, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/bi/helpers.js"],"sourcesContent":["/** @internal */\nexport function createCmp(cmp) {\n    return (...items) => {\n        const count = items.length;\n        if (count === 0) {\n            throw new Error('Must provide one or more arguments');\n        }\n        let result = items[0];\n        for (let i = 1; i < count; i++) {\n            if (cmp(items[i], result)) {\n                result = items[i];\n            }\n        }\n        return result;\n    };\n}\n"],"names":[],"mappings":"AAAA,cAAc;;;;AACP,SAAS,UAAU,GAAG;IACzB,OAAO;yCAAI;YAAA;;QACP,MAAM,QAAQ,MAAM,MAAM;QAC1B,IAAI,UAAU,GAAG;YACb,MAAM,IAAI,MAAM;QACpB;QACA,IAAI,SAAS,KAAK,CAAC,EAAE;QACrB,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,IAAK;YAC5B,IAAI,IAAI,KAAK,CAAC,EAAE,EAAE,SAAS;gBACvB,SAAS,KAAK,CAAC,EAAE;YACrB;QACJ;QACA,OAAO;IACX;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2627, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/bn/min.js"],"sourcesContent":["import { createCmp } from '../bi/helpers.js';\n/**\n * @name bnMax\n * @summary Finds and returns the highest value in an array of BNs.\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnMax } from '@polkadot/util';\n *\n * bnMax([new BN(1), new BN(3), new BN(2)]).toString(); // => '3'\n * ```\n */\nexport const bnMax = /*#__PURE__*/ createCmp((a, b) => a.gt(b));\n/**\n * @name bnMin\n * @summary Finds and returns the smallest value in an array of BNs.\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnMin } from '@polkadot/util';\n *\n * bnMin([new BN(1), new BN(3), new BN(2)]).toString(); // => '1'\n * ```\n */\nexport const bnMin = /*#__PURE__*/ createCmp((a, b) => a.lt(b));\n"],"names":[],"mappings":";;;;;;AAAA;;AAcO,MAAM,QAAQ,WAAW,GAAG,IAAA,mKAAS,EAAC,CAAC,GAAG,IAAM,EAAE,EAAE,CAAC;AAcrD,MAAM,QAAQ,WAAW,GAAG,IAAA,mKAAS,EAAC,CAAC,GAAG,IAAM,EAAE,EAAE,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2641, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/is/compact.js"],"sourcesContent":["import { isOnObject } from './helpers.js';\n/**\n * @name isCompact\n * @summary Tests for SCALE-Compact-like object instance.\n */\nexport const isCompact = /*#__PURE__*/ isOnObject('toBigInt', 'toBn', 'toNumber', 'unwrap');\n"],"names":[],"mappings":";;;;AAAA;;AAKO,MAAM,YAAY,WAAW,GAAG,IAAA,oKAAU,EAAC,YAAY,QAAQ,YAAY","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2652, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/array/flatten.js"],"sourcesContent":["/**\n * @name arrayFlatten\n * @summary Merge T[][] into T[]\n * @description\n * Returns a new array with all arrays merged into one\n * @example\n * <BR>\n *\n * ```javascript\n * import { arrayFlatten } from '@polkadot/util';\n *\n * arrayFlatten([[1, 2], [3, 4], [5]]); // [1, 2, 3, 4, 5]\n * ```\n */\nexport function arrayFlatten(arrays) {\n    const num = arrays.length;\n    // shortcuts for the empty & single-entry case\n    if (num === 0) {\n        return [];\n    }\n    else if (num === 1) {\n        return arrays[0];\n    }\n    // pre-allocate based on the combined size\n    let size = 0;\n    for (let i = 0; i < num; i++) {\n        size += arrays[i].length;\n    }\n    const output = new Array(size);\n    let i = -1;\n    for (let j = 0; j < num; j++) {\n        const a = arrays[j];\n        // instead of pushing, we just set the entries\n        for (let e = 0, count = a.length; e < count; e++) {\n            output[++i] = a[e];\n        }\n    }\n    return output;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;CAaC;;;;AACM,SAAS,aAAa,MAAM;IAC/B,MAAM,MAAM,OAAO,MAAM;IACzB,8CAA8C;IAC9C,IAAI,QAAQ,GAAG;QACX,OAAO,EAAE;IACb,OACK,IAAI,QAAQ,GAAG;QAChB,OAAO,MAAM,CAAC,EAAE;IACpB;IACA,0CAA0C;IAC1C,IAAI,OAAO;IACX,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,IAAK;QAC1B,QAAQ,MAAM,CAAC,EAAE,CAAC,MAAM;IAC5B;IACA,MAAM,SAAS,IAAI,MAAM;IACzB,IAAI,IAAI,CAAC;IACT,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,IAAK;QAC1B,MAAM,IAAI,MAAM,CAAC,EAAE;QACnB,8CAA8C;QAC9C,IAAK,IAAI,IAAI,GAAG,QAAQ,EAAE,MAAM,EAAE,IAAI,OAAO,IAAK;YAC9C,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE;QACtB;IACJ;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2697, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/string/toHex.js"],"sourcesContent":["import { u8aToHex } from '../u8a/toHex.js';\nimport { stringToU8a } from './toU8a.js';\n/**\n * @name stringToHex\n * @summary Creates a hex string from a utf-8 string\n * @description\n * String input values return the actual encoded hex value.\n * @example\n * <BR>\n *\n * ```javascript\n * import { stringToHex } from '@polkadot/util';\n *\n * stringToU8a('hello'); // 0x68656c6c6f\n * ```\n */\nexport function stringToHex(value) {\n    return u8aToHex(stringToU8a(value));\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAeO,SAAS,YAAY,KAAK;IAC7B,OAAO,IAAA,iKAAQ,EAAC,IAAA,uKAAW,EAAC;AAChC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2712, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/bn/sqrt.js"],"sourcesContent":["import { BN } from './bn.js';\nimport { BN_MAX_INTEGER, BN_ONE, BN_SQRT_MAX_INTEGER } from './consts.js';\nimport { bnToBn } from './toBn.js';\n/**\n * @name bnSqrt\n * @summary Calculates the integer square root of a BN\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnSqrt } from '@polkadot/util';\n *\n * bnSqrt(new BN(16)).toString(); // => '4'\n * ```\n */\nexport function bnSqrt(value) {\n    const n = bnToBn(value);\n    if (n.isNeg()) {\n        throw new Error('square root of negative numbers is not supported');\n    }\n    // https://stackoverflow.com/questions/53683995/javascript-big-integer-square-root/\n    // shortcut <= 2^53 - 1 to use the JS utils\n    if (n.lte(BN_MAX_INTEGER)) {\n        // ~~ More performant version of Math.floor\n        return new BN(~~Math.sqrt(n.toNumber()));\n    }\n    // Use sqrt(MAX_SAFE_INTEGER) as starting point. since we already know the\n    // output will be larger than this, we expect this to be a safe start\n    let x0 = BN_SQRT_MAX_INTEGER.clone();\n    while (true) {\n        const x1 = n.div(x0).iadd(x0).ishrn(1);\n        if (x0.eq(x1) || x0.eq(x1.sub(BN_ONE))) {\n            return x0;\n        }\n        x0 = x1;\n    }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAcO,SAAS,OAAO,KAAK;IACxB,MAAM,IAAI,IAAA,6JAAM,EAAC;IACjB,IAAI,EAAE,KAAK,IAAI;QACX,MAAM,IAAI,MAAM;IACpB;IACA,mFAAmF;IACnF,2CAA2C;IAC3C,IAAI,EAAE,GAAG,CAAC,uKAAc,GAAG;QACvB,2CAA2C;QAC3C,OAAO,IAAI,+KAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,EAAE,QAAQ;IACxC;IACA,0EAA0E;IAC1E,qEAAqE;IACrE,IAAI,KAAK,4KAAmB,CAAC,KAAK;IAClC,MAAO,KAAM;QACT,MAAM,KAAK,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC;QACpC,IAAI,GAAG,EAAE,CAAC,OAAO,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,+JAAM,IAAI;YACpC,OAAO;QACX;QACA,KAAK;IACT;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2748, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/array/chunk.js"],"sourcesContent":["/**\n * @name arrayChunk\n * @summary Split T[] into T[][] based on the defind size\n * @description\n * Returns a set ao arrays based on the chunksize\n * @example\n * <BR>\n *\n * ```javascript\n * import { arrayChunk } from '@polkadot/util';\n *\n * arrayChunk([1, 2, 3, 4, 5]); // [[1, 2], [3, 4], [5]]\n * ```\n */\nexport function arrayChunk(array, chunkSize) {\n    const outputSize = Math.ceil(array.length / chunkSize);\n    // shortcut for the single-split case\n    if (outputSize === 1) {\n        return [array];\n    }\n    const output = Array(outputSize);\n    for (let i = 0; i < outputSize; i++) {\n        const offset = i * chunkSize;\n        output[i] = array.slice(offset, offset + chunkSize);\n    }\n    return output;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;CAaC;;;;AACM,SAAS,WAAW,KAAK,EAAE,SAAS;IACvC,MAAM,aAAa,KAAK,IAAI,CAAC,MAAM,MAAM,GAAG;IAC5C,qCAAqC;IACrC,IAAI,eAAe,GAAG;QAClB,OAAO;YAAC;SAAM;IAClB;IACA,MAAM,SAAS,MAAM;IACrB,IAAK,IAAI,IAAI,GAAG,IAAI,YAAY,IAAK;QACjC,MAAM,SAAS,IAAI;QACnB,MAAM,CAAC,EAAE,GAAG,MAAM,KAAK,CAAC,QAAQ,SAAS;IAC7C;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2784, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/string/lowerFirst.js"],"sourcesContent":["import { CC_TO_LO, CC_TO_UP } from './camelCase.js';\n/** @internal */\nfunction converter(map) {\n    return (value) => value\n        ? map[value.charCodeAt(0)] + value.slice(1)\n        : '';\n}\n/**\n * @name stringLowerFirst\n * @summary Lowercase the first letter of a string\n * @description\n * Lowercase the first letter of a string\n * @example\n * <BR>\n *\n * ```javascript\n * import { stringLowerFirst } from '@polkadot/util';\n *\n * stringLowerFirst('ABC'); // => 'aBC'\n * ```\n */\nexport const stringLowerFirst = /*#__PURE__*/ converter(CC_TO_LO);\n/**\n * @name stringUpperFirst\n * @summary Uppercase the first letter of a string\n * @description\n * Lowercase the first letter of a string\n * @example\n * <BR>\n *\n * ```javascript\n * import { stringUpperFirst } from '@polkadot/util';\n *\n * stringUpperFirst('abc'); // => 'Abc'\n * ```\n */\nexport const stringUpperFirst = /*#__PURE__*/ converter(CC_TO_UP);\n"],"names":[],"mappings":";;;;;;AAAA;;AACA,cAAc,GACd,SAAS,UAAU,GAAG;IAClB,OAAO,CAAC,QAAU,QACZ,GAAG,CAAC,MAAM,UAAU,CAAC,GAAG,GAAG,MAAM,KAAK,CAAC,KACvC;AACV;AAeO,MAAM,mBAAmB,WAAW,GAAG,UAAU,wKAAQ;AAezD,MAAM,mBAAmB,WAAW,GAAG,UAAU,wKAAQ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2801, "column": 0}, "map": {"version":3,"sources":["file:///Users/mark/SplitWiseX/frontend/node_modules/%40polkadot/util/object/clear.js"],"sourcesContent":["/**\n * @name objectClear\n * @summary Removes all the keys from the input object\n */\nexport function objectClear(value) {\n    const keys = Object.keys(value);\n    for (let i = 0, count = keys.length; i < count; i++) {\n        delete value[keys[i]];\n    }\n    return value;\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;AACM,SAAS,YAAY,KAAK;IAC7B,MAAM,OAAO,OAAO,IAAI,CAAC;IACzB,IAAK,IAAI,IAAI,GAAG,QAAQ,KAAK,MAAM,EAAE,IAAI,OAAO,IAAK;QACjD,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;IACzB;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}}]
}