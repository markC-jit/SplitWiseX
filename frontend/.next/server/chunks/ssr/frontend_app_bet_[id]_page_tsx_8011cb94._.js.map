{"version":3,"sources":["turbopack:///[project]/frontend/app/bet/[id]/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useMemo, useState } from 'react';\nimport { useParams } from 'next/navigation';\nimport Header from '../../prediction/Header';\n\ninterface PredictionMarket {\n  id: string;\n  title: string;\n  description: string;\n  endDate: string;\n  yesOdds: number;\n  noOdds: number;\n  totalVolume: number;\n  category: string;\n  status: 'active' | 'resolved' | 'pending';\n}\n\ninterface HistoricalDataPoint {\n  date: string;\n  yesOdds: number;\n  noOdds: number;\n  volume: number;\n}\n\nexport default function BetDetailsPage() {\n  const params = useParams<{ id: string }>();\n  const marketId = params?.id as string;\n\n  // Wallet state\n  const [userBalance, setUserBalance] = useState<number>(0);\n  const [userName, setUserName] = useState<string>('Guest User');\n  const [walletAddress, setWalletAddress] = useState<string>('');\n  const [walletType, setWalletType] = useState<'metamask' | 'subwallet' | null>(null);\n\n  const handleWalletConnected = (walletType: 'metamask' | 'subwallet', address: string, balance: string) => {\n    setWalletType(walletType);\n    setWalletAddress(address);\n    setUserBalance(parseFloat(balance));\n    setUserName(walletType === 'metamask' ? ' Wallet' : 'DOT Wallet');\n  };\n\n  const handleWalletDisconnect = () => {\n    setWalletType(null);\n    setWalletAddress('');\n    setUserBalance(0);\n    setUserName('Guest User');\n  };\n\n  // TEMP: local stub data matching markets on prediction page\n  const markets: PredictionMarket[] = [\n    // Ethereum Markets\n    {\n      id: '1',\n      title: 'Bitcoin will reach $100k by end of 2024',\n      description: 'Will Bitcoin price reach $100,000 USD by December 31, 2024?',\n      endDate: '2024-12-31',\n      yesOdds: 67,\n      noOdds: 33,\n      totalVolume: 1250,\n      category: 'Crypto',\n      status: 'active'\n    },\n    {\n      id: '2',\n      title: 'Tesla stock will hit $300 by Q2 2024',\n      description: 'Will Tesla stock price reach $300 by June 30, 2024?',\n      endDate: '2024-06-30',\n      yesOdds: 45,\n      noOdds: 55,\n      totalVolume: 890,\n      category: 'Stocks',\n      status: 'active'\n    },\n    {\n      id: '3',\n      title: 'AI will pass Turing test by 2025',\n      description: 'Will an AI system pass the Turing test by December 31, 2025?',\n      endDate: '2025-12-31',\n      yesOdds: 78,\n      noOdds: 22,\n      totalVolume: 2100,\n      category: 'Technology',\n      status: 'active'\n    },\n    // Polkadot Markets\n    {\n      id: '4',\n      title: 'DOT will reach $50 by end of 2024',\n      description: 'Will Polkadot (DOT) token price reach $50 USD by December 31, 2024?',\n      endDate: '2024-12-31',\n      yesOdds: 55,\n      noOdds: 45,\n      totalVolume: 680,\n      category: 'Crypto',\n      status: 'active'\n    },\n    {\n      id: '5',\n      title: 'Polkadot will have 100+ parachains by 2025',\n      description: 'Will the Polkadot network have 100 or more active parachains by the end of 2025?',\n      endDate: '2025-12-31',\n      yesOdds: 72,\n      noOdds: 28,\n      totalVolume: 920,\n      category: 'Technology',\n      status: 'active'\n    },\n    {\n      id: '6',\n      title: 'Kusama will process 10M transactions in Q3 2024',\n      description: 'Will the Kusama network process 10 million or more transactions in Q3 2024?',\n      endDate: '2024-09-30',\n      yesOdds: 63,\n      noOdds: 37,\n      totalVolume: 540,\n      category: 'Technology',\n      status: 'active'\n    }\n  ];\n\n  const market = useMemo(\n    () => markets.find((m) => m.id === marketId) || null,\n    [marketId]\n  );\n\n  // TEMP: Generate historical data based on market ID\n  const historicalData = useMemo(() => {\n    if (!market) return [];\n    \n    const data: HistoricalDataPoint[] = [];\n    const days = 30;\n    const now = new Date();\n    \n    // Simple seeded random function for deterministic data\n    const seededRandom = (seed: number) => {\n      const x = Math.sin(seed) * 10000;\n      return x - Math.floor(x);\n    };\n    \n    // Generate realistic historical trend\n    for (let i = days; i >= 0; i--) {\n      const date = new Date(now);\n      date.setDate(date.getDate() - i);\n      \n      // Create a trend that leads to current odds\n      const progress = (days - i) / days;\n      const startYes = market.id === '1' ? 50 : market.id === '2' ? 40 : 60;\n      \n      // Use seeded random based on market ID and day for consistency\n      const randomSeed = parseInt(market.id) * 1000 + i;\n      const randomVariation = (seededRandom(randomSeed) - 0.5) * 5;\n      const yesOdds = Math.round(startYes + (market.yesOdds - startYes) * progress + randomVariation);\n      const clampedYes = Math.max(10, Math.min(90, yesOdds));\n      \n      // Use seeded random for volume variation\n      const volumeSeed = parseInt(market.id) * 2000 + i;\n      const volumeVariation = seededRandom(volumeSeed) * 100;\n      \n      data.push({\n        date: date.toISOString().split('T')[0],\n        yesOdds: clampedYes,\n        noOdds: 100 - clampedYes,\n        volume: Math.round(market.totalVolume * progress + volumeVariation)\n      });\n    }\n    \n    return data;\n  }, [market]);\n\n  const [betChoice, setBetChoice] = useState<'yes' | 'no' | null>(null);\n  const [betAmount, setBetAmount] = useState<string>('');\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-sky-50 to-blue-100\">\n      <Header \n        \n        \n        \n        \n        \n        \n      />\n      <div className=\"p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          {!market ? (\n            <div className=\"bg-white/90 backdrop-blur-sm rounded-3xl shadow-2xl p-8 border border-sky-200\">\n              <h2 className=\"text-2xl font-bold text-gray-800\">Market not found</h2>\n              <p className=\"text-gray-600 text-sm mt-2\">No market exists with id: {marketId}</p>\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              {/* Header Section */}\n              <div className=\"bg-white/80 backdrop-blur-sm rounded-3xl shadow-2xl p-8 border border-white/50\">\n                <h1 className=\"text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent mb-3\">{market.title}</h1>\n                <p className=\"text-gray-600 text-lg mb-6\">{market.description}</p>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"bg-gradient-to-br from-blue-50 to-sky-100 rounded-2xl p-6 text-center border-2 border-sky-300 shadow-lg\">\n                    <div className=\"text-4xl font-bold text-green-600 mb-1\">{market.yesOdds}%</div>\n                    <div className=\"text-sm font-semibold text-green-700\">YES Odds</div>\n                    <div className=\"text-xs text-green-600 mt-1 font-medium\">+{((100/market.yesOdds) - 1).toFixed(1)}x return</div>\n                  </div>\n                  <div className=\"bg-gradient-to-br from-red-50 to-rose-100 rounded-2xl p-6 text-center border-2 border-red-300 shadow-lg\">\n                    <div className=\"text-4xl font-bold text-red-600 mb-1\">{market.noOdds}%</div>\n                    <div className=\"text-sm font-semibold text-red-700\">NO Odds</div>\n                    <div className=\"text-xs text-red-600 mt-1 font-medium\">+{((100/market.noOdds) - 1).toFixed(1)}x return</div>\n                  </div>\n                </div>\n                <div className=\"mt-6 flex justify-between items-center text-sm bg-gradient-to-r from-gray-50 to-blue-50 rounded-xl p-4 border border-gray-200\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-lg\">ðŸ“…</span>\n                    <span className=\"text-gray-700 font-medium\">Ends: {market.endDate}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-lg\"></span>\n                    <span className=\"text-gray-900 font-bold\">{market.totalVolume} </span>\n                  </div>\n                </div>\n              </div>\n\n                             {/* Main Content: Market Info (Left) + Place Bet (Right) */}\n               <div className=\"grid lg:grid-cols-3 gap-6\">\n                 {/* Market Information Section - Left (2 columns) */}\n                 <div className=\"lg:col-span-2 bg-white/80 backdrop-blur-sm rounded-3xl shadow-2xl p-8 border border-white/50\">\n                   <h3 className=\"text-2xl font-bold bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent mb-6\">Market Information</h3>\n                  \n                  {/* Volume Trend Graph */}\n                  <div className=\"bg-gradient-to-br from-blue-50 to-sky-50 rounded-2xl p-6 border-2 border-blue-200 shadow-lg mb-6\">\n                    <div className=\"flex items-center gap-2 mb-6\">\n                      <span className=\"text-3xl\">ðŸ“Š</span>\n                      <h4 className=\"text-lg font-bold text-gray-800\">Volume Trend (1 Month)</h4>\n                    </div>\n                    \n                    <div className=\"relative h-48\">\n                      {/* Y-axis labels */}\n                      <div className=\"absolute left-0 top-0 bottom-0 w-16 flex flex-col justify-between text-xs text-gray-500\">\n                        <span>${Math.round(market.totalVolume * 1.2)}K</span>\n                        <span>${Math.round(market.totalVolume * 0.9)}K</span>\n                        <span>${Math.round(market.totalVolume * 0.6)}K</span>\n                        <span>${Math.round(market.totalVolume * 0.3)}K</span>\n                        <span>$0K</span>\n                      </div>\n                      \n                      {/* Chart area */}\n                      <div \n                        className=\"ml-20 h-full relative\"\n                        onMouseMove={(e) => {\n                          const rect = e.currentTarget.getBoundingClientRect();\n                          const x = ((e.clientX - rect.left) / rect.width) * 100;\n                          const closestIndex = Math.round((x / 100) * (historicalData.length - 1));\n                          const clampedIndex = Math.max(0, Math.min(historicalData.length - 1, closestIndex));\n                          setHoveredPoint(clampedIndex);\n                        }}\n                        onMouseLeave={() => setHoveredPoint(null)}\n                      >\n                        {/* Grid lines */}\n                        <svg className=\"absolute inset-0 w-full h-full pointer-events-none\" preserveAspectRatio=\"none\">\n                          {[0, 25, 50, 75, 100].map((val) => (\n                            <line\n                              key={val}\n                              x1=\"0\"\n                              y1={`${100 - val}%`}\n                              x2=\"100%\"\n                              y2={`${100 - val}%`}\n                              stroke=\"#e5e7eb\"\n                              strokeWidth=\"1\"\n                              strokeDasharray=\"4,4\"\n                            />\n                          ))}\n                        </svg>\n\n                        {/* Light blue area fill under the line */}\n                        <svg className=\"absolute inset-0 w-full h-full pointer-events-none\">\n                          {/* Area fill */}\n                          <path\n                            fill=\"#93c5fd\"\n                            fillOpacity=\"0.3\"\n                            d={`M 0,${192} ${historicalData.map((d, i) => {\n                              const x = (i / (historicalData.length - 1)) * 100;\n                              const maxVolume = market.totalVolume * 1.2;\n                              const y = ((1 - d.volume / maxVolume) * 192);\n                              return `L ${x}%,${y}`;\n                            }).join(' ')} L 100%,${192} Z`}\n                          />\n                          \n                          {/* Line stroke - using individual line segments */}\n                          {historicalData.map((d, i) => {\n                            if (i === 0) return null;\n                            const x1 = ((i - 1) / (historicalData.length - 1)) * 100;\n                            const x2 = (i / (historicalData.length - 1)) * 100;\n                            const maxVolume = market.totalVolume * 1.2;\n                            const y1 = ((1 - historicalData[i - 1].volume / maxVolume) * 192);\n                            const y2 = ((1 - d.volume / maxVolume) * 192);\n                            return (\n                              <line\n                                key={i}\n                                x1={`${x1}%`}\n                                y1={y1}\n                                x2={`${x2}%`}\n                                y2={y2}\n                                stroke=\"#3b82f6\"\n                                strokeWidth=\"3\"\n                                strokeLinecap=\"round\"\n                              />\n                            );\n                          })}\n                        </svg>\n\n                        {/* Hover indicator line */}\n                        {hoveredPoint !== null && (\n                          <div\n                            className=\"absolute top-0 bottom-0 w-px bg-gray-400 pointer-events-none\"\n                            style={{\n                              left: `${(hoveredPoint / (historicalData.length - 1)) * 100}%`\n                            }}\n                          />\n                        )}\n\n                        {/* Hover point dot */}\n                        {hoveredPoint !== null && (\n                          <div\n                            className=\"absolute w-3 h-3 -ml-1.5 -mt-1.5 pointer-events-none z-20\"\n                            style={{\n                              left: `${(hoveredPoint / (historicalData.length - 1)) * 100}%`,\n                              top: `${(1 - historicalData[hoveredPoint].volume / (market.totalVolume * 1.2)) * 100}%`\n                            }}\n                          >\n                            <div className=\"w-full h-full rounded-full bg-pink-500 shadow-lg shadow-pink-500/50 animate-pulse\" />\n                          </div>\n                        )}\n\n                        {/* Tooltip on hover */}\n                        {hoveredPoint !== null && (\n                          <div\n                            className=\"absolute bg-gray-900 text-white px-4 py-2 rounded-lg shadow-xl text-sm font-semibold pointer-events-none z-30\"\n                            style={{\n                              left: `${(hoveredPoint / (historicalData.length - 1)) * 100}%`,\n                              top: `${(1 - historicalData[hoveredPoint].volume / (market.totalVolume * 1.2)) * 100}%`,\n                              transform: 'translate(-50%, -120%)'\n                            }}\n                          >\n                            <div className=\"text-xs text-gray-300 mb-1\">{historicalData[hoveredPoint].date}</div>\n                            <div className=\"text-lg\">${historicalData[hoveredPoint].volume} </div>\n                            <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-full\">\n                              <div className=\"w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900\"></div>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    \n                    {/* X-axis labels */}\n                    <div className=\"ml-20 mt-2 flex justify-between text-xs text-gray-500\">\n                      <span>1</span>\n                      <span>5</span>\n                      <span>10</span>\n                      <span>15</span>\n                      <span>20</span>\n                      <span>25</span>\n                      <span>30</span>\n                    </div>\n                  </div>\n\n                  {/* Market Stats Grid */}\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div className=\"bg-gradient-to-br from-blue-50 to-sky-100 rounded-2xl p-5 border-2 border-sky-300 shadow-lg hover:shadow-xl transition-all duration-300\">\n                      <div className=\"text-xs font-semibold text-blue-700 mb-2\">Total Volume</div>\n                      <div className=\"text-2xl font-bold text-gray-900\">${market.totalVolume}K</div>\n                      <div className=\"text-xs text-green-600 mt-2 font-medium\">â†— +{Math.round(market.totalVolume * 0.15)}K this week</div>\n                    </div>\n                    <div className=\"bg-gradient-to-br from-sky-50 to-blue-100 rounded-2xl p-5 border-2 border-sky-300 shadow-lg hover:shadow-xl transition-all duration-300\">\n                      <div className=\"text-xs font-semibold text-purple-700 mb-2\">Total Bets</div>\n                      <div className=\"text-2xl font-bold text-gray-900\">{Math.round(market.totalVolume * 4.2)}</div>\n                      <div className=\"text-xs text-blue-600 mt-2 font-medium\">â†— +{Math.round(market.totalVolume * 0.3)} today</div>\n                    </div>\n                    <div className=\"bg-gradient-to-br from-green-50 to-emerald-100 rounded-2xl p-5 border-2 border-green-300 shadow-lg hover:shadow-xl transition-all duration-300\">\n                      <div className=\"text-xs font-semibold text-green-700 mb-2\">Participants</div>\n                      <div className=\"text-2xl font-bold text-gray-900\">{Math.round(market.totalVolume * 0.8)}</div>\n                      <div className=\"text-xs text-purple-600 mt-2 font-medium\">â†— +{Math.round(market.totalVolume * 0.05)} active</div>\n                    </div>\n                  </div>\n                </div>\n\n                                 {/* Place Your Bet Section - Right (1 column) */}\n                 <div className=\"lg:col-span-1 bg-white/80 backdrop-blur-sm rounded-3xl shadow-2xl p-8 border border-white/50 sticky top-6\">\n                  <h2 className=\"text-2xl font-bold bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent mb-6\">Place Your Bet</h2>\n                  <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                    <button\n                      onClick={() => setBetChoice('yes')}\n                      className={`p-5 rounded-2xl border-2 transition-all duration-300 ${\n                        betChoice === 'yes'\n                          ? 'border-green-500 bg-gradient-to-br from-green-50 to-emerald-100 shadow-lg shadow-green-500/30 scale-105'\n                          : 'border-gray-200 hover:border-green-300 hover:bg-green-50/50'\n                      }`}\n                    >\n                      <div className=\"text-center\">\n                        <div className=\"text-3xl mb-2\">ðŸ“ˆ</div>\n                        <div className=\"font-bold text-green-600 text-lg\">YES</div>\n                        <div className=\"text-xs text-gray-600 mt-1\">Bet on success</div>\n                      </div>\n                    </button>\n                    <button\n                      onClick={() => setBetChoice('no')}\n                      className={`p-5 rounded-2xl border-2 transition-all duration-300 ${\n                        betChoice === 'no'\n                          ? 'border-red-500 bg-gradient-to-br from-red-50 to-rose-100 shadow-lg shadow-red-500/30 scale-105'\n                          : 'border-gray-200 hover:border-red-300 hover:bg-red-50/50'\n                      }`}\n                    >\n                      <div className=\"text-center\">\n                        <div className=\"text-3xl mb-2\">ðŸ“‰</div>\n                        <div className=\"font-bold text-red-600 text-lg\">NO</div>\n                        <div className=\"text-xs text-gray-600 mt-1\">Bet against</div>\n                      </div>\n                    </button>\n                  </div>\n                                  {betChoice && (\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Bet Amount (DOT)</label>\n                      <input\n                        type=\"number\"\n                        value={betAmount}\n                        onChange={(e) => setBetAmount(e.target.value)}\n                        placeholder=\"0.1\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sky-500 focus:border-transparent text-black font-semibold text-lg\"\n                      />\n                    {betAmount && parseFloat(betAmount) > 0 && (\n                      <div className=\"mt-4 p-4 bg-gradient-to-r from-blue-50 to-sky-50 rounded-lg border border-blue-200\">\n                        <h4 className=\"text-sm font-semibold text-gray-700 mb-3\">Your Potential Returns</h4>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-600\">Your Bet:</span>\n                            <span className=\"font-semibold text-gray-800\">{parseFloat(betAmount).toFixed(4)} </span>\n                          </div>\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-600\">Potential Payout:</span>\n                            <span className=\"font-semibold text-green-600\">\n                              {(parseFloat(betAmount) * (100 / (betChoice === 'yes' ? market.yesOdds : market.noOdds))).toFixed(4)} \n                            </span>\n                          </div>\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-600\">Potential Profit:</span>\n                            <span className=\"font-semibold text-blue-600\">\n                              +{((parseFloat(betAmount) * (100 / (betChoice === 'yes' ? market.yesOdds : market.noOdds))) - parseFloat(betAmount)).toFixed(4)} \n                            </span>\n                          </div>\n                        </div>\n                        \n                        {/* Visual Payout Graph */}\n                        <div className=\"mt-4\">\n                          <div className=\"text-xs text-gray-500 mb-2\">Risk vs Reward</div>\n                          <div className=\"relative h-8 bg-gray-200 rounded-lg overflow-hidden\">\n                            <div \n                              className=\"absolute left-0 top-0 h-full bg-gradient-to-r from-orange-400 to-orange-500 flex items-center justify-start pl-2\"\n                              style={{ \n                                width: `${(parseFloat(betAmount) / (parseFloat(betAmount) * (100 / (betChoice === 'yes' ? market.yesOdds : market.noOdds)))) * 100}%` \n                              }}\n                            >\n                              <span className=\"text-xs text-white font-semibold\">Risk</span>\n                            </div>\n                            <div \n                              className=\"absolute right-0 top-0 h-full bg-gradient-to-r from-green-400 to-green-500 flex items-center justify-end pr-2\"\n                              style={{ \n                                width: `${((parseFloat(betAmount) * (100 / (betChoice === 'yes' ? market.yesOdds : market.noOdds)) - parseFloat(betAmount)) / (parseFloat(betAmount) * (100 / (betChoice === 'yes' ? market.yesOdds : market.noOdds)))) * 100}%` \n                              }}\n                            >\n                              <span className=\"text-xs text-white font-semibold\">Reward</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n                {betChoice && betAmount && (\n                  <button className=\"mt-6 w-full bg-gradient-to-r from-blue-500 to-sky-500 text-white py-5 px-6 rounded-2xl font-bold text-lg hover:from-blue-600 hover:to-sky-600 transition-all duration-300 shadow-xl hover:shadow-2xl hover:shadow-sky-500/50 hover:scale-105\">\n                    Place Bet ({betChoice.toUpperCase()}) - {betAmount} \n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":"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"}