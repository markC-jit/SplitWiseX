'use client';

import { useState, useEffect } from 'react';

interface PredictionMarket {
  id: string;
  title: string;
  description: string;
  endDate: string;
  yesOdds: number;
  noOdds: number;
  totalVolume: number;
  category: string;
  status: 'active' | 'resolved' | 'pending';
}

interface Bet {
  id: string;
  marketId: string;
  choice: 'yes' | 'no';
  amount: number;
  timestamp: string;
  potentialPayout: number;
}

export default function PredictionPage() {
  const [selectedMarket, setSelectedMarket] = useState<PredictionMarket | null>(null);
  const [betChoice, setBetChoice] = useState<'yes' | 'no' | null>(null);
  const [betAmount, setBetAmount] = useState<string>('');
  const [userBets, setUserBets] = useState<Bet[]>([]);
  const [activeTab, setActiveTab] = useState<'markets' | 'portfolio' | 'create'>('markets');

  // Sample prediction markets data
  const markets: PredictionMarket[] = [
    {
      id: '1',
      title: 'Bitcoin will reach $100k by end of 2024',
      description: 'Will Bitcoin price reach $100,000 USD by December 31, 2024?',
      endDate: '2024-12-31',
      yesOdds: 67,
      noOdds: 33,
      totalVolume: 1250,
      category: 'Crypto',
      status: 'active'
    },
    {
      id: '2',
      title: 'Tesla stock will hit $300 by Q2 2024',
      description: 'Will Tesla stock price reach $300 by June 30, 2024?',
      endDate: '2024-06-30',
      yesOdds: 45,
      noOdds: 55,
      totalVolume: 890,
      category: 'Stocks',
      status: 'active'
    },
    {
      id: '3',
      title: 'AI will pass Turing test by 2025',
      description: 'Will an AI system pass the Turing test by December 31, 2025?',
      endDate: '2025-12-31',
      yesOdds: 78,
      noOdds: 22,
      totalVolume: 2100,
      category: 'Technology',
      status: 'active'
    }
  ];

  const handlePlaceBet = () => {
    if (!selectedMarket || !betChoice || !betAmount) return;
    
    const newBet: Bet = {
      id: Date.now().toString(),
      marketId: selectedMarket.id,
      choice: betChoice,
      amount: parseFloat(betAmount),
      timestamp: new Date().toISOString(),
      potentialPayout: betChoice === 'yes' 
        ? parseFloat(betAmount) * (100 / selectedMarket.yesOdds)
        : parseFloat(betAmount) * (100 / selectedMarket.noOdds)
    };
    
    setUserBets([...userBets, newBet]);
    setBetAmount('');
    setBetChoice(null);
  };

  const getCategoryColor = (category: string) => {
    const colors: { [key: string]: string } = {
      'Crypto': 'bg-orange-100 text-orange-800',
      'Stocks': 'bg-green-100 text-green-800',
      'Technology': 'bg-blue-100 text-blue-800',
      'Sports': 'bg-purple-100 text-purple-800',
      'Politics': 'bg-red-100 text-red-800'
    };
    return colors[category] || 'bg-gray-100 text-gray-800';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-6xl font-bold text-gray-800 mb-4">📊</h1>
          <p className="text-xl text-gray-600">Prediction Market</p>
        </div>

        {/* Navigation Tabs */}
        <div className="bg-white rounded-2xl shadow-xl p-6 mb-8">
          <div className="flex space-x-1 bg-gray-100 p-1 rounded-lg">
            {[
              { id: 'markets', label: 'Markets', icon: '🏪' },
              { id: 'portfolio', label: 'Portfolio', icon: '💼' },
              { id: 'create', label: 'Create Market', icon: '➕' }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id as any)}
                className={`flex-1 py-3 px-4 rounded-md font-medium transition-all ${
                  activeTab === tab.id
                    ? 'bg-white text-blue-600 shadow-sm'
                    : 'text-gray-600 hover:text-gray-800'
                }`}
              >
                <span className="mr-2">{tab.icon}</span>
                {tab.label}
              </button>
            ))}
          </div>
        </div>

        {/* Markets Tab */}
        {activeTab === 'markets' && (
          <div className="grid lg:grid-cols-2 gap-8">
            {/* Markets List */}
            <div className="bg-white rounded-2xl shadow-xl p-6">
              <h2 className="text-2xl font-semibold text-gray-800 mb-6">Active Markets</h2>
              <div className="space-y-4">
                {markets.map((market) => (
                  <div
                    key={market.id}
                    onClick={() => setSelectedMarket(market)}
                    className={`p-4 rounded-xl border-2 cursor-pointer transition-all hover:shadow-md ${
                      selectedMarket?.id === market.id
                        ? 'border-blue-500 bg-blue-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <div className="flex justify-between items-start mb-2">
                      <h3 className="font-semibold text-gray-800 text-lg">{market.title}</h3>
                      <span className={`px-3 py-1 rounded-full text-xs font-medium ${getCategoryColor(market.category)}`}>
                        {market.category}
                      </span>
                    </div>
                    <p className="text-gray-600 text-sm mb-3">{market.description}</p>
                    <div className="flex justify-between items-center text-sm">
                      <span className="text-gray-500">Ends: {market.endDate}</span>
                      <span className="text-gray-500">Volume: {market.totalVolume} ETH</span>
                    </div>
                    <div className="flex justify-between mt-3">
                      <div className="text-center">
                        <div className="text-green-600 font-bold">{market.yesOdds}%</div>
                        <div className="text-xs text-gray-500">YES</div>
                      </div>
                      <div className="text-center">
                        <div className="text-red-600 font-bold">{market.noOdds}%</div>
                        <div className="text-xs text-gray-500">NO</div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Market Details & Betting */}
            {selectedMarket && (
              <div className="bg-white rounded-2xl shadow-xl p-6">
                <h2 className="text-2xl font-semibold text-gray-800 mb-6">Market Details</h2>
                
                <div className="mb-6">
                  <h3 className="font-semibold text-lg mb-2">{selectedMarket.title}</h3>
                  <p className="text-gray-600 mb-4">{selectedMarket.description}</p>
                  
                  <div className="grid grid-cols-2 gap-4 mb-6">
                    <div className="bg-green-50 rounded-lg p-4 text-center">
                      <div className="text-2xl font-bold text-green-600">{selectedMarket.yesOdds}%</div>
                      <div className="text-sm text-gray-600">YES Odds</div>
                      <div className="text-xs text-gray-500">+{((100/selectedMarket.yesOdds) - 1).toFixed(1)}x</div>
                    </div>
                    <div className="bg-red-50 rounded-lg p-4 text-center">
                      <div className="text-2xl font-bold text-red-600">{selectedMarket.noOdds}%</div>
                      <div className="text-sm text-gray-600">NO Odds</div>
                      <div className="text-xs text-gray-500">+{((100/selectedMarket.noOdds) - 1).toFixed(1)}x</div>
                    </div>
                  </div>
                </div>

                {/* Betting Interface */}
                <div className="space-y-4">
                  <h4 className="font-semibold text-gray-800">Place Your Bet</h4>
                  
                  <div className="grid grid-cols-2 gap-4">
                    <button
                      onClick={() => setBetChoice('yes')}
                      className={`p-4 rounded-xl border-2 transition-all ${
                        betChoice === 'yes'
                          ? 'border-green-500 bg-green-50'
                          : 'border-gray-200 hover:border-green-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-2xl mb-2">📈</div>
                        <div className="font-semibold text-green-600">YES</div>
                        <div className="text-xs text-gray-600">Price will go up</div>
                      </div>
                    </button>

                    <button
                      onClick={() => setBetChoice('no')}
                      className={`p-4 rounded-xl border-2 transition-all ${
                        betChoice === 'no'
                          ? 'border-red-500 bg-red-50'
                          : 'border-gray-200 hover:border-red-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-2xl mb-2">📉</div>
                        <div className="font-semibold text-red-600">NO</div>
                        <div className="text-xs text-gray-600">Price will go down</div>
                      </div>
                    </button>
                  </div>

                  {betChoice && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Bet Amount (ETH)
                      </label>
                      <input
                        type="number"
                        value={betAmount}
                        onChange={(e) => setBetAmount(e.target.value)}
                        placeholder="0.1"
                        step="0.01"
                        min="0"
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                      {betAmount && (
                        <div className="mt-2 text-sm text-gray-600">
                          Potential payout: {(
                            parseFloat(betAmount) * (100 / (betChoice === 'yes' ? selectedMarket.yesOdds : selectedMarket.noOdds))
                          ).toFixed(4)} ETH
                        </div>
                      )}
                    </div>
                  )}

                  {betChoice && betAmount && (
                    <button
                      onClick={handlePlaceBet}
                      className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 text-white py-4 px-6 rounded-xl font-semibold text-lg hover:from-blue-700 hover:to-indigo-700 transition-all duration-200 shadow-lg hover:shadow-xl"
                    >
                      Place Bet ({betChoice.toUpperCase()}) - {betAmount} ETH
                    </button>
                  )}
                </div>
              </div>
            )}
          </div>
        )}

        {/* Portfolio Tab */}
        {activeTab === 'portfolio' && (
          <div className="bg-white rounded-2xl shadow-xl p-6">
            <h2 className="text-2xl font-semibold text-gray-800 mb-6">Your Portfolio</h2>
            
            {userBets.length === 0 ? (
              <div className="text-center py-12">
                <div className="text-6xl mb-4">📊</div>
                <p className="text-gray-600">No bets placed yet</p>
                <p className="text-sm text-gray-500">Start betting on markets to see your portfolio</p>
              </div>
            ) : (
              <div className="space-y-4">
                {userBets.map((bet) => {
                  const market = markets.find(m => m.id === bet.marketId);
                  return (
                    <div key={bet.id} className="border border-gray-200 rounded-lg p-4">
                      <div className="flex justify-between items-start mb-2">
                        <h3 className="font-semibold">{market?.title}</h3>
                        <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                          bet.choice === 'yes' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                        }`}>
                          {bet.choice.toUpperCase()}
                        </span>
                      </div>
                      <div className="grid grid-cols-3 gap-4 text-sm">
                        <div>
                          <div className="text-gray-500">Amount</div>
                          <div className="font-semibold">{bet.amount} ETH</div>
                        </div>
                        <div>
                          <div className="text-gray-500">Potential Payout</div>
                          <div className="font-semibold">{bet.potentialPayout.toFixed(4)} ETH</div>
                        </div>
                        <div>
                          <div className="text-gray-500">Date</div>
                          <div className="font-semibold">{new Date(bet.timestamp).toLocaleDateString()}</div>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            )}
          </div>
        )}

        {/* Create Market Tab */}
        {activeTab === 'create' && (
          <div className="bg-white rounded-2xl shadow-xl p-6">
            <h2 className="text-2xl font-semibold text-gray-800 mb-6">Create New Market</h2>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Market Title</label>
                <input
                  type="text"
                  placeholder="e.g., Will Bitcoin reach $100k by 2024?"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
                <textarea
                  placeholder="Provide more details about your prediction market..."
                  rows={3}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Category</label>
                  <select className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option>Crypto</option>
                    <option>Stocks</option>
                    <option>Technology</option>
                    <option>Sports</option>
                    <option>Politics</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">End Date</label>
                  <input
                    type="date"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>
              <button className="w-full bg-gradient-to-r from-green-600 to-emerald-600 text-white py-4 px-6 rounded-xl font-semibold text-lg hover:from-green-700 hover:to-emerald-700 transition-all duration-200 shadow-lg hover:shadow-xl">
                Create Market
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
