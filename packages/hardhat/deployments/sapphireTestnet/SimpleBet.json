{
  "address": "0xFe12a4740Be8F6d031C44Cc006f796555d2E45e9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "domain",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "A13e_RevokedAuthToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiweAuth_AddressMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiweAuth_ChainIdMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiweAuth_DomainMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiweAuth_Expired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiweAuth_NotBeforeInFuture",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiweParser_InvalidAddressLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiweParser_InvalidNonce",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subBetCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "BetPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum SimpleBet.BetStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "BetResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "platform",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "marketId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum SimpleBet.BetOutcome",
          "name": "outcome",
          "type": "uint8"
        }
      ],
      "name": "SubBetPlaced",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        }
      ],
      "name": "cancelBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domain",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getAllBets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "enum SimpleBet.BetOutcome",
              "name": "outcome",
              "type": "uint8"
            },
            {
              "internalType": "enum SimpleBet.BetStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "platform",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "marketId",
                  "type": "string"
                },
                {
                  "internalType": "enum SimpleBet.BetOutcome",
                  "name": "outcome",
                  "type": "uint8"
                },
                {
                  "internalType": "enum SimpleBet.BetStatus",
                  "name": "status",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "payout",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SimpleBet.SubBet[]",
              "name": "subBets",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "totalPayout",
              "type": "uint256"
            }
          ],
          "internalType": "struct SimpleBet.Bet[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "betIndex",
          "type": "uint256"
        }
      ],
      "name": "getBet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "enum SimpleBet.BetOutcome",
              "name": "outcome",
              "type": "uint8"
            },
            {
              "internalType": "enum SimpleBet.BetStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "platform",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "marketId",
                  "type": "string"
                },
                {
                  "internalType": "enum SimpleBet.BetOutcome",
                  "name": "outcome",
                  "type": "uint8"
                },
                {
                  "internalType": "enum SimpleBet.BetStatus",
                  "name": "status",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "payout",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SimpleBet.SubBet[]",
              "name": "subBets",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "totalPayout",
              "type": "uint256"
            }
          ],
          "internalType": "struct SimpleBet.Bet",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "getBetSummary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum SimpleBet.BetStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "subBetCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPayout",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "getSubBets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "platform",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "marketId",
              "type": "string"
            },
            {
              "internalType": "enum SimpleBet.BetOutcome",
              "name": "outcome",
              "type": "uint8"
            },
            {
              "internalType": "enum SimpleBet.BetStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "payout",
              "type": "uint256"
            }
          ],
          "internalType": "struct SimpleBet.SubBet[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalBets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserBetCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getUserBets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "enum SimpleBet.BetOutcome",
              "name": "outcome",
              "type": "uint8"
            },
            {
              "internalType": "enum SimpleBet.BetStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "platform",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "marketId",
                  "type": "string"
                },
                {
                  "internalType": "enum SimpleBet.BetOutcome",
                  "name": "outcome",
                  "type": "uint8"
                },
                {
                  "internalType": "enum SimpleBet.BetStatus",
                  "name": "status",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "payout",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SimpleBet.SubBet[]",
              "name": "subBets",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "totalPayout",
              "type": "uint256"
            }
          ],
          "internalType": "struct SimpleBet.Bet[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "siweMsg",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "v",
              "type": "uint256"
            }
          ],
          "internalType": "struct SignatureRSV",
          "name": "sig",
          "type": "tuple"
        }
      ],
      "name": "login",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        }
      ],
      "name": "ownerWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "enum SimpleBet.BetOutcome",
          "name": "outcome",
          "type": "uint8"
        },
        {
          "internalType": "string[]",
          "name": "platforms",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "marketIds",
          "type": "string[]"
        }
      ],
      "name": "placeBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "won",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        }
      ],
      "name": "resolveBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        }
      ],
      "name": "transferContractBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6afcc1e565b00f4f6027b9ef4c355e0157d8c14fbfea8541e4efb656466044e2",
  "receipt": {
    "to": null,
    "from": "0x8fdd8FF672BEf99e33A1F821ECDC57571391e9B5",
    "contractAddress": "0xFe12a4740Be8F6d031C44Cc006f796555d2E45e9",
    "transactionIndex": 0,
    "gasUsed": "3438850",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x39e18a7a9e72d2c735134138b3110f587d1802fde1fc8e9c4056427e2a65ef87",
    "transactionHash": "0x6afcc1e565b00f4f6027b9ef4c355e0157d8c14fbfea8541e4efb656466044e2",
    "logs": [],
    "blockNumber": 12948129,
    "cumulativeGasUsed": "3438850",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "testnet.sapphire.oasis.io"
  ],
  "numDeployments": 6,
  "solcInputHash": "df36fb846c024ec3773471f313ef54f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"A13e_RevokedAuthToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweAuth_AddressMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweAuth_ChainIdMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweAuth_DomainMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweAuth_Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweAuth_NotBeforeInFuture\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweParser_InvalidAddressLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweParser_InvalidNonce\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subBetCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum SimpleBet.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"BetResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"platform\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"marketId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum SimpleBet.BetOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"}],\"name\":\"SubBetPlaced\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"}],\"name\":\"cancelBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getAllBets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum SimpleBet.BetOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"internalType\":\"enum SimpleBet.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"platform\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"marketId\",\"type\":\"string\"},{\"internalType\":\"enum SimpleBet.BetOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"internalType\":\"enum SimpleBet.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"internalType\":\"struct SimpleBet.SubBet[]\",\"name\":\"subBets\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalPayout\",\"type\":\"uint256\"}],\"internalType\":\"struct SimpleBet.Bet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"betIndex\",\"type\":\"uint256\"}],\"name\":\"getBet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum SimpleBet.BetOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"internalType\":\"enum SimpleBet.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"platform\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"marketId\",\"type\":\"string\"},{\"internalType\":\"enum SimpleBet.BetOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"internalType\":\"enum SimpleBet.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"internalType\":\"struct SimpleBet.SubBet[]\",\"name\":\"subBets\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalPayout\",\"type\":\"uint256\"}],\"internalType\":\"struct SimpleBet.Bet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"getBetSummary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum SimpleBet.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"subBetCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPayout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"getSubBets\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"platform\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"marketId\",\"type\":\"string\"},{\"internalType\":\"enum SimpleBet.BetOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"internalType\":\"enum SimpleBet.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"internalType\":\"struct SimpleBet.SubBet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getUserBets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum SimpleBet.BetOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"internalType\":\"enum SimpleBet.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"platform\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"marketId\",\"type\":\"string\"},{\"internalType\":\"enum SimpleBet.BetOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"internalType\":\"enum SimpleBet.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"internalType\":\"struct SimpleBet.SubBet[]\",\"name\":\"subBets\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalPayout\",\"type\":\"uint256\"}],\"internalType\":\"struct SimpleBet.Bet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"siweMsg\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"}],\"internalType\":\"struct SignatureRSV\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"login\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"}],\"name\":\"ownerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum SimpleBet.BetOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"internalType\":\"string[]\",\"name\":\"platforms\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"marketIds\",\"type\":\"string[]\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"}],\"name\":\"resolveBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"}],\"name\":\"transferContractBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A simple betting smart contract with SiweAuth integration for Oasis Sapphire Users can place bets, contract acts as escrow, and owner can manage funds\",\"kind\":\"dev\",\"methods\":{\"cancelBet(uint256,bytes)\":{\"details\":\"Cancel a bet and refund (only owner)\",\"params\":{\"betId\":\"The bet ID to cancel\",\"token\":\"SIWE authentication token for owner\"}},\"domain()\":{\"returns\":{\"_0\":\"The domain string\"}},\"getAllBets(bytes,uint256,uint256)\":{\"details\":\"Get all bet metadata (paginated) - requires SIWE authentication\",\"params\":{\"count\":\"Number of bets to return\",\"offset\":\"Pagination offset\",\"token\":\"SIWE authentication token\"}},\"getBet(bytes,uint256)\":{\"details\":\"Get a specific bet by index - requires SIWE authentication\",\"params\":{\"betIndex\":\"Index of the bet in the _betMetas array\",\"token\":\"SIWE authentication token\"}},\"getBetSummary(bytes,uint256)\":{\"details\":\"Get bet summary with subbet count (requires SIWE authentication)\",\"params\":{\"betId\":\"The bet ID to get summary for\",\"token\":\"SIWE authentication token\"}},\"getContractBalance()\":{\"details\":\"Get contract balance\"},\"getOwner()\":{\"details\":\"Get owner address\"},\"getSubBets(bytes,uint256)\":{\"details\":\"Get subbets for a specific bet (requires SIWE authentication)\",\"params\":{\"betId\":\"The bet ID to get subbets for\",\"token\":\"SIWE authentication token\"}},\"getTotalBets()\":{\"details\":\"Get total number of bets\"},\"getUserBetCount(address)\":{\"details\":\"Get user's total bet count\",\"params\":{\"user\":\"User address\"}},\"getUserBets(bytes,uint256,uint256)\":{\"details\":\"Get user's bets using SIWE authentication\",\"params\":{\"count\":\"Number of bets to return\",\"offset\":\"Pagination offset\",\"token\":\"SIWE authentication token\"}},\"login(string,(bytes32,bytes32,uint256))\":{\"params\":{\"sig\":\"The signature of the SIWE message\",\"siweMsg\":\"The signed SIWE message\"},\"returns\":{\"_0\":\"The encrypted authentication token\"}},\"ownerWithdraw(uint256,bytes)\":{\"details\":\"Owner withdraws contract funds (only owner)\",\"params\":{\"amount\":\"Amount to withdraw\",\"token\":\"SIWE authentication token for owner\"}},\"placeBet(string,uint8,string[],uint256[],string[])\":{\"details\":\"Place a bet with subbets across multiple platforms\",\"params\":{\"amounts\":\"Array of amounts for each platform\",\"description\":\"Description of the bet (private)\",\"marketIds\":\"Array of market IDs for each platform\",\"outcome\":\"Overall outcome for all subbets (YES/NO)\",\"platforms\":\"Array of platform names\"}},\"resolveBet(uint256,bool,bytes)\":{\"details\":\"Resolve a bet and all its subbets (only owner)\",\"params\":{\"betId\":\"The bet ID to resolve\",\"token\":\"SIWE authentication token for owner\",\"won\":\"Whether the bet won or lost\"}},\"transferContractBalance(address,uint256,bytes)\":{\"details\":\"Transfer contract funds to a specified address (only owner)\",\"params\":{\"amount\":\"Amount to transfer\",\"to\":\"Address to transfer funds to\",\"token\":\"SIWE authentication token for owner\"}},\"withdrawBalance()\":{\"details\":\"Withdraw user balance\"}},\"title\":\"SimpleBet\",\"version\":1},\"userdoc\":{\"errors\":{\"A13e_RevokedAuthToken()\":[{\"notice\":\"The authentication token was revoked\"}],\"SiweAuth_AddressMismatch()\":[{\"notice\":\"User address in the SIWE message does not match the message signer's address\"}],\"SiweAuth_ChainIdMismatch()\":[{\"notice\":\"Chain ID in the SIWE message does not match the actual chain ID\"}],\"SiweAuth_DomainMismatch()\":[{\"notice\":\"Domain in the SIWE message does not match the domain of a dApp\"}],\"SiweAuth_Expired()\":[{\"notice\":\"Validity of the authentication token or the Expires value in the SIWE message is in the past\"}],\"SiweAuth_NotBeforeInFuture()\":[{\"notice\":\"The Not before value in the SIWE message is still in the future\"}],\"SiweParser_InvalidAddressLength()\":[{\"notice\":\"Invalid length of the hex-encoded address\"}],\"SiweParser_InvalidNonce()\":[{\"notice\":\"Invalid length of the nonce\"}]},\"kind\":\"user\",\"methods\":{\"domain()\":{\"notice\":\"Return the domain associated with the dApp.\"},\"login(string,(bytes32,bytes32,uint256))\":{\"notice\":\"Login using a SIWE message and signature\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleBet.sol\":\"SimpleBet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@oasisprotocol/sapphire-contracts/contracts/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Utility for converting date and time to timestamp\\n * @notice Considers leap year, but not leap second.\\n * @custom:attribution https://github.com/pipermerriam/ethereum-datetime/blob/master/contracts/DateTime.sol\\n */\\nlibrary DateTime {\\n    uint16 private constant ORIGIN_YEAR = 1970;\\n\\n    function isLeapYear(uint16 year) internal pure returns (bool) {\\n        if (year % 4 != 0) {\\n            return false;\\n        }\\n        if (year % 100 != 0) {\\n            return true;\\n        }\\n        if (year % 400 != 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Convert year, month, day, hour, minute, second to Unix timestamp.\\n     * @dev Leap second is not supported.\\n     */\\n    function toTimestamp(\\n        uint16 year,\\n        uint8 month,\\n        uint8 day,\\n        uint8 hour,\\n        uint8 minute,\\n        uint8 second\\n    ) internal pure returns (uint256 timestamp) {\\n        uint16 i;\\n\\n        // Year\\n        // TODO: Rewrite to O(1) time implementation.\\n        for (i = ORIGIN_YEAR; i < year; i++) {\\n            if (isLeapYear(i)) {\\n                timestamp += 366 days;\\n            } else {\\n                timestamp += 365 days;\\n            }\\n        }\\n\\n        // Month\\n        // TODO: Use constants for monthDayCounts (hex-encoded string?), rewrite to O(1) time implementation.\\n        uint32[12] memory monthDayCounts;\\n        monthDayCounts[0] = 31;\\n        if (isLeapYear(year)) {\\n            monthDayCounts[1] = 29;\\n        } else {\\n            monthDayCounts[1] = 28;\\n        }\\n        monthDayCounts[2] = 31;\\n        monthDayCounts[3] = 30;\\n        monthDayCounts[4] = 31;\\n        monthDayCounts[5] = 30;\\n        monthDayCounts[6] = 31;\\n        monthDayCounts[7] = 31;\\n        monthDayCounts[8] = 30;\\n        monthDayCounts[9] = 31;\\n        monthDayCounts[10] = 30;\\n        monthDayCounts[11] = 31;\\n\\n        for (i = 1; i < month; i++) {\\n            timestamp += monthDayCounts[i - 1] * 1 days;\\n        }\\n\\n        // Day\\n        timestamp += uint32(day - 1) * 1 days;\\n\\n        // Hour\\n        timestamp += uint32(hour) * 1 hours;\\n\\n        // Minute\\n        timestamp += uint16(minute) * 1 minutes;\\n\\n        // Second\\n        timestamp += second;\\n\\n        return timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x16056b81d29bc53c50a27a243d5215f21e164b2f95b4031bed6686fa83d02b73\",\"license\":\"Apache-2.0\"},\"@oasisprotocol/sapphire-contracts/contracts/EthereumUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport {Sapphire} from \\\"./Sapphire.sol\\\";\\n\\nstruct SignatureRSV {\\n    bytes32 r;\\n    bytes32 s;\\n    uint256 v;\\n}\\n\\nlibrary EthereumUtils {\\n    uint256 internal constant K256_P =\\n        0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f;\\n\\n    // (p+1)//4\\n    uint256 internal constant K256_P_PLUS_1_OVER_4 =\\n        0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff0c;\\n\\n    address internal constant PRECOMPILE_BIGMODEXP = address(0x5);\\n\\n    error expmod_Error();\\n\\n    function expmod(\\n        uint256 base,\\n        uint256 exponent,\\n        uint256 modulus\\n    ) internal view returns (uint256 out) {\\n        (bool success, bytes memory result) = PRECOMPILE_BIGMODEXP.staticcall(\\n            abi.encodePacked(\\n                uint256(0x20), // length of base\\n                uint256(0x20), // length of exponent\\n                uint256(0x20), // length of modulus\\n                base,\\n                exponent,\\n                modulus\\n            )\\n        );\\n\\n        if (!success) revert expmod_Error();\\n\\n        out = uint256(bytes32(result));\\n    }\\n\\n    error k256DeriveY_Invalid_Prefix_Error();\\n\\n    /**\\n     * @notice Recover Y coordinate from X coordinate and sign bit.\\n     * @param prefix 0x02 or 0x03 indicates sign bit of compressed point.\\n     * @param x X coordinate.\\n     */\\n    function k256DeriveY(uint8 prefix, uint256 x)\\n        internal\\n        view\\n        returns (uint256 y)\\n    {\\n        if (prefix != 0x02 && prefix != 0x03)\\n            revert k256DeriveY_Invalid_Prefix_Error();\\n\\n        // x^3 + ax + b, where a=0, b=7\\n        y = addmod(mulmod(x, mulmod(x, x, K256_P), K256_P), 7, K256_P);\\n\\n        // find square root of quadratic residue\\n        y = expmod(y, K256_P_PLUS_1_OVER_4, K256_P);\\n\\n        // negate y if indicated by sign bit\\n        if ((y + prefix) % 2 != 0) {\\n            y = K256_P - y;\\n        }\\n    }\\n\\n    error k256Decompress_Invalid_Length_Error();\\n\\n    /**\\n     * @notice Decompress SEC P256 k1 point.\\n     * @param pk 33 byte compressed public key.\\n     * @return x X coordinate.\\n     * @return y Y coordinate.\\n     */\\n    function k256Decompress(bytes memory pk)\\n        internal\\n        view\\n        returns (uint256 x, uint256 y)\\n    {\\n        if (pk.length != 33) revert k256Decompress_Invalid_Length_Error();\\n        assembly {\\n            // skip 32 byte length prefix, plus one byte sign prefix\\n            x := mload(add(pk, 33))\\n        }\\n        y = k256DeriveY(uint8(pk[0]), x);\\n    }\\n\\n    function k256PubkeyToEthereumAddress(bytes memory pubkey)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        (uint256 x, uint256 y) = k256Decompress(pubkey);\\n        return toEthereumAddress(x, y);\\n    }\\n\\n    /**\\n     * @notice Convert SEC P256 k1 curve point to Ethereum address.\\n     * @param x X coordinate.\\n     * @param y Y coordinate.\\n     * @custom:see https://gavwood.com/paper.pdf (pp. 212)\\n     */\\n    function toEthereumAddress(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        bytes32 digest = keccak256(abi.encodePacked(x, y));\\n\\n        return address(uint160((uint256(digest) << 96) >> 96));\\n    }\\n\\n    error DER_Split_Error();\\n\\n    /**\\n     * @notice Extracts the `r` and `s` parameters from a DER encoded ECDSA\\n     * signature.\\n     *\\n     * The signature is an ASN1 encoded SEQUENCE of the variable length `r` and\\n     * `s` INTEGERs.\\n     *\\n     * ```\\n     * | 0x30 | len(z) | 0x02 | len(r) |  r   | 0x02 | len(s) |  s   | = hex value\\n     * |  1   |   1    |   1  |   1    | 1-33 |  1   |   1    | 1-33 | = byte length\\n     * ```\\n     *\\n     * If the highest bit of either `r` or `s` is set, it will be prefix padded\\n     * with a zero byte. There is exponentially decreasing probability that\\n     * either `r` or `s` will be below 32 bytes. There is a very high\\n     * probability that either `r` or `s` will be 33 bytes. This function only\\n     * works if either `r` or `s` are 256bits or lower.\\n     *\\n     * @param der DER encoded ECDSA signature\\n     * @return rsv ECDSA R point X coordinate, and S scalar\\n     * @custom:see https://bitcoin.stackexchange.com/questions/58853/how-do-you-figure-out-the-r-and-s-out-of-a-signature-using-python\\n     */\\n    function splitDERSignature(bytes memory der)\\n        internal\\n        pure\\n        returns (SignatureRSV memory rsv)\\n    {\\n        if (der.length < 8) revert DER_Split_Error();\\n        if (der[0] != 0x30) revert DER_Split_Error();\\n        if (der[2] != 0x02) revert DER_Split_Error();\\n\\n        uint256 zLen = uint8(der[1]);\\n        uint256 rLen = uint8(der[3]);\\n        if (rLen > 33) revert DER_Split_Error();\\n\\n        uint256 sOffset = 4 + rLen;\\n        uint256 sLen = uint8(der[sOffset + 1]);\\n        if (sLen > 33) revert DER_Split_Error();\\n        if (der[sOffset] != 0x02) revert DER_Split_Error();\\n\\n        if (rLen + sLen + 4 != zLen) revert DER_Split_Error();\\n        if (der.length != zLen + 2) revert DER_Split_Error();\\n\\n        sOffset += 2;\\n        uint256 rOffset = 4;\\n\\n        if (rLen == 33) {\\n            if (der[4] != 0x00) revert DER_Split_Error();\\n            rOffset += 1;\\n            rLen -= 1;\\n        }\\n\\n        if (sLen == 33) {\\n            if (der[sOffset] != 0x00) revert DER_Split_Error();\\n            sOffset += 1;\\n            sLen -= 1;\\n        }\\n\\n        bytes32 r;\\n        bytes32 s;\\n\\n        assembly {\\n            r := mload(add(der, add(32, rOffset)))\\n            s := mload(add(der, add(32, sOffset)))\\n        }\\n\\n        // When length of either `r` or `s` is below 32 bytes\\n        // the 32 byte `mload` will suffix it with unknown stuff\\n        // shift right to remove the unknown stuff, prefixing with zeros instead\\n\\n        if (rLen < 32) {\\n            r >>= 8 * (32 - rLen);\\n        }\\n\\n        if (sLen < 32) {\\n            s >>= 8 * (32 - sLen);\\n        }\\n\\n        rsv.r = r;\\n        rsv.s = s;\\n    }\\n\\n    error recoverV_Error();\\n\\n    function recoverV(\\n        address pubkeyAddr,\\n        bytes32 digest,\\n        SignatureRSV memory rsv\\n    ) internal pure {\\n        rsv.v = 27;\\n\\n        if (ecrecover(digest, uint8(rsv.v), rsv.r, rsv.s) != pubkeyAddr) {\\n            rsv.v = 28;\\n\\n            if (ecrecover(digest, uint8(rsv.v), rsv.r, rsv.s) != pubkeyAddr) {\\n                revert recoverV_Error();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert a Secp256k1PrehashedKeccak256 signature to one accepted\\n     * by ecrecover.\\n     * @param pubkey 33 byte compressed public key.\\n     * @param digest 32 byte pre-hashed message digest.\\n     * @param signature ASN.1 DER encoded signature, as returned from\\n     * [`Sapphire.sign`](../Sapphire.sol/library.Sapphire.md#sign).\\n     * @return pubkeyAddr 20 byte Ethereum address.\\n     * @return rsv Ethereum EcDSA RSV signature values.\\n     * @custom:see https://gavwood.com/paper.pdf (pp. 206)\\n     */\\n    function toEthereumSignature(\\n        bytes memory pubkey,\\n        bytes32 digest,\\n        bytes memory signature\\n    ) internal view returns (address pubkeyAddr, SignatureRSV memory rsv) {\\n        pubkeyAddr = k256PubkeyToEthereumAddress(pubkey);\\n\\n        rsv = splitDERSignature(signature);\\n\\n        recoverV(pubkeyAddr, digest, rsv);\\n    }\\n\\n    function sign(\\n        address pubkeyAddr,\\n        bytes32 secretKey,\\n        bytes32 digest\\n    ) internal view returns (SignatureRSV memory rsv) {\\n        bytes memory signature = Sapphire.sign(\\n            Sapphire.SigningAlg.Secp256k1PrehashedKeccak256,\\n            abi.encodePacked(secretKey),\\n            abi.encodePacked(digest),\\n            \\\"\\\"\\n        );\\n\\n        rsv = splitDERSignature(signature);\\n\\n        recoverV(pubkeyAddr, digest, rsv);\\n    }\\n\\n    /**\\n     * @notice Generate an Ethereum compatible SEC P256 k1 keypair and\\n     * corresponding public address.\\n     * @return pubkeyAddr Ethereum address.\\n     * @return secretKey Secret key used for signing.\\n     */\\n    function generateKeypair()\\n        internal\\n        view\\n        returns (address pubkeyAddr, bytes32 secretKey)\\n    {\\n        bytes memory randSeed = Sapphire.randomBytes(32, \\\"\\\");\\n\\n        secretKey = bytes32(randSeed);\\n\\n        (bytes memory pk, ) = Sapphire.generateSigningKeyPair(\\n            Sapphire.SigningAlg.Secp256k1PrehashedKeccak256,\\n            randSeed\\n        );\\n\\n        pubkeyAddr = k256PubkeyToEthereumAddress(pk);\\n    }\\n}\\n\",\"keccak256\":\"0x79e34844793f4a8970d31eb4cbdd91e060fb93da4cbd28b7b8aad5c22e1f6666\",\"license\":\"Apache-2.0\"},\"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Sapphire\\n * @notice This library provides a number of convenient wrappers for\\n * cryptographic operations such as the x25519 key derivation, Deoxys-II-based\\n * encryption and decryption, signing key generation, message digest signing and\\n * verification, gas padding and hashing.\\n *\\n * Most of the mentioned functions are implemented as Sapphire's precompiles and\\n * are cheap to call.\\n *\\n * #### Calling Precompiles Manually\\n *\\n * You can override the wrappers and call Sapphire precompiles by dispatching\\n * calls to specific well-known contract addresses, as described below. The\\n * __Precompile address__ section of each function will show you the address\\n * of the corresponding precompile.\\n *\\n * Input parameters should be packed into a contiguous memory region with each\\n * chunk of data padded to 32 bytes as usual. The recommended way to construct\\n * parameter byte sequences in Solidity is with `abi.encode` and `abi.decode`,\\n * which will transparently handle things like putting `bytes` lengths in the\\n * correct position.\\n */\\nlibrary Sapphire {\\n    // Oasis-specific, confidential precompiles\\n    address internal constant RANDOM_BYTES =\\n        0x0100000000000000000000000000000000000001;\\n    address internal constant DERIVE_KEY =\\n        0x0100000000000000000000000000000000000002;\\n    address internal constant ENCRYPT =\\n        0x0100000000000000000000000000000000000003;\\n    address internal constant DECRYPT =\\n        0x0100000000000000000000000000000000000004;\\n    address internal constant GENERATE_SIGNING_KEYPAIR =\\n        0x0100000000000000000000000000000000000005;\\n    address internal constant SIGN_DIGEST =\\n        0x0100000000000000000000000000000000000006;\\n    address internal constant VERIFY_DIGEST =\\n        0x0100000000000000000000000000000000000007;\\n    address internal constant CURVE25519_PUBLIC_KEY =\\n        0x0100000000000000000000000000000000000008;\\n    address internal constant GAS_USED =\\n        0x0100000000000000000000000000000000000009;\\n    address internal constant PAD_GAS =\\n        0x010000000000000000000000000000000000000a;\\n\\n    // Oasis-specific, general precompiles\\n    address internal constant SHA512_256 =\\n        0x0100000000000000000000000000000000000101;\\n    address internal constant SHA512 =\\n        0x0100000000000000000000000000000000000102;\\n    address internal constant SHA384 =\\n        0x0100000000000000000000000000000000000104;\\n\\n    type Curve25519PublicKey is bytes32;\\n    type Curve25519SecretKey is bytes32;\\n\\n    enum SigningAlg {\\n        /// Ed25519 signature over the provided message using SHA-512/265 with a domain separator.\\n        /// Can be used to sign transactions for the Oasis consensus layer and SDK paratimes.\\n        Ed25519Oasis,\\n        /// Ed25519 signature over the provided message.\\n        Ed25519Pure,\\n        /// Ed25519 signature over the provided prehashed SHA-512 digest.\\n        Ed25519PrehashedSha512,\\n        /// Secp256k1 signature over the provided message using SHA-512/256 with a domain separator.\\n        /// Can be used to sign transactions for the Oasis consensus layer and SDK paratimes.\\n        Secp256k1Oasis,\\n        /// Secp256k1 over the provided Keccak256 digest.\\n        /// Can be used to sign transactions for Ethereum-compatible networks.\\n        Secp256k1PrehashedKeccak256,\\n        /// Secp256k1 signature over the provided SHA-256 digest.\\n        Secp256k1PrehashedSha256,\\n        /// Sr25519 signature over the provided message.\\n        Sr25519,\\n        /// Secp256r1 signature over the provided SHA-256 digest.\\n        Secp256r1PrehashedSha256,\\n        /// Secp384r1 signature over the provided SHA-384 digest.\\n        Secp384r1PrehashedSha384\\n    }\\n\\n    /**\\n     * @notice Generate `num_bytes` pseudo-random bytes, with an optional\\n     * personalization string (`pers`) added into the hashing algorithm to\\n     * increase domain separation when needed.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000001`\\n     *\\n     * #### Gas cost\\n     *\\n     * 10,000 minimum plus 240 per output word plus 60 per word of the\\n     * personalization string.\\n     *\\n     * #### Implementation details\\n     *\\n     * The mode (e.g. simulation or \\\"view call\\\" vs transaction execution) is fed\\n     * to TupleHash (among other block-dependent components) to derive the \\\"key\\n     * id\\\", which is then used to derive a per-block VRF key from\\n     * epoch-ephemeral entropy (using KMAC256 and cSHAKE) so a different key\\n     * id will result in a unique per-block VRF key. This per-block VRF key is\\n     * then used to create the per-block root RNG which is then used to derive\\n     * domain-separated (using Merlin transcripts) per-transaction random RNGs\\n     * which are then exposed via this precompile. The KMAC, cSHAKE and\\n     * TupleHash algorithms are SHA-3 derived functions defined in [NIST\\n     * Special Publication 800-185](https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-185.pdf).\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes memory randomPad = Sapphire.randomBytes(64, \\\"\\\");\\n     * ```\\n     *\\n     * @param numBytes The number of bytes to return.\\n     * @param pers An optional personalization string to increase domain\\n     *        separation.\\n     * @return The random bytes. If the number of bytes requested is too large\\n     *         (over 1024), a smaller amount (1024) will be returned.\\n     */\\n    function randomBytes(uint256 numBytes, bytes memory pers)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory entropy) = RANDOM_BYTES.staticcall(\\n            abi.encode(numBytes, pers)\\n        );\\n        require(success, \\\"randomBytes: failed\\\");\\n        return entropy;\\n    }\\n\\n    /**\\n     * @notice Generates a Curve25519 keypair.\\n     * @param pers An optional personalization string used to add domain\\n     * separation.\\n     * @return pk The Curve25519 public key. Useful for key exchange.\\n     * @return sk The Curve25519 secret key. Pairs well with\\n     * [deriveSymmetricKey](#derivesymmetrickey).\\n     */\\n    function generateCurve25519KeyPair(bytes memory pers)\\n        internal\\n        view\\n        returns (Curve25519PublicKey pk, Curve25519SecretKey sk)\\n    {\\n        bytes memory scalar = randomBytes(32, pers);\\n        // Twiddle some bits, as per RFC 7748 \\u00a75.\\n        scalar[0] &= 0xf8; // Make it a multiple of 8 to avoid small subgroup attacks.\\n        scalar[31] &= 0x7f; // Clamp to < 2^255 - 19\\n        scalar[31] |= 0x40; // Clamp to >= 2^254\\n        (bool success, bytes memory pkBytes) = CURVE25519_PUBLIC_KEY.staticcall(\\n            scalar\\n        );\\n        require(success, \\\"gen curve25519 pk: failed\\\");\\n        return (\\n            Curve25519PublicKey.wrap(bytes32(pkBytes)),\\n            Curve25519SecretKey.wrap(bytes32(scalar))\\n        );\\n    }\\n\\n    /**\\n     * @notice Derive a symmetric key from a pair of keys using x25519.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000002`\\n     *\\n     * #### Gas cost\\n     *\\n     * 100,000\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes32 publicKey = ... ;\\n     * bytes32 privateKey = ... ;\\n     * bytes32 symmetric = Sapphire.deriveSymmetricKey(publicKey, privateKey);\\n     * ```\\n     *\\n     * @param peerPublicKey The peer's public key.\\n     * @param secretKey Your secret key.\\n     * @return A derived symmetric key.\\n     */\\n    function deriveSymmetricKey(\\n        Curve25519PublicKey peerPublicKey,\\n        Curve25519SecretKey secretKey\\n    ) internal view returns (bytes32) {\\n        (bool success, bytes memory symmetric) = DERIVE_KEY.staticcall(\\n            abi.encode(peerPublicKey, secretKey)\\n        );\\n        require(success, \\\"deriveSymmetricKey: failed\\\");\\n        return bytes32(symmetric);\\n    }\\n\\n    /**\\n     * @notice Encrypt and authenticate the plaintext and additional data using\\n     * DeoxysII.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000003`\\n     *\\n     * #### Gas cost\\n     *\\n     * 50,000 minimum plus 100 per word of input\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes32 key = ... ;\\n     * bytes32 nonce = ... ;\\n     * bytes memory text = \\\"plain text\\\";\\n     * bytes memory ad = \\\"additional data\\\";\\n     * bytes memory encrypted = Sapphire.encrypt(key, nonce, text, ad);\\n     * bytes memory decrypted = Sapphire.decrypt(key, nonce, encrypted, ad);\\n     * ```\\n     *\\n     * @param key The key to use for encryption.\\n     * @param nonce The nonce. Note that only the first 15 bytes of this\\n     * parameter are used.\\n     * @param plaintext The plaintext to encrypt and authenticate.\\n     * @param additionalData The additional data to authenticate.\\n     * @return The ciphertext with appended auth tag.\\n     */\\n    function encrypt(\\n        bytes32 key,\\n        bytes32 nonce,\\n        bytes memory plaintext,\\n        bytes memory additionalData\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory ciphertext) = ENCRYPT.staticcall(\\n            abi.encode(key, nonce, plaintext, additionalData)\\n        );\\n        require(success, \\\"encrypt: failed\\\");\\n        return ciphertext;\\n    }\\n\\n    /**\\n     * @notice Decrypt and authenticate the ciphertext and additional data using\\n     * DeoxysII. Reverts if the auth tag is incorrect.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000004`\\n     *\\n     * #### Gas cost\\n     *\\n     * 50,000 minimum plus 100 per word of input\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes32 key = ... ;\\n     * bytes32 nonce = ... ;\\n     * bytes memory text = \\\"plain text\\\";\\n     * bytes memory ad = \\\"additional data\\\";\\n     * bytes memory encrypted = Sapphire.encrypt(key, nonce, text, ad);\\n     * bytes memory decrypted = Sapphire.decrypt(key, nonce, encrypted, ad);\\n     * ```\\n     *\\n     * @param key The key to use for decryption.\\n     * @param nonce The nonce. Note that only the first 15 bytes of this\\n     * parameter are used.\\n     * @param ciphertext The ciphertext with tag to decrypt and authenticate.\\n     * @param additionalData The additional data to authenticate against the\\n     * ciphertext.\\n     * @return The original plaintext.\\n     */\\n    function decrypt(\\n        bytes32 key,\\n        bytes32 nonce,\\n        bytes memory ciphertext,\\n        bytes memory additionalData\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory plaintext) = DECRYPT.staticcall(\\n            abi.encode(key, nonce, ciphertext, additionalData)\\n        );\\n        require(success, \\\"decrypt: failed\\\");\\n        return plaintext;\\n    }\\n\\n    /**\\n     * @notice Generate a public/private key pair using the specified method and\\n     * seed. The available methods are items in the\\n     * [`Sapphire.SigningAlg`](#signingalg) enum. Note, however, that the\\n     * generation method ignores subvariants, so all three Ed25519-based are\\n     * equivalent, and all Secp256k1 & Secp256r1 based methods are equivalent.\\n     * Sr25519 is not available and will return an error.\\n     *\\n     * #### Precompile address\\n     * `0x0100000000000000000000000000000000000005`\\n     *\\n     * #### Gas Cost\\n     *\\n     * ##### Ed25519: 1,000 gas\\n     *\\n     * - `0` (`Ed25519Oasis`)\\n     * - `1` (`Ed25519Pure`)\\n     * - `2` (`Ed25519PrehashedSha512`)\\n     *\\n     * ##### Secp256k1: 1,500 gas.\\n     * - `3` (`Secp256k1Oasis`)\\n     * - `4` (`Secp256k1PrehashedKeccak256`)\\n     * - `5` (`Secp256k1PrehashedSha256`)\\n     *\\n     * ##### Secp256r1: 4,000 gas\\n     * - `7` (`Secp256r1PrehashedSha256`)\\n     *\\n     * ##### Secp384r1: 18,000 gas\\n     * - `8` (`Secp384r1PrehashedSha384`)\\n     *\\n     * #### Key Formats\\n     *\\n     * ##### Ed25519\\n     *\\n     * Public key: 32 bytes\\n     * Secret key: 32 bytes\\n     *\\n     * ##### Secp256k1 & Secp256r1\\n     *\\n     * Public key: 33 bytes, compressed format (`0x02` or `0x03` prefix, then 32\\n     * byte X coordinate).\\n     * Secret key: 32 bytes\\n     *\\n     * ##### Secp384r1\\n     *\\n     * Public key: 49 bytes, compressed format (`0x02` or `0x03` prefix, then 48\\n     * byte X coordinate).\\n     * Secret key: 48 bytes\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes memory seed = hex\\\"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\\\";\\n     * bytes memory publicKey;\\n     * bytes memory privateKey;\\n     * (publicKey, privateKey) = Sapphire.generateSigningKeyPair(Sapphire.SigningAlg.Ed25519Pure, seed);\\n     * ```\\n     *\\n     * @param alg The signing alg for which to generate a keypair.\\n     * @param seed The seed to use for generating the key pair. You can use the\\n     * `randomBytes` method if you don't already have a seed.\\n     * @return publicKey The public part of the keypair.\\n     * @return secretKey The secret part of the keypair.\\n     */\\n    function generateSigningKeyPair(SigningAlg alg, bytes memory seed)\\n        internal\\n        view\\n        returns (bytes memory publicKey, bytes memory secretKey)\\n    {\\n        (bool success, bytes memory keypair) = GENERATE_SIGNING_KEYPAIR\\n            .staticcall(abi.encode(alg, seed));\\n        require(success, \\\"gen signing keypair: failed\\\");\\n        return abi.decode(keypair, (bytes, bytes));\\n    }\\n\\n    /**\\n     * @notice Sign a message within the provided context using the specified\\n     * algorithm, and return the signature. The `context_or_digest` and\\n     * `messages` parameters change in meaning slightly depending on the method\\n     * requested. For methods that take a context in addition to the message you\\n     * must pass the context in the `context_or_digest` parameter and use\\n     * `message` as expected. For methods that take a pre-existing hash of the\\n     * message, pass that in `context_or_digest` and leave `message` empty.\\n     * Specifically the `Ed25519Oasis` and `Secp256k1Oasis` variants take both a\\n     * context and a message (each are variable length `bytes`), the context\\n     * serves as a domain separator.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000006`\\n     *\\n     * #### Gas cost\\n     *\\n     * See below for the method-dependent base cost, plus 8 gas per 32 bytes of\\n     * context and message except digest.\\n     *\\n     * #### Signing algorithms\\n     *\\n     * - `0` (`Ed25519Oasis`): 1,500 gas, variable length context and message.\\n     * - `1` (`Ed25519Pure`): 1,500 gas, empty context, variable length message.\\n     * - `2` (`Ed25519PrehashedSha512`): 1,500 gas, pre-existing SHA-512 hash\\n     *   (64 bytes) as context, empty message.\\n     * - `3` (`Secp256k1Oasis`): 3,000 gas, variable length context and message\\n     * - `4` (`Secp256k1PrehashedKeccak256`): 3,000 gas, pre-existing hash\\n     *   (32 bytes) as context, empty message.\\n     * - `5` (`Secp256k1PrehashedSha256`): 3,000 gas, pre-existing hash (32\\n     *   bytes) as context, empty message.\\n     * - `7` (`Secp256r1PrehashedSha256`): 9,000 gas, pre-existing hash (32\\n     *   bytes) as context, empty message.\\n     * - `8` (`Secp384r1PrehashedSha384`): 43,200 gas, pre-existing hash (32\\n     *   bytes) as context, empty message.\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * Sapphire.SigningAlg alg = Sapphire.SigningAlg.Ed25519Pure;\\n     * bytes memory pk;\\n     * bytes memory sk;\\n     * (pk, sk) = Sapphire.generateSigningKeyPair(alg, Sapphire.randomBytes(32, \\\"\\\"));\\n     * bytes memory signature = Sapphire.sign(alg, sk, \\\"\\\", \\\"signed message\\\");\\n     * ```\\n     *\\n     * @param alg The signing algorithm to use.\\n     * @param secretKey The secret key to use for signing. The key must be valid\\n     * for use with the requested algorithm.\\n     * @param contextOrHash Domain-Separator Context, or precomputed hash bytes.\\n     * @param message Message to sign, should be zero-length if precomputed hash\\n     * given.\\n     * @return signature The resulting signature.\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/confidential.rs :: call_sign\\n     */\\n    function sign(\\n        SigningAlg alg,\\n        bytes memory secretKey,\\n        bytes memory contextOrHash,\\n        bytes memory message\\n    ) internal view returns (bytes memory signature) {\\n        (bool success, bytes memory sig) = SIGN_DIGEST.staticcall(\\n            abi.encode(alg, secretKey, contextOrHash, message)\\n        );\\n        require(success, \\\"sign: failed\\\");\\n        return sig;\\n    }\\n\\n    /**\\n     * @notice Verifies that the provided digest was signed with using the\\n     * secret key corresponding to the provided private key and the specified\\n     * signing algorithm.\\n     *\\n     * The `method`, `context_or_digest` and `message` parameters have the same\\n     * meaning as described above in the [sign()](#sign) function.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000007`\\n     *\\n     * #### Gas cost\\n     *\\n     * The algorithm-specific base cost below, with an additional **8 gas per\\n     * 32 bytes** of `context` and `message` for the `Ed25519Oasis`,\\n     * `Ed25519Pure` and `Secp256k1Oasis` algorithms.\\n     *\\n     * - `0` (`Ed25519Oasis`): 2,000 gas\\n     * - `1` (`Ed25519Pure`): 2,000 gas\\n     * - `2` (`Ed25519PrehashedSha512`): 2,000 gas\\n     * - `3` (`Secp256k1Oasis`): 3,000 gas\\n     * - `4` (`Secp256k1PrehashedKeccak256`): 3,000 gas\\n     * - `5` (`Secp256k1PrehashedSha256`): 3,000 gas\\n     * - `7` (`Secp256r1PrehashedSha256`): 7,900 gas\\n     * - `8` (`Secp384r1PrehashedSha384`): 37,920 gas\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * Sapphire.SigningAlg alg = Sapphire.SigningAlg.Secp256k1PrehashedKeccak256;\\n     * bytes memory pk;\\n     * bytes memory sk;\\n     * bytes memory digest = abi.encodePacked(keccak256(\\\"signed message\\\"));\\n     * (pk, sk) = Sapphire.generateSigningKeyPair(alg, Sapphire.randomBytes(32, \\\"\\\"));\\n     * bytes memory signature = Sapphire.sign(alg, sk, digest, \\\"\\\");\\n     * require( Sapphire.verify(alg, pk, digest, \\\"\\\", signature) );\\n     * ```\\n     *\\n     * @param alg The signing algorithm by which the signature was generated.\\n     * @param publicKey The public key against which to check the signature.\\n     * @param contextOrHash Domain-Separator Context, or precomputed hash bytes\\n     * @param message The hash of the message that was signed, should be\\n     * zero-length if precomputed hash was given.\\n     * @param signature The signature to check.\\n     * @return verified Whether the signature is valid for the given parameters.\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/confidential.rs :: call_verify\\n     */\\n    function verify(\\n        SigningAlg alg,\\n        bytes memory publicKey,\\n        bytes memory contextOrHash,\\n        bytes memory message,\\n        bytes memory signature\\n    ) internal view returns (bool verified) {\\n        (bool success, bytes memory v) = VERIFY_DIGEST.staticcall(\\n            abi.encode(alg, publicKey, contextOrHash, message, signature)\\n        );\\n        require(success, \\\"verify: failed\\\");\\n        return abi.decode(v, (bool));\\n    }\\n\\n    /**\\n     * @notice Set the current transactions gas usage to a specific amount\\n     * @dev Will cause a reversion if the current usage is more than the amount.\\n     * @param toAmount Gas usage will be set to this amount\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/gas.rs :: call_pad_gas\\n     *\\n     */\\n    function padGas(uint128 toAmount) internal view {\\n        (bool success, ) = PAD_GAS.staticcall(abi.encode(toAmount));\\n        require(success, \\\"verify: failed\\\");\\n    }\\n\\n    /**\\n     * @notice Returns the amount of gas currently used by the transaction\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/gas.rs :: call_gas_used\\n     */\\n    function gasUsed() internal view returns (uint64) {\\n        (bool success, bytes memory v) = GAS_USED.staticcall(\\\"\\\");\\n        require(success, \\\"gasused: failed\\\");\\n        return abi.decode(v, (uint64));\\n    }\\n}\\n\\n/**\\n * @notice Hash the input data with SHA-512/256, according to\\n * [NIST.FIPS.180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\\n *\\n * #### Precompile address\\n *\\n * `0x0100000000000000000000000000000000000102`\\n *\\n * #### Gas cost\\n *\\n * 115 gas, then 13 gas per word\\n *\\n * #### Example\\n *\\n * ```solidity\\n * bytes32 result = sha512_256(abi.encodePacked(\\\"input data\\\"));\\n * ```\\n *\\n * #### Warning: SHA-512 vs SHA-512/256 Length-Extension Attacks\\n *\\n * [SHA-512](function.sha512.md#sha512) is vulnerable to [length-extension\\n * attacks](https://en.wikipedia.org/wiki/Length_extension_attack), which are\\n * relevant if you are computing the hash of a secret message. The\\n * [SHA-512/256](function.sha512_256.md#sha512_256) variant is **not**\\n * vulnerable to length-extension attacks.\\n *\\n * @param input Bytes to hash.\\n * @return result 32 byte digest.\\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha512_256\\n */\\nfunction sha512_256(bytes memory input) view returns (bytes32 result) {\\n    (bool success, bytes memory output) = Sapphire.SHA512_256.staticcall(input);\\n\\n    require(success, \\\"sha512_256\\\");\\n\\n    return bytes32(output);\\n}\\n\\n/**\\n * @notice Hash the input data with SHA-512, according to\\n * [NIST.FIPS.180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf)\\n *\\n * #### Precompile address\\n *\\n * `0x0100000000000000000000000000000000000101`\\n *\\n * #### Warning: SHA-512 vs SHA-512/256 Length-Extension Attacks\\n *\\n * [SHA-512](function.sha512.md#sha512) is vulnerable to [length-extension\\n * attacks](https://en.wikipedia.org/wiki/Length_extension_attack), which are\\n * relevant if you are computing the hash of a secret message. The\\n * [SHA-512/256](function.sha512_256.md#sha512_256) variant is **not**\\n * vulnerable to length-extension attacks.\\n *\\n * #### Gas Cost\\n *\\n * 115 gas, then 13 gas per word\\n *\\n * #### Example\\n *\\n * ```solidity\\n * bytes memory result = sha512(abi.encodePacked(\\\"input data\\\"));\\n * ```\\n *\\n * @param input Bytes to hash.\\n * @return output 64 byte digest.\\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha512\\n */\\nfunction sha512(bytes memory input) view returns (bytes memory output) {\\n    bool success;\\n\\n    (success, output) = Sapphire.SHA512.staticcall(input);\\n\\n    require(success, \\\"sha512\\\");\\n}\\n\\n/**\\n * @notice Hash the input data with SHA-384.\\n * @param input Bytes to hash.\\n * @return output 48 byte digest.\\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha384\\n */\\nfunction sha384(bytes memory input) view returns (bytes memory output) {\\n    bool success;\\n\\n    (success, output) = Sapphire.SHA384.staticcall(input);\\n\\n    require(success, \\\"sha384\\\");\\n}\\n\",\"keccak256\":\"0x87a43ed0f7c74b7da8ee58d349f466fb2947bf71f6fca10174ebad96d59e2c8a\",\"license\":\"Apache-2.0\"},\"@oasisprotocol/sapphire-contracts/contracts/SiweParser.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport {DateTime} from \\\"./DateTime.sol\\\";\\n\\nstruct ParsedSiweMessage {\\n    bytes schemeDomain;\\n    address addr;\\n    bytes statement;\\n    bytes uri;\\n    bytes version;\\n    uint256 chainId;\\n    bytes nonce;\\n    bytes issuedAt;\\n    bytes expirationTime;\\n    bytes notBefore;\\n    bytes requestId;\\n    bytes[] resources;\\n}\\n\\n/**\\n * @title On-chain parser for EIP-4361 SIWE message\\n * @notice Call parseSiweMsg() and provide the EIP-4361 SIWE message. The parser\\n * will generate the ParsedSiweMessage struct which you can then use to\\n * extract the authentication information in your on-chain contract.\\n */\\nlibrary SiweParser {\\n    /// Invalid length of the hex-encoded address\\n    error SiweParser_InvalidAddressLength();\\n    /// Invalid length of the nonce\\n    error SiweParser_InvalidNonce();\\n\\n    /**\\n     * @notice Convert string containing hex address without 0x prefix to solidity address object.\\n     */\\n    function _hexStringToAddress(bytes memory s)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        if (s.length != 40) {\\n            revert SiweParser_InvalidAddressLength();\\n        }\\n\\n        bytes memory r = new bytes(s.length / 2);\\n        for (uint256 i = 0; i < s.length / 2; ++i) {\\n            r[i] = bytes1(\\n                _fromHexChar(uint8(s[2 * i])) *\\n                    16 +\\n                    _fromHexChar(uint8(s[2 * i + 1]))\\n            );\\n        }\\n        return address(bytes20(r));\\n    }\\n\\n    function _fromHexChar(uint8 c) internal pure returns (uint8) {\\n        if (bytes1(c) >= bytes1(\\\"0\\\") && bytes1(c) <= bytes1(\\\"9\\\")) {\\n            return c - uint8(bytes1(\\\"0\\\"));\\n        }\\n        if (bytes1(c) >= bytes1(\\\"a\\\") && bytes1(c) <= bytes1(\\\"f\\\")) {\\n            return 10 + c - uint8(bytes1(\\\"a\\\"));\\n        }\\n        if (bytes1(c) >= bytes1(\\\"A\\\") && bytes1(c) <= bytes1(\\\"F\\\")) {\\n            return 10 + c - uint8(bytes1(\\\"A\\\"));\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Substring.\\n     */\\n    function _substr(\\n        bytes memory str,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint256 i = startIndex; i < endIndex && i < str.length; i++) {\\n            result[i - startIndex] = str[i];\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice String to Uint using decimal format. No error handling.\\n     */\\n    function _parseUint(bytes memory b) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            result = result * 10 + (uint256(uint8(b[i])) - 0x30);\\n        }\\n        return (result);\\n    }\\n\\n    /**\\n     * @notice Parse \\\"NAME: VALUE\\\" in str starting at index i and ending at \\\\n or end of bytes.\\n     * @return VALUE and new i, if NAME matched; otherwise empty value and old i.\\n     */\\n    function _parseField(\\n        bytes calldata str,\\n        string memory name,\\n        uint256 i\\n    ) internal pure returns (bytes memory, uint256) {\\n        uint256 j = i;\\n        for (; j < str.length; j++) {\\n            if (str[j] == \\\":\\\") {\\n                // Delimiter found, check the name.\\n                if (keccak256(_substr(str, i, j)) != keccak256(bytes(name))) {\\n                    return (\\\"\\\", i);\\n                }\\n\\n                // Skip :\\n                j++;\\n                if (j < str.length && str[j] == \\\" \\\") {\\n                    // Skip blank\\n                    j++;\\n                }\\n\\n                i = j;\\n                break;\\n            }\\n        }\\n\\n        for (; j < str.length; j++) {\\n            if (str[j] == 0x0a) {\\n                return (_substr(str, i, j), j + 1);\\n            }\\n        }\\n        return (_substr(str, i, j), j);\\n    }\\n\\n    /**\\n     * @notice Parse bullets, one per line in str starting at i.\\n     * @return Array of parsed values and a new i.\\n     */\\n    function _parseArray(bytes calldata str, uint256 i)\\n        internal\\n        pure\\n        returns (bytes[] memory, uint256)\\n    {\\n        // First count the number of resources.\\n        uint256 j = i;\\n        uint256 count = 0;\\n        for (; j < str.length - 1; j++) {\\n            if (str[j] == \\\"-\\\" && str[j + 1] == \\\" \\\") {\\n                j += 2;\\n                count++;\\n            } else {\\n                break;\\n            }\\n            while (j < str.length && str[j] != 0x0a) {\\n                j++;\\n            }\\n        }\\n\\n        // Then build an array.\\n        bytes[] memory values = new bytes[](count);\\n        j = i;\\n        for (uint256 c = 0; j < str.length - 1 && c != count; j++) {\\n            if (str[j] == \\\"-\\\" && str[j + 1] == \\\" \\\") {\\n                i = j + 2;\\n            }\\n            while (j < str.length && str[j] != 0x0a) {\\n                j++;\\n            }\\n            values[c] = _substr(str, i, j);\\n            c++;\\n            if (j == str.length) {\\n                j--; // Subtract 1 because of the outer loop.\\n            }\\n        }\\n        return (values, j);\\n    }\\n\\n    /**\\n     * @notice Parse SIWE message.\\n     * @return ParsedSiweMessage struct with populated fields from the message.\\n     */\\n    function parseSiweMsg(bytes calldata siweMsg)\\n        internal\\n        pure\\n        returns (ParsedSiweMessage memory)\\n    {\\n        ParsedSiweMessage memory p;\\n        uint256 i = 0;\\n\\n        // dApp Domain.\\n        for (; i < siweMsg.length; i++) {\\n            if (siweMsg[i] == \\\" \\\") {\\n                p.schemeDomain = _substr(siweMsg, 0, i);\\n                break;\\n            }\\n        }\\n\\n        i += 50; // \\\" wants you to sign in with your Ethereum account:\\\\n\\\"\\n\\n        // Address.\\n        // TODO: Verify the mixed-case checksum.\\n        p.addr = _hexStringToAddress(_substr(siweMsg, i += 2, i += 40));\\n        i += 2; // End of address new line + New line.\\n\\n        // (Optional) statement.\\n        if (i < siweMsg.length && siweMsg[i] != \\\"\\\\n\\\") {\\n            for (uint256 j = i; j < siweMsg.length; j++) {\\n                if (siweMsg[j] == 0x0a) {\\n                    p.statement = _substr(siweMsg, i, j);\\n                    i = j + 1; // End of statement new line.\\n                    break;\\n                }\\n            }\\n        }\\n\\n        i++; // New line.\\n\\n        (p.uri, i) = _parseField(siweMsg, \\\"URI\\\", i);\\n        (p.version, i) = _parseField(siweMsg, \\\"Version\\\", i);\\n        bytes memory chainId;\\n        (chainId, i) = _parseField(siweMsg, \\\"Chain ID\\\", i);\\n        p.chainId = _parseUint(chainId);\\n        (p.nonce, i) = _parseField(siweMsg, \\\"Nonce\\\", i);\\n        if (p.nonce.length < 8) {\\n            revert SiweParser_InvalidNonce();\\n        }\\n        (p.issuedAt, i) = _parseField(siweMsg, \\\"Issued At\\\", i);\\n        (p.expirationTime, i) = _parseField(siweMsg, \\\"Expiration Time\\\", i);\\n        (p.notBefore, i) = _parseField(siweMsg, \\\"Not Before\\\", i);\\n        (p.requestId, i) = _parseField(siweMsg, \\\"Request ID\\\", i);\\n\\n        // Parse resources, if they exist.\\n        uint256 newI;\\n        (, newI) = _parseField(siweMsg, \\\"Resources\\\", i);\\n        if (newI != i) {\\n            (p.resources, i) = _parseArray(siweMsg, newI);\\n        }\\n\\n        return p;\\n    }\\n\\n    /**\\n     * @notice Parse RFC 3339 (ISO 8601) string to timestamp.\\n     */\\n    function timestampFromIso(bytes memory str)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            DateTime.toTimestamp(\\n                uint16(_parseUint(_substr(str, 0, 4))),\\n                uint8(_parseUint(_substr(str, 5, 7))),\\n                uint8(_parseUint(_substr(str, 8, 10))),\\n                uint8(_parseUint(_substr(str, 11, 13))),\\n                uint8(_parseUint(_substr(str, 14, 16))),\\n                uint8(_parseUint(_substr(str, 17, 19)))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x07529271c0beff34900dcd2d967635ddf0af86645a1c5fdcf7396b12bc3a9965\",\"license\":\"Apache-2.0\"},\"@oasisprotocol/sapphire-contracts/contracts/auth/A13e.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport {SignatureRSV} from \\\"../EthereumUtils.sol\\\";\\n\\n/**\\n * @title Interface for authenticatable contracts\\n * @notice This is the interface for universal authentication mechanism (e.g.\\n * SIWE):\\n * 1. The user-facing app calls `login()` which generates the authentication\\n *    token on-chain.\\n * 2. Any smart contract method that requires authentication can take this token\\n *    as an argument. Passing this token to `authMsgSender()` verifies it and\\n *    returns the **authenticated** user address. This verified address can then\\n *    serve as a user ID for authorization.\\n */\\nabstract contract A13e {\\n    /// A mapping of revoked authentication tokens. Access it directly or use the checkRevokedAuthToken modifier.\\n    mapping(bytes32 => bool) internal _revokedAuthTokens;\\n\\n    /// The authentication token was revoked\\n    error A13e_RevokedAuthToken();\\n\\n    /**\\n     * @notice Reverts if the given token was revoked\\n     */\\n    modifier checkRevokedAuthToken(bytes memory token) {\\n        if (_revokedAuthTokens[keccak256(token)]) {\\n            revert A13e_RevokedAuthToken();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Verify the login message and its signature and generate the\\n     * token.\\n     */\\n    function login(string calldata message, SignatureRSV calldata sig)\\n        external\\n        view\\n        virtual\\n        returns (bytes memory);\\n\\n    /**\\n     * @notice Validate the token and return authenticated msg.sender.\\n     */\\n    function authMsgSender(bytes memory token)\\n        internal\\n        view\\n        virtual\\n        returns (address);\\n\\n    /**\\n     * @notice Revoke the authentication token with the corresponding hash.\\n     * e.g. In case when the token is leaked or for extra-secure apps on\\n     * every logout.\\n     */\\n    function revokeAuthToken(bytes32 token) internal {\\n        _revokedAuthTokens[token] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x0cf14dfe3264acfd5b67c0559d668dfbbdeea96879ade2c1144aac3931968fe2\",\"license\":\"Apache-2.0\"},\"@oasisprotocol/sapphire-contracts/contracts/auth/SiweAuth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {SignatureRSV, A13e} from \\\"./A13e.sol\\\";\\nimport {ParsedSiweMessage, SiweParser} from \\\"../SiweParser.sol\\\";\\nimport {Sapphire} from \\\"../Sapphire.sol\\\";\\n\\n/// @title AuthToken structure for SIWE-based authentication\\nstruct AuthToken {\\n    string domain; // [ scheme \\\"://\\\" ] domain.\\n    address userAddr;\\n    uint256 validUntil; // in Unix timestamp.\\n    string statement; // Human-readable statement from the SIWE message.\\n    string[] resources; // Resources this token grants access to.\\n}\\n\\n/**\\n * @title Base contract for SIWE-based authentication\\n * @notice Inherit this contract if you wish to enable SIWE-based\\n * authentication in your contract functions that require authentication.\\n * The smart contract needs to be bound to a domain (passed in constructor).\\n *\\n * #### Example\\n *\\n * ```solidity\\n * contract MyContract is SiweAuth {\\n *   address private _owner;\\n *   string private _message;\\n *\\n *   modifier onlyOwner(bytes memory token) {\\n *     if (msg.sender != _owner && authMsgSender(token) != _owner) {\\n *       revert(\\\"not allowed\\\");\\n *     }\\n *     _;\\n *   }\\n *\\n *   constructor(string memory domain) SiweAuth(domain) {\\n *     _owner = msg.sender;\\n *   }\\n *\\n *   function getSecretMessage(bytes memory token) external view onlyOwner(token) returns (string memory) {\\n *     return _message;\\n *   }\\n *\\n *   function setSecretMessage(string calldata message) external onlyOwner(\\\"\\\") {\\n *     _message = message;\\n *   }\\n * }\\n * ```\\n */\\ncontract SiweAuth is A13e {\\n    /// Domain which the dApp is associated with\\n    string internal _domain;\\n    /// Encryption key which the authentication tokens are encrypted with\\n    bytes32 private _authTokenEncKey;\\n    /// Default authentication token validity, if no expiration-time provided\\n    uint256 private constant DEFAULT_VALIDITY = 24 hours;\\n\\n    /// Chain ID in the SIWE message does not match the actual chain ID\\n    error SiweAuth_ChainIdMismatch();\\n    /// Domain in the SIWE message does not match the domain of a dApp\\n    error SiweAuth_DomainMismatch();\\n    /// User address in the SIWE message does not match the message signer's address\\n    error SiweAuth_AddressMismatch();\\n    /// The Not before value in the SIWE message is still in the future\\n    error SiweAuth_NotBeforeInFuture();\\n    /// Validity of the authentication token or the Expires value in the SIWE message is in the past\\n    error SiweAuth_Expired();\\n\\n    /**\\n     * @notice Instantiate the contract which uses SIWE for authentication and\\n     * runs on the specified domain.\\n     * @param inDomain The domain this contract is associated with\\n     */\\n    constructor(string memory inDomain) {\\n        _authTokenEncKey = bytes32(Sapphire.randomBytes(32, \\\"\\\"));\\n        _domain = inDomain;\\n    }\\n\\n    /**\\n     * @notice Login using a SIWE message and signature\\n     * @param siweMsg The signed SIWE message\\n     * @param sig The signature of the SIWE message\\n     * @return The encrypted authentication token\\n     */\\n    function login(string calldata siweMsg, SignatureRSV calldata sig)\\n        external\\n        view\\n        override\\n        returns (bytes memory)\\n    {\\n        AuthToken memory b;\\n\\n        // Derive the user's address from the signature.\\n        bytes memory eip191msg = abi.encodePacked(\\n            \\\"\\\\x19Ethereum Signed Message:\\\\n\\\",\\n            Strings.toString(bytes(siweMsg).length),\\n            siweMsg\\n        );\\n        address addr = ecrecover(\\n            keccak256(eip191msg),\\n            uint8(sig.v),\\n            sig.r,\\n            sig.s\\n        );\\n        b.userAddr = addr;\\n\\n        ParsedSiweMessage memory p = SiweParser.parseSiweMsg(bytes(siweMsg));\\n\\n        if (p.chainId != block.chainid) {\\n            revert SiweAuth_ChainIdMismatch();\\n        }\\n\\n        if (keccak256(p.schemeDomain) != keccak256(bytes(_domain))) {\\n            revert SiweAuth_DomainMismatch();\\n        }\\n        b.domain = string(p.schemeDomain);\\n\\n        if (p.addr != addr) {\\n            revert SiweAuth_AddressMismatch();\\n        }\\n\\n        if (\\n            p.notBefore.length != 0 &&\\n            block.timestamp <= SiweParser.timestampFromIso(p.notBefore)\\n        ) {\\n            revert SiweAuth_NotBeforeInFuture();\\n        }\\n\\n        if (p.expirationTime.length != 0) {\\n            // Compute expected block number at expiration time.\\n            uint256 expirationTime = SiweParser.timestampFromIso(\\n                p.expirationTime\\n            );\\n            b.validUntil = expirationTime;\\n        } else {\\n            // Otherwise, just take the default validity.\\n            b.validUntil = block.timestamp + DEFAULT_VALIDITY;\\n        }\\n        if (block.timestamp >= b.validUntil) {\\n            revert SiweAuth_Expired();\\n        }\\n\\n        // Store statement from the SIWE message.\\n        b.statement = string(p.statement);\\n\\n        // Store resources from the SIWE message.\\n        b.resources = new string[](p.resources.length);\\n        for (uint256 i = 0; i < p.resources.length; i++) {\\n            b.resources[i] = string(p.resources[i]);\\n        }\\n\\n        bytes memory encB = Sapphire.encrypt(\\n            _authTokenEncKey,\\n            0,\\n            abi.encode(b),\\n            \\\"\\\"\\n        );\\n        return encB;\\n    }\\n\\n    /**\\n     * @notice Return the domain associated with the dApp.\\n     * @return The domain string\\n     */\\n    function domain() public view returns (string memory) {\\n        return _domain;\\n    }\\n\\n    /**\\n     * @notice Get the authenticated address from a token\\n     * @param token The authentication token\\n     * @return The authenticated user address or zero address if token is empty\\n     */\\n    function authMsgSender(bytes memory token)\\n        internal\\n        view\\n        override\\n        checkRevokedAuthToken(token)\\n        returns (address)\\n    {\\n        if (token.length == 0) {\\n            return address(0);\\n        }\\n\\n        AuthToken memory b = decodeAndValidateToken(token);\\n        return b.userAddr;\\n    }\\n\\n    /**\\n     * @notice Get the statement from the authentication token\\n     * @param token The authentication token\\n     * @return The statement string from the SIWE message\\n     */\\n    function getStatement(bytes memory token)\\n        internal\\n        view\\n        checkRevokedAuthToken(token)\\n        returns (string memory)\\n    {\\n        if (token.length == 0) {\\n            return \\\"\\\";\\n        }\\n\\n        AuthToken memory b = decodeAndValidateToken(token);\\n        return b.statement;\\n    }\\n\\n    /**\\n     * @notice Get all resources from the authentication token\\n     * @param token The authentication token\\n     * @return Array of resource URIs the token grants access to\\n     */\\n    function getResources(bytes memory token)\\n        internal\\n        view\\n        checkRevokedAuthToken(token)\\n        returns (string[] memory)\\n    {\\n        if (token.length == 0) {\\n            return new string[](0);\\n        }\\n\\n        AuthToken memory b = decodeAndValidateToken(token);\\n        return b.resources;\\n    }\\n\\n    /**\\n     * @notice Helper function to decrypt, decode and validate a token\\n     * @dev Performs token decoding as well as domain and validation\\n     * @param token The authentication token\\n     * @return The decoded and validated AuthToken struct\\n     */\\n    function decodeAndValidateToken(bytes memory token)\\n        internal\\n        view\\n        virtual\\n        returns (AuthToken memory)\\n    {\\n        bytes memory authTokenEncoded = Sapphire.decrypt(\\n            _authTokenEncKey,\\n            0,\\n            token,\\n            \\\"\\\"\\n        );\\n        AuthToken memory b = abi.decode(authTokenEncoded, (AuthToken));\\n\\n        // Validate domain\\n        if (keccak256(bytes(b.domain)) != keccak256(bytes(_domain))) {\\n            revert SiweAuth_DomainMismatch();\\n        }\\n\\n        // Validate expiry\\n        if (b.validUntil < block.timestamp) {\\n            revert SiweAuth_Expired();\\n        }\\n\\n        return b;\\n    }\\n}\\n\",\"keccak256\":\"0x99fe870c763ff9329f6bac4484ab0ec54fb90ca8bb665b44fd2e058fe739acda\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/SimpleBet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@oasisprotocol/sapphire-contracts/contracts/auth/SiweAuth.sol\\\";\\n\\n/**\\n * @title SimpleBet\\n * @dev A simple betting smart contract with SiweAuth integration for Oasis Sapphire\\n * Users can place bets, contract acts as escrow, and owner can manage funds\\n */\\ncontract SimpleBet is SiweAuth {\\n    address private _owner;\\n    uint256 private _nextBetId = 1;\\n    \\n    enum BetOutcome {\\n        YES,\\n        NO\\n    }\\n    \\n    enum BetStatus {\\n        Active,\\n        Won,\\n        Lost,\\n        Cancelled\\n    }\\n    \\n    struct SubBet {\\n        string platform;        // e.g., \\\"Polymarket\\\", \\\"Augur\\\", \\\"Gnosis\\\"\\n        uint256 amount;         // Amount allocated to this platform\\n        string marketId;        // Platform-specific market identifier\\n        BetOutcome outcome;     // Outcome bet on this platform\\n        BetStatus status;       // Status of this specific subbet\\n        uint256 payout;         // Payout received from this platform\\n    }\\n    \\n    struct Bet {\\n        uint256 id;\\n        address user;\\n        uint256 totalAmount;    // Total amount across all subbets\\n        BetOutcome outcome;     // Overall outcome for all subbets\\n        BetStatus status;       // Overall bet status\\n        uint256 createdAt;\\n        string description;\\n        SubBet[] subBets;       // Array of subbets across different platforms\\n        uint256 totalPayout;    // Total payout across all subbets\\n    }\\n    \\n    // Private bet details (secret, accessible only with SIWE auth)\\n    Bet[] private _betMetas;\\n    \\n    mapping(address => uint256[]) private _userBets;\\n    mapping(address => uint256) public userBalances;\\n    \\n    event BetPlaced(\\n        uint256 indexed betId,\\n        address indexed user,\\n        uint256 totalAmount,\\n        uint256 subBetCount,\\n        uint256 index\\n    );\\n    \\n    event SubBetPlaced(\\n        uint256 indexed betId,\\n        string platform,\\n        uint256 amount,\\n        string marketId,\\n        BetOutcome outcome\\n    );\\n    \\n    event BetResolved(\\n        uint256 indexed betId,\\n        BetStatus status,\\n        uint256 payout\\n    );\\n    \\n    event FundsWithdrawn(\\n        address indexed user,\\n        uint256 amount\\n    );\\n    \\n    modifier onlyOwner(bytes memory token) {\\n        if (msg.sender != _owner && authMsgSender(token) != _owner) {\\n            revert(\\\"not allowed\\\");\\n        }\\n        _;\\n    }\\n    \\n    modifier onlyBetOwner(uint256 betId, bytes memory token) {\\n        require(betId < _betMetas.length, \\\"Bet does not exist\\\");\\n        address betOwner = _betMetas[betId].user;\\n        if (msg.sender != betOwner && authMsgSender(token) != betOwner) {\\n            revert(\\\"not bet owner\\\");\\n        }\\n        _;\\n    }\\n    \\n    constructor(string memory domain) SiweAuth(domain) {\\n        _owner = msg.sender;\\n    }\\n    \\n    /**\\n     * @dev Place a bet with subbets across multiple platforms\\n     * @param description Description of the bet (private)\\n     * @param outcome Overall outcome for all subbets (YES/NO)\\n     * @param platforms Array of platform names\\n     * @param amounts Array of amounts for each platform\\n     * @param marketIds Array of market IDs for each platform\\n     */\\n    function placeBet(\\n        string calldata description,\\n        BetOutcome outcome,\\n        string[] calldata platforms,\\n        uint256[] calldata amounts,\\n        string[] calldata marketIds\\n    ) external payable {\\n        require(msg.value > 0, \\\"Bet amount must be greater than 0\\\");\\n        require(platforms.length > 0, \\\"At least one subbet required\\\");\\n        require(\\n            platforms.length == amounts.length && \\n            amounts.length == marketIds.length,\\n            \\\"Array lengths must match\\\"\\n        );\\n        \\n        // Verify total amounts match sent value\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] > 0, \\\"Each subbet amount must be greater than 0\\\");\\n            totalAmount += amounts[i];\\n        }\\n        require(totalAmount == msg.value, \\\"Total subbet amounts must equal sent value\\\");\\n        \\n        uint256 betId = _nextBetId++;\\n        \\n        // Create the main bet\\n        _betMetas.push();\\n        Bet storage newBet = _betMetas[_betMetas.length - 1];\\n        newBet.id = betId;\\n        newBet.user = msg.sender;\\n        newBet.totalAmount = msg.value;\\n        newBet.outcome = outcome;\\n        newBet.status = BetStatus.Active;\\n        newBet.createdAt = block.timestamp;\\n        newBet.description = description;\\n        newBet.totalPayout = 0;\\n        \\n        // Add subbets (all with the same outcome)\\n        for (uint256 i = 0; i < platforms.length; i++) {\\n            newBet.subBets.push(SubBet({\\n                platform: platforms[i],\\n                amount: amounts[i],\\n                marketId: marketIds[i],\\n                outcome: outcome,\\n                status: BetStatus.Active,\\n                payout: 0\\n            }));\\n            \\n            emit SubBetPlaced(betId, platforms[i], amounts[i], marketIds[i], outcome);\\n        }\\n        \\n        _userBets[msg.sender].push(_betMetas.length - 1);\\n        \\n        // Add bet amount to user's withdrawable balance\\n        userBalances[msg.sender] += msg.value;\\n        \\n        emit BetPlaced(betId, msg.sender, msg.value, platforms.length, _betMetas.length - 1);\\n    }\\n    \\n    /**\\n     * @dev Get user's bets using SIWE authentication\\n     * @param token SIWE authentication token\\n     * @param offset Pagination offset\\n     * @param count Number of bets to return\\n     */\\n    function getUserBets(\\n        bytes memory token,\\n        uint256 offset,\\n        uint256 count\\n    ) external view returns (Bet[] memory) {\\n        address user = authMsgSender(token);\\n        require(user != address(0), \\\"Invalid authentication token\\\");\\n        \\n        uint256[] memory userBetIndices = _userBets[user];\\n        \\n        if (offset >= userBetIndices.length) {\\n            return new Bet[](0);\\n        }\\n        \\n        uint256 end = offset + count;\\n        if (end > userBetIndices.length) {\\n            end = userBetIndices.length;\\n        }\\n        \\n        Bet[] memory result = new Bet[](end - offset);\\n        for (uint256 i = offset; i < end; i++) {\\n            result[i - offset] = _betMetas[userBetIndices[i]];\\n        }\\n        \\n        return result;\\n    }\\n    \\n    \\n    /**\\n     * @dev Resolve a bet and all its subbets (only owner)\\n     * @param betId The bet ID to resolve\\n     * @param won Whether the bet won or lost\\n     * @param token SIWE authentication token for owner\\n     */\\n    function resolveBet(\\n        uint256 betId,\\n        bool won,\\n        bytes memory token\\n    ) external onlyOwner(token) {\\n        require(betId > 0 && betId < _nextBetId, \\\"Invalid bet ID\\\");\\n        \\n        // Find the bet in the array\\n        uint256 betIndex = 0;\\n        bool found = false;\\n        for (uint256 i = 0; i < _betMetas.length; i++) {\\n            if (_betMetas[i].id == betId) {\\n                betIndex = i;\\n                found = true;\\n                break;\\n            }\\n        }\\n        \\n        require(found, \\\"Bet not found\\\");\\n        require(_betMetas[betIndex].status == BetStatus.Active, \\\"Bet already resolved\\\");\\n        \\n        Bet storage bet = _betMetas[betIndex];\\n        uint256 totalPayout = 0;\\n        \\n        // Resolve all subbets with 2x multiplier\\n        for (uint256 i = 0; i < bet.subBets.length; i++) {\\n            SubBet storage subBet = bet.subBets[i];\\n            \\n            if (won) {\\n                subBet.status = BetStatus.Won;\\n                subBet.payout = subBet.amount * 2; // 2x multiplier\\n                totalPayout += subBet.payout;\\n                // Add winnings to user balance (original amount already there)\\n                userBalances[bet.user] += subBet.amount; // Add only the winnings (1x the original amount)\\n            } else {\\n                subBet.status = BetStatus.Lost;\\n                subBet.payout = 0;\\n                // Remove the subbet amount from user's balance since they lost\\n                userBalances[bet.user] -= subBet.amount;\\n            }\\n        }\\n        \\n        // Update main bet\\n        bet.status = won ? BetStatus.Won : BetStatus.Lost;\\n        bet.totalPayout = totalPayout;\\n        \\n        emit BetResolved(betId, bet.status, totalPayout);\\n    }\\n    \\n    /**\\n     * @dev Cancel a bet and refund (only owner)\\n     * @param betId The bet ID to cancel\\n     * @param token SIWE authentication token for owner\\n     */\\n    function cancelBet(\\n        uint256 betId,\\n        bytes memory token\\n    ) external onlyOwner(token) {\\n        require(betId > 0 && betId < _nextBetId, \\\"Invalid bet ID\\\");\\n        \\n        // Find the bet in the array\\n        uint256 betIndex = 0;\\n        bool found = false;\\n        for (uint256 i = 0; i < _betMetas.length; i++) {\\n            if (_betMetas[i].id == betId) {\\n                betIndex = i;\\n                found = true;\\n                break;\\n            }\\n        }\\n        \\n        require(found, \\\"Bet not found\\\");\\n        require(_betMetas[betIndex].status == BetStatus.Active, \\\"Bet already resolved\\\");\\n        \\n        Bet storage bet = _betMetas[betIndex];\\n        bet.status = BetStatus.Cancelled;\\n        \\n        // Cancel all active subbets\\n        for (uint256 i = 0; i < bet.subBets.length; i++) {\\n            if (bet.subBets[i].status == BetStatus.Active) {\\n                bet.subBets[i].status = BetStatus.Cancelled;\\n            }\\n        }\\n        \\n        // User already has their bet amount in balance, no need to add again\\n        \\n        emit BetResolved(betId, bet.status, bet.totalAmount);\\n    }\\n    \\n    /**\\n     * @dev Get subbets for a specific bet (requires SIWE authentication)\\n     * @param token SIWE authentication token\\n     * @param betId The bet ID to get subbets for\\n     */\\n    function getSubBets(\\n        bytes memory token,\\n        uint256 betId\\n    ) external view returns (SubBet[] memory) {\\n        address user = authMsgSender(token);\\n        require(user != address(0), \\\"Invalid authentication token\\\");\\n        require(betId > 0 && betId < _nextBetId, \\\"Invalid bet ID\\\");\\n        \\n        // Find the bet in the array\\n        for (uint256 i = 0; i < _betMetas.length; i++) {\\n            if (_betMetas[i].id == betId) {\\n                return _betMetas[i].subBets;\\n            }\\n        }\\n        \\n        revert(\\\"Bet not found\\\");\\n    }\\n    \\n    /**\\n     * @dev Get bet summary with subbet count (requires SIWE authentication)\\n     * @param token SIWE authentication token\\n     * @param betId The bet ID to get summary for\\n     */\\n    function getBetSummary(\\n        bytes memory token,\\n        uint256 betId\\n    ) external view returns (\\n        uint256 id,\\n        address user,\\n        uint256 totalAmount,\\n        BetStatus status,\\n        uint256 createdAt,\\n        string memory description,\\n        uint256 subBetCount,\\n        uint256 totalPayout\\n    ) {\\n        address caller = authMsgSender(token);\\n        require(caller != address(0), \\\"Invalid authentication token\\\");\\n        require(betId > 0 && betId < _nextBetId, \\\"Invalid bet ID\\\");\\n        \\n        // Find the bet in the array\\n        for (uint256 i = 0; i < _betMetas.length; i++) {\\n            if (_betMetas[i].id == betId) {\\n                Bet storage bet = _betMetas[i];\\n                return (\\n                    bet.id,\\n                    bet.user,\\n                    bet.totalAmount,\\n                    bet.status,\\n                    bet.createdAt,\\n                    bet.description,\\n                    bet.subBets.length,\\n                    bet.totalPayout\\n                );\\n            }\\n        }\\n        \\n        revert(\\\"Bet not found\\\");\\n    }\\n    \\n    /**\\n     * @dev Withdraw user balance\\n     */\\n    function withdrawBalance() external {\\n        uint256 balance = userBalances[msg.sender];\\n        require(balance > 0, \\\"No balance to withdraw\\\");\\n        \\n        userBalances[msg.sender] = 0;\\n        \\n        (bool success, ) = payable(msg.sender).call{value: balance}(\\\"\\\");\\n        require(success, \\\"Withdrawal failed\\\");\\n        \\n        emit FundsWithdrawn(msg.sender, balance);\\n    }\\n    \\n    /**\\n     * @dev Owner withdraws contract funds (only owner)\\n     * @param amount Amount to withdraw\\n     * @param token SIWE authentication token for owner\\n     */\\n    function ownerWithdraw(\\n        uint256 amount,\\n        bytes memory token\\n    ) external onlyOwner(token) {\\n        require(amount <= address(this).balance, \\\"Insufficient contract balance\\\");\\n        \\n        (bool success, ) = payable(_owner).call{value: amount}(\\\"\\\");\\n        require(success, \\\"Owner withdrawal failed\\\");\\n        \\n        emit FundsWithdrawn(_owner, amount);\\n    }\\n    \\n    /**\\n     * @dev Transfer contract funds to a specified address (only owner)\\n     * @param to Address to transfer funds to\\n     * @param amount Amount to transfer\\n     * @param token SIWE authentication token for owner\\n     */\\n    function transferContractBalance(\\n        address payable to,\\n        uint256 amount,\\n        bytes memory token\\n    ) external onlyOwner(token) {\\n        require(to != address(0), \\\"Cannot transfer to zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than 0\\\");\\n        require(amount <= address(this).balance, \\\"Insufficient contract balance\\\");\\n        \\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n        \\n        emit FundsWithdrawn(to, amount);\\n    }\\n    \\n    /**\\n     * @dev Get all bet metadata (paginated) - requires SIWE authentication\\n     * @param token SIWE authentication token\\n     * @param offset Pagination offset\\n     * @param count Number of bets to return\\n     */\\n    function getAllBets(\\n        bytes memory token,\\n        uint256 offset,\\n        uint256 count\\n    ) external view returns (Bet[] memory) {\\n        address user = authMsgSender(token);\\n        require(user != address(0), \\\"Invalid authentication token\\\");\\n        if (offset >= _betMetas.length) {\\n            return new Bet[](0);\\n        }\\n        \\n        uint256 end = offset + count;\\n        if (end > _betMetas.length) {\\n            end = _betMetas.length;\\n        }\\n        \\n        Bet[] memory result = new Bet[](end - offset);\\n        for (uint256 i = offset; i < end; i++) {\\n            result[i - offset] = _betMetas[offset + i];\\n        }\\n        \\n        return result;\\n    }\\n    \\n    /**\\n     * @dev Get a specific bet by index - requires SIWE authentication\\n     * @param token SIWE authentication token\\n     * @param betIndex Index of the bet in the _betMetas array\\n     */\\n    function getBet(\\n        bytes memory token,\\n        uint256 betIndex\\n    ) external view returns (Bet memory) {\\n        address user = authMsgSender(token);\\n        require(user != address(0), \\\"Invalid authentication token\\\");\\n        require(betIndex < _betMetas.length, \\\"Bet does not exist\\\");\\n        \\n        return _betMetas[betIndex];\\n    }\\n    \\n    /**\\n     * @dev Get contract balance\\n     */\\n    function getContractBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n    \\n    /**\\n     * @dev Get total number of bets\\n     */\\n    function getTotalBets() external view returns (uint256) {\\n        return _betMetas.length;\\n    }\\n    \\n    /**\\n     * @dev Get user's total bet count\\n     * @param user User address\\n     */\\n    function getUserBetCount(address user) external view returns (uint256) {\\n        return _userBets[user].length;\\n    }\\n    \\n    /**\\n     * @dev Get owner address\\n     */\\n    function getOwner() external view returns (address) {\\n        return _owner;\\n    }\\n}\",\"keccak256\":\"0xe5187c660709d1427214d341ddf5d6f9e3431255b84811a46b772e626aa633d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604081815234620003395762003e7680380380916200002182866200033e565b843982016020928381830312620003395780516001600160401b039182821162000339570191601f9281848201121562000339578051620000628162000362565b9262000071875194856200033e565b818452878284010111620003395762000090918780850191016200037e565b83519085820182811084821117620003235785818887956080948452620000f960009586958695868552620000e0825195869388850198895280850152518092816060860152858501906200037e565b601f199c8d91011681010360608101845201826200033e565b51907301000000000000000000000000000000000000015afa3d156200031a573d90620001268262000362565b9162000135895193846200033e565b82523d838a84013e5b15620002d65787815191015190888110620002c4575b506002558151938411620002b05760019485548681811c91168015620002a5575b89821014620002915784811162000249575b5087938511600114620001e45750839495965092620001d8575b5050600019600383901b1c191690821b1781555b600455600380546001600160a01b0319163317905551613ad29081620003a48239f35b015190503880620001a1565b8493929193169685845280842093905b88821062000231575050838596971062000217575b505050811b018155620001b5565b015160001960f88460031b161c1916905538808062000209565b808785968294968601518155019501930190620001f4565b8683528883208580880160051c8201928b891062000287575b0160051c019087905b8281106200027b57505062000187565b8481550187906200026b565b9250819262000262565b634e487b7160e01b83526022600452602483fd5b90607f169062000175565b634e487b7160e01b81526041600452602490fd5b60001990890360031b1b163862000154565b865162461bcd60e51b815260048101899052601360248201527f72616e646f6d42797465733a206661696c6564000000000000000000000000006044820152606490fd5b6060906200013e565b634e487b7160e01b600052604160045260246000fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200032357604052565b6001600160401b0381116200032357601f01601f191660200190565b60005b838110620003925750506000910152565b81810151838201526020016200038156fe608080604052600436101561001357600080fd5b60003560e01c90816320ac792e146117f65750806326224c64146117b85780633bec53c61461178a5780634bb30b75146116a55780634c4e262d1461163657806350d6756c146113cf5780635fd8c710146112dd5780636f9fb98a146112c15780637f476b6f1461062a578063893d20e8146106015780639999a9c11461045b578063a3cb679d1461043d578063ad6d46161461039a578063b624010a1461035c578063c2fb26a61461031d578063c627348d14610303578063c6d87da9146101145763c908bea6146100e557600080fd5b3461010f5761010b6100ff6100f936612363565b916133ad565b60405191829182612398565b0390f35b600080fd5b3461010f57610122366122a9565b6003805490916001600160a01b0391821633811415929091836102ec575b5050506102b557811515806102aa575b61015990613770565b600091600080600554905b81811061027a575b5050610177906137d5565b61018083613017565b5082015460ff93600891821c851690600482101561021f576101a86101ad92969596156137f5565b613017565b5093808501936103009261ff001994848688541617875560009760068101985b89548110156102355784866101e2838d613135565b500154851c1690600482101561021f576102009115610205576125da565b6101cd565b86610210828d613135565b5001888a8254161790556125da565b634e487b7160e01b600052602160045260246000fd5b506002604092947fb4810c14f5f90d64272bdaaa79adbcd7a5593b0be3da5c9073f83a6e05169a16948a54901c16910154610272835180936121e9565b6020820152a2005b8361028482613017565b50541461029957610294906125da565b610164565b94506001915061017790508561016c565b506004548210610150565b60405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08185b1b1bddd95960aa1b6044820152606490fd5b0390fd5b6102f8919293506134cb565b161415838080610140565b3461010f5761010b6100ff61031736612363565b916139f0565b3461010f57600036600319011261010f5761010b6040516103488161034181612460565b03826120d2565b6040519182916020835260208301906121b7565b3461010f57602036600319011261010f576004356001600160a01b0381169081900361010f5760005260066020526020604060002054604051908152f35b3461010f576103d06103ab36612163565b91906103b56131be565b506001600160a01b03906103c8906134cb565b161515613172565b600554811015610403576103ef6103e961010b92613017565b50613318565b6040519182916020835260208301906122d8565b60405162461bcd60e51b815260206004820152601260248201527110995d08191bd95cc81b9bdd08195e1a5cdd60721b6044820152606490fd5b3461010f57600036600319011261010f576020600554604051908152f35b3461010f57606036600319011261010f576004356001600160a01b038181169182900361010f57602435906044356001600160401b03811161010f576104a5903690600401612145565b908060035416908133141592836105ea575b5050506102b55781156105a5578015610551576104d6478211156139a4565b600080808084865af16104e761262f565b501561051a5760207feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d91604051908152a2005b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152602660248201527f5472616e7366657220616d6f756e74206d75737420626520677265617465722060448201526507468616e20360d41b6064820152608490fd5b60405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74207472616e7366657220746f207a65726f2061646472657373006044820152606490fd5b6105f6919293506134cb565b1614158380806104b7565b3461010f57600036600319011261010f576003546040516001600160a01b039091168152602090f35b3461010f57608036600319011261010f576004356001600160401b03811161010f5761065a903690600401611fed565b90606036602319011261010f5761066f6123fa565b90600083807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000808210156112b2575b50600a906d04ee2d6d415b85acef8100000000808210156112a5575b50662386f26fc1000080821015611298575b506305f5e1008082101561128b575b506127108082101561127e575b506064811015611270575b1015611266575b6001820190600a602161072061070a856120f3565b9461071860405196876120d2565b8086526120f3565b602085019590601f19013687378401015b60001901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304908682156107625750600a90610731565b868660206000608088866107ca603a8d6040519384916107ae8a8401977f19457468657265756d205369676e6564204d6573736167653a0a000000000000895251809286860190612194565b8201818b8583013701878382015203601a8101845201826120d2565b51902060405190815260ff60643516848201526024356040820152604435606082015282805260015afa1561125a576000516001600160a01b03811660208401908152909261081761265f565b5061082061265f565b916000945b8686106111b7575b6032860180871161091e576034870180911161091e57605c8701811161091e5761086690605c880190610861368b8a61210e565b612808565b9460288651036111a55761087d865160011c6126f1565b9760005b875160011c811015610934576001600160ff1b038116810361091e576108b66108ad8260011b8a612723565b5160f81c612745565b60041b610ff0811660f082160361091e57600182811b01808360011b1161091e5760ff6108e86108ad60f0938d612723565b169116019060ff821161091e576109199160f81b6001600160f81b03191660001a610913828d612723565b536125da565b610881565b634e487b7160e01b600052601160045260246000fd5b50605c888a60208151910151906bffffffffffffffffffffffff19918281169160148110611190575b505060601c60208a015250605e81019101811061091e57808281108061116d575b61110e575b50610a4c610a22610a1b6109ee6109c161099e6008966125da565b6040516109aa8161209c565b600381526255524960e81b6020820152888a6128d2565b9060608d01526040516109d38161209c565b60078152662b32b939b4b7b760c91b602082015287896128d2565b9060808c0152604051610a008161209c565b8581526710da185a5b88125160c21b602082015286886128d2565b9190612877565b60a08a0152604051610a338161209c565b60058152644e6f6e636560d81b602082015284866128d2565b91908060c08a015251106110fc57610af6610ac5610a90610b2793604051610a738161209c565b6009815268125cdcdd595908105d60ba1b602082015286886128d2565b9060e08b0152604051610aa28161209c565b600f81526e45787069726174696f6e2054696d6560881b602082015285876128d2565b906101008a0152604051610ad88161209c565b600a8152694e6f74204265666f726560b01b602082015284866128d2565b90610120890152604051610b098161209c565b600a81526914995c5d595cdd08125160b21b602082015283856128d2565b90610140880152610b5b81604051610b3e8161209c565b60098152685265736f757263657360b81b602082015284866128d2565b8092915003610e70575b50505060a08401514603610e5e57835160208151910120604051610b8c8161034181612460565b6020815191012003610e4c578351835260208401516001600160a01b03918216911603610e3a57610120830151805115159081610e27575b50610e15576101008301515115610dfe57610be3610100840151612a31565b60408301525b60408201918251421015610dec5761016060408501519460608301958652019283515192610c40610c19856125a6565b94610c2760405196876120d2565b808652610c36601f19916125a6565b01602086016125bd565b6080830193845260005b85518051821015610c865790610c7b81610c6781610c81956125e9565b51885190610c7583836125e9565b526125e9565b506125da565b610c4a565b505083610cdb8760025494610cb0604051976020808a01525160a060408a015260e08901906121b7565b94516001600160a01b0316606088015251608087015251603f19868503810160a088015293906121b7565b9051918482030160c0850152815180825260208201916020808360051b8301019401926000915b838310610dbf57600080888a610d21818b03601f1981018352826120d2565b610d5660405191610d31836120b7565b848352610d486040519384926020840196876125fd565b03601f1981018352826120d2565b51906003600160981b015afa610d6a61262f565b9015610d885761010b906040519182916020835260208301906121b7565b60405162461bcd60e51b815260206004820152600f60248201526e195b98dc9e5c1d0e8819985a5b1959608a1b6044820152606490fd5b9091929394602080610ddd600193601f1986820301875289516121b7565b97019301930191939290610d02565b604051630b17115560e41b8152600490fd5b62015180420180421161091e576040830152610be9565b60405163299d02f160e01b8152600490fd5b610e319150612a31565b42111584610bc4565b6040516305cc02e160e01b8152600490fd5b60405163283d62bd60e01b8152600490fd5b60405163362c833760e01b8152600490fd5b809694929593919681956000965b8960001981011161091e576000198a018110156110ed57602d60f81b6001600160f81b0319610eae838d8d6126cb565b351614806110be575b15610f34576002810180911161091e57610ed190976125da565b95965b89811080610f11575b15610ef057610eeb906125da565b610ed4565b610f02909997919293949596996125da565b98969895949392919095610e7e565b50600560f91b6001600160f81b0319610f2b838d8d6126cb565b35161415610edd565b509093929591949796975b610f48836125a6565b95610f5660405197886120d2565b838752610f72601f19610f68866125a6565b01602089016125bd565b936000975b6000198a018a811161091e578610806110b4575b1561109b57602d60f81b6001600160f81b0319610fa9888d8f6126cb565b3516148061106c575b611056575b945b89811080611033575b15610fd557610fd0906125da565b610fb9565b9761100790610ff28a89610861989e99959697988e36908c61210e565b610ffc828b6125e9565b52610c7b818a6125e9565b97898114611024575b611019906125da565b949993929190610f77565b801561091e5760001901611010565b50600560f91b6001600160f81b031961104d838d8f6126cb565b35161415610fc2565b955060028501851161091e576002850195610fb7565b5060018601861161091e57600160fd1b6001600160f81b0319611093600189018d8f6126cb565b351614610fb2565b9695509650965096505050610160850152848080610b65565b5084891415610f8b565b5060018101811161091e57600160fd1b6001600160f81b03196110e5600184018d8d6126cb565b351614610eb7565b50909392959194979697610f3f565b604051632d2f00c360e21b8152600490fd5b8281101561098357600560f91b6001600160f81b031961112f8386886126cb565b3516146111445761113f906125da565b61110e565b90816111559161086136868861210e565b60408801526001810180911161091e57610a4c610983565b50600560f91b6001600160f81b03196111878386886126cb565b3516141561097e565b8391925060140360031b1b1616808a8061095d565b60405163acf8696960e01b8152600490fd5b94600160fd1b6001600160f81b03196111d1838a896126cb565b3516146111e7576111e1906125da565b94610825565b9195926111f894919436858461210e565b96611202846126f1565b9560005b85811080611250575b1561123f5761123a906001600160f81b031961122b828d612723565b511660001a610913828b612723565b611206565b50929590939691949750845261082d565b508951811061120f565b6040513d6000823e3d90fd5b90600101906106f5565b6064600291049301926106ee565b60049104930192876106e3565b60089104930192876106d6565b60109104930192876106c7565b60209104930192876106b5565b6040935086049050600a610699565b3461010f57600036600319011261010f57602047604051908152f35b3461010f57600036600319011261010f5733600052600760205260406000205480156113915733600052600760205260006040812055600080808084335af161132461262f565b5015611358576040519081527feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d60203392a2005b60405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b6044820152606490fd5b3461010f57606036600319011261010f5760246004358135801515810361010f576044356001600160401b03811161010f5761140f903690600401612145565b600380546001600160a01b0392908316338114159184908361161f575b5050506102b55783151580611614575b61144590613770565b6000806000600554905b8181106115e5575b5050611462906137d5565b60ff8261146e83613017565b50015460081c169060048210156115d0576101a861148c92156137f5565b5060009160068201835b815481101561156c576114a98183613135565b5090871561152d57818401805461ff001916610100179055600180830154909681881b938215600284870414171561151857848a926115139660046114ef940155612599565b9787015416600052600760205261150c6040600020918254612599565b90556125da565b611496565b8c634e487b7160e01b60005260116004526000fd5b8184611513930161020061ff001982541617905560006004820155876001809201549187015416600052600760205261150c60406000209182546127fb565b50506040935082600760ff937fb4810c14f5f90d64272bdaaa79adbcd7a5593b0be3da5c9073f83a6e05169a16976000146115c5576115b16001945b82019485613069565b01555460081c1690610272835180936121e9565b6115b16002946115a8565b86634e487b7160e01b60005260216004526000fd5b876115ef82613017565b505414611604576115ff906125da565b61144f565b9250505061146260019088611457565b50600454841061143c565b61162b919293506134cb565b16141586838161142c565b3461010f5761169661168061165361164d36612163565b906138ca565b959894604098929491979851998a998a5260018060a01b031660208a0152604089015260608801906121e9565b60808601526101008060a08701528501906121b7565b9160c084015260e08301520390f35b3461010f576116b3366122a9565b6003546001600160a01b03919082169033821415908290849083611773575b5050506102b557600080808581946116ec478311156139a4565b5af16116f661262f565b501561172e5760207feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d916003541692604051908152a2005b60405162461bcd60e51b815260206004820152601760248201527f4f776e6572207769746864726177616c206661696c65640000000000000000006044820152606490fd5b61177f919293506134cb565b1614158183866116d2565b3461010f5761010b6117a461179e36612163565b90613838565b6040519182916020835260208301906121f6565b3461010f57602036600319011261010f576004356001600160a01b0381169081900361010f5760005260076020526020604060002054604051908152f35b60a036600319011261010f576004356001600160401b03811161010f57611821903690600401611fed565b90916002602435101561010f576044356001600160401b03811161010f5761184d90369060040161201a565b9390916064356001600160401b03811161010f5761186f90369060040161201a565b90916084356001600160401b03811161010f5761189090369060040161201a565b90913415611fa157508715611f5c5782881480611f53575b15611f0e576000805b848110611e8157503403611e2957600454966118cc886125da565b600455600554600160401b811015611a665760018101806005556118ef82613017565b5050811161091e5761190090613017565b508881556001810180546001600160a01b03191633179055346002820155956003870161192f60243582613051565b805461ff00191690554260048801556001600160401b038211611a665781906119688261195f60058b0154612426565b60058b01613088565b600090601f8311600114611db857600092611dad575b50508160011b916000199060031b1c19161760058601555b6000600786015560005b888110611a7c57888833600052600660205260406000206005546000199182820191821161091e57805490600160401b821015611a665760018201808255821015611a5057600052602060002001553360005260076020526040600020611a08348254612599565b905560055490810190811161091e5760405192348452602084015260408301527fab2115bac1de808eb7fe2be0309085b11f1f42b1eb980de8352efefdbfc098e260603393a3005b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80611a8b611acc928b8a6130dc565b9290611abe611a9b84898b613007565b35611aa785888a6130dc565b92909360405197611ab78961204a565b369161210e565b86526020860152369161210e565b6040830152611ae06024356060840161311d565b60006080830152600060a0830152600687018054600160401b811015611a6657611b0f91600182018155613135565b611d975782518051906001600160401b038211611a66578190611b3c82611b368654612426565b86613088565b602090601f8311600114611d2b57600092611d20575b50508160011b916000199060031b1c19161781555b6020830151600182015560408301518051906001600160401b038211611a66578190611ba382611b9a6002870154612426565b60028701613088565b602090601f8311600114611cae57600092611ca3575b50508160011b916000199060031b1c19161760028201555b6060830151600281101561021f57611bec9060038301613051565b608083015192600484101561021f5760a0600491611c10611c9e9660038601613069565b0151910155887ff1e09724ef7fd9973aeb6cb8f9b0df6826740ff52c43ae1cea8d4042289b5353611c42838d8c6130dc565b611c87611c50868b8d613007565b35611c5c878a8c6130dc565b90611c74604051968796608088526080880191613151565b9260208601528483036040860152613151565b611c96606083016024356121dc565b0390a26125da565b6119a0565b015190508d80611bb9565b9250600284016000526020600020906000935b601f1984168510611d05576001945083601f19811610611cec575b505050811b016002820155611bd1565b015160001960f88460031b161c191690558d8080611cdc565b81810151835560209485019460019093019290910190611cc1565b015190508d80611b52565b9250836000526020600020906000935b601f1984168510611d7c576001945083601f19811610611d63575b505050811b018155611b67565b015160001960f88460031b161c191690558d8080611d56565b81810151835560209485019460019093019290910190611d3b565b634e487b7160e01b600052600060045260246000fd5b013590508a8061197e565b909250600588016000526020600020906000935b601f1984168510611e11576001945083601f19811610611df7575b505050811b016005860155611996565b0135600019600384901b60f8161c191690558a8080611de7565b81810135835560209485019460019093019201611dcc565b60405162461bcd60e51b815260206004820152602a60248201527f546f74616c2073756262657420616d6f756e7473206d75737420657175616c2060448201526973656e742076616c756560b01b6064820152608490fd5b90611e8d828688613007565b3515611eb757611eac611eb291611ea584888a613007565b3590612599565b916125da565b6118b1565b60405162461bcd60e51b815260206004820152602960248201527f456163682073756262657420616d6f756e74206d75737420626520677265617460448201526806572207468616e20360bc1b6064820152608490fd5b60405162461bcd60e51b815260206004820152601860248201527f4172726179206c656e67746873206d757374206d6174636800000000000000006044820152606490fd5b508083146118a8565b60405162461bcd60e51b815260206004820152601c60248201527f4174206c65617374206f6e6520737562626574207265717569726564000000006044820152606490fd5b62461bcd60e51b815260206004820152602160248201527f42657420616d6f756e74206d7573742062652067726561746572207468616e206044820152600360fc1b6064820152608490fd5b9181601f8401121561010f578235916001600160401b03831161010f576020838186019501011161010f57565b9181601f8401121561010f578235916001600160401b03831161010f576020808501948460051b01011161010f57565b60c081019081106001600160401b03821117611a6657604052565b60a081019081106001600160401b03821117611a6657604052565b61012081019081106001600160401b03821117611a6657604052565b604081019081106001600160401b03821117611a6657604052565b602081019081106001600160401b03821117611a6657604052565b90601f801991011681019081106001600160401b03821117611a6657604052565b6001600160401b038111611a6657601f01601f191660200190565b92919261211a826120f3565b9161212860405193846120d2565b82948184528183011161010f578281602093846000960137010152565b9080601f8301121561010f578160206121609335910161210e565b90565b604060031982011261010f57600435906001600160401b03821161010f5761218d91600401612145565b9060243590565b60005b8381106121a75750506000910152565b8181015183820152602001612197565b906020916121d081518092818552858086019101612194565b601f01601f1916010190565b90600282101561021f5752565b90600482101561021f5752565b908082519081815260208091019281808460051b8301019501936000915b8483106122245750505050505090565b9091929394958480600192601f1985820301865289519061226b612250835160c08085528401906121b7565b848401518584015260408085015190848303908501526121b7565b9161227e606080830151908401906121dc565b612290608080830151908401906121e9565b60a0809101519101529801930193019194939290612214565b90604060031983011261010f5760043591602435906001600160401b03821161010f5761216091600401612145565b908151815260018060a01b0360208301511660208201526040820151604082015261230b606083015160608301906121dc565b61231d608083015160808301906121e9565b60a082015160a082015261235561234360c08401516101208060c08601528401906121b7565b60e084015183820360e08501526121f6565b916101008091015191015290565b606060031982011261010f57600435906001600160401b03821161010f5761238d91600401612145565b906024359060443590565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106123cc5750505050505090565b90919293949584806123ea600193603f198682030187528a516122d8565b98019301930191949392906123bc565b6040519061240782612065565b6060608083828152600060208201526000604082015282808201520152565b90600182811c92168015612456575b602083101461244057565b634e487b7160e01b600052602260045260246000fd5b91607f1691612435565b9060009160019081549161247383612426565b808352928181169081156124e6575060011461248e57505050565b80929394506000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6916000925b8484106124ce57505060209250010190565b805460208585018101919091529093019281016124bc565b915050602093945060ff929192191683830152151560051b010190565b906000929180549161251483612426565b9182825260019384811690816000146125765750600114612536575b50505050565b90919394506000526020928360002092846000945b838610612562575050505001019038808080612530565b80548587018301529401938590820161254b565b9294505050602093945060ff191683830152151560051b01019038808080612530565b9190820180921161091e57565b6001600160401b038111611a665760051b60200190565b60005b8281106125cc57505050565b6060828201526020016125c0565b600019811461091e5760010190565b8051821015611a505760209160051b010190565b916126219061216094928452600060208501526080604085015260808401906121b7565b9160608184039101526121b7565b3d1561265a573d90612640826120f3565b9161264e60405193846120d2565b82523d6000602084013e565b606090565b6040519061018082018281106001600160401b03821117611a665760405281610160606091828152600060208201528260408201528280820152826080820152600060a08201528260c08201528260e08201528261010082015282610120820152826101408201520152565b90821015611a50570190565b604051906126e48261209c565b6002825260203681840137565b906126fb826120f3565b61270860405191826120d2565b8281528092612719601f19916120f3565b0190602036910137565b908151811015611a50570160200190565b60ff16600a019060ff821161091e57565b60f881901b6001600160f81b031916600360fc1b811015806127ed575b6127d957606160f81b811015806127cb575b6127bc57604160f81b81101590816127ad575b506127925750600090565b60ff6127a060401992612734565b160160ff811161091e5790565b602360f91b1015905038612787565b5060ff6127a060601992612734565b50603360f91b811115612774565b5060ff602f1991160160ff811161091e5790565b50603960f81b811115612762565b9190820391821161091e57565b92909261281d61281885856127fb565b6126f1565b91845b8481108061286d575b156128645761285f906001600160f81b03196128458286612723565b511661091361285489846127fb565b9160001a9187612723565b612820565b50935050905090565b5082518110612829565b90600091825b81518410156128cd57600a9081810291818304149015171561091e576128a38483612723565b5160f81c90602f19820191821161091e576128c7916128c191612599565b936125da565b9261287d565b925050565b909392919382945b818610612967575b505b808510612900579161086185926128fc94369161210e565b9190565b9193600560f91b6001600160f81b031961291b8386866126cb565b3516146129325761292b906125da565b93916128e4565b93610861859261294394369161210e565b60018301809311612952579190565b60246000634e487b7160e01b81526011600452fd5b94909291906001600160f81b0319601d60f91b816129868488876126cb565b3516146129a15750612997906125da565b94929091926128da565b956129b682856108619694959636898961210e565b90815160208093012091815191012003612a1857506129d4906125da565b9382851090816129fd575b506129ed575b8391826128e2565b926129f7906125da565b926129e5565b600160fd1b9150612a0f8685856126cb565b351614386129df565b9450505050604051612a29816120b7565b600081529190565b90604051612a3e8161209c565b60048082526020368184013760005b81811080612f97575b15612a8657612a81906001600160f81b0319612a728288612723565b511660001a6109138286612723565b612a4d565b5092612a979161ffff928391612877565b1692612aa16126d7565b926005805b6007811080612f8d575b15612b04576001600160f81b0319612ac88287612723565b5160041983019116828211612aef5790610913612aea939260001a9189612723565b612aa6565b60118a634e487b7160e01b6000525260246000fd5b50909194612b169460ff958691612877565b1694612b206126d7565b9560085b600a811080612f83575b15612b82576001600160f81b0319612b468289612723565b5160071983019116828211612b6d5790610913612b68939260001a918b612723565b612b24565b60118c634e487b7160e01b6000525260246000fd5b5091939690612b92819497612877565b1690612b9c6126d7565b96600b5b600d811080612f79575b15612bfe576001600160f81b0319612bc2828a612723565b51600a1983019116828211612be95790610913612be4939260001a918c612723565b612ba0565b60118d634e487b7160e01b6000525260246000fd5b509193612c1081989992949699612877565b1697612c1a6126d7565b97600e5b6010811080612f6f575b15612c7c576001600160f81b0319612c40828b612723565b51600d1983019116828211612c675790610913612c62939260001a918d612723565b612c1e565b60118e634e487b7160e01b6000525260246000fd5b50612c8e819395979a92949699612877565b1692612c986126d7565b9860115b6013811080612f65575b15612cfa576001600160f81b0319612cbe828c612723565b5160101983019116828211612ce557610913612ce093928e9260001a92612723565b612c9c565b60118f634e487b7160e01b6000525260246000fd5b509295999194988691949850612d12909b979b612877565b16986000936107b25b818b821610612f0c5750604051906101808083018381106001600160401b03821117612ef757604052368337612d55601f91828452612fce565b15612ee757601d6020830152929190925b806040850152601e6060850152806080850152601e60a08501528060c08501528060e0850152601e61010085015280610120850152601e610140850152610160840152600192839283945b612e5d575b505050505060001901838111612e4857610e1091612de691612ddf63ffffffff96879216612fb4565b1690612599565b9102918216918203612e3357603c91612dfe91612599565b9202928316928303612e1e57506121609291612e1991612599565b612599565b601190634e487b7160e01b6000525260246000fd5b601183634e487b7160e01b6000525260246000fd5b601185634e487b7160e01b6000525260246000fd5b90919293958b871682811015612ee057600019018c8111612ecb57600c8d82161015612eb657612eac91621fffe0612ddf612ea69363ffffffff9283918a1b1688015116612fb4565b96612fa1565b9392919083612db1565b60328b634e487b7160e01b6000525260246000fd5b60118b634e487b7160e01b6000525260246000fd5b5095612db6565b601c602083015292919092612d66565b60418b634e487b7160e01b6000525260246000fd5b94612f1686612fce565b15612f4d576301e285008101809111612f3857612f339095612fa1565b612d1b565b601189634e487b7160e01b6000525260246000fd5b6301e133808101809111612f3857612f339095612fa1565b5089518110612ca6565b5088518110612c28565b5087518110612baa565b5086518110612b2e565b5084518110612ab0565b5084518110612a56565b61ffff80911690811461091e5760010190565b906201518063ffffffff8093160291821691820361091e57565b600381166130015761ffff809116816064820616612ffa57610190900616612ff557600190565b600090565b5050600190565b50600090565b9190811015611a505760051b0190565b600554811015611a5057600560005260031b7f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00190600090565b90600281101561021f5760ff80198354169116179055565b90600481101561021f5761ff0082549160081b169061ff001916179055565b90601f811161309657505050565b600091825260208220906020601f850160051c830194106130d2575b601f0160051c01915b8281106130c757505050565b8181556001016130bb565b90925082906130b2565b9190811015611a505760051b81013590601e198136030182121561010f5701908135916001600160401b03831161010f57602001823603811361010f579190565b600282101561021f5752565b600482101561021f5752565b8054821015611a50576000526005602060002091020190600090565b908060209392818452848401376000828201840152601f01601f1916010190565b1561317957565b60405162461bcd60e51b815260206004820152601c60248201527f496e76616c69642061757468656e7469636174696f6e20746f6b656e000000006044820152606490fd5b604051906131cb82612080565b816101006000918281528260208201528260408201528260608201528260808201528260a0820152606060c0820152606060e08201520152565b9061320f826125a6565b61321c60405191826120d2565b828152809261322d601f19916125a6565b019060005b82811061323e57505050565b6020906132496131be565b82828501015201613232565b908154613261816125a6565b92604093613271855191826120d2565b828152809460208092019260005281600020906000935b85851061329757505050505050565b60058460019284516132a88161204a565b85516132b881610341818b612503565b8152848701548382015285516132d5816103418160028c01612503565b86820152613300600388015460ff906132f38282166060860161311d565b60081c1660808301613129565b600487015460a0820152815201930194019391613288565b9060405161332581612080565b610100600782948054845260018060a01b0360018201541660208501526002810154604085015261337260ff60038301546133658282166060890161311d565b60081c1660808601613129565b600481015460a0850152604051613390816103418160058601612503565b60c08501526133a160068201613255565b60e08501520154910152565b6001600160a01b03906133bf906134cb565b16916133cc831515613172565b60009283526020926006845260408120936040518095869183825491828152019185528385209385905b8282106134b15750505061340c925003856120d2565b835183101561349b57506134209082612599565b908251808311613493575b5061343e61343982846127fb565b613205565b92815b83811061344f575050505090565b80610c7b61346961346361348e94866125e9565b51613017565b5061347d61347787856127fb565b91613318565b613487828a6125e9565b52876125e9565b613441565b91503861342b565b92505050604051906134ac826120b7565b815290565b855484526001958601958a955093810193909101906133f6565b80516020820120600052600060205260ff604060002054166134f05761216090613502565b6040516313d4cf0960e31b8152600490fd5b805115613001576135116123fa565b50610d4860025461354660409182519061352a826120b7565b60009485938385809552865192839160209a8b840196876125fd565b51906004600160981b015afa9261355b61262f565b93156136fa57835184019080820181868403126136f657818601516001600160401b03968782116136f2579060a09101809403126136f65783519061359f82612065565b828401518781116136f25781846135b89287010161372e565b8252838501516001600160a01b039790969088881688036136ee5784840197885260608601519587850196875260808101518281116136ea5784876135ff9284010161372e565b606086015260a0810151908282116136ea57019280603f850112156136e357858401519161362c836125a6565b946136398a5196876120d2565b838652898887019460051b820101948386116136e7578a8201945b8686106136be5750505050505050608082015251818151910120908351906136868261367f81612460565b03836120d2565b8151910120036136ad5751421161369d5750511690565b51630b17115560e41b8152600490fd5b815163283d62bd60e01b8152600490fd5b85518481116136e3578a916136d8878f859488010161372e565b815201950194613654565b8280fd5b80fd5b8380fd5b5080fd5b8680fd5b8480fd5b606491519062461bcd60e51b82526004820152600f60248201526e191958dc9e5c1d0e8819985a5b1959608a1b6044820152fd5b81601f8201121561010f578051613744816120f3565b9261375260405194856120d2565b8184526020828401011161010f576121609160208085019101612194565b1561377757565b60405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a590818995d08125160921b6044820152606490fd5b60609060208152600d60208201526c10995d081b9bdd08199bdd5b99609a1b60408201520190565b156137dc57565b60405162461bcd60e51b8152806102e8600482016137ad565b156137fc57565b60405162461bcd60e51b815260206004820152601460248201527310995d08185b1c9958591e481c995cdbdb1d995960621b6044820152606490fd5b61384e906001600160a01b03906103c8906134cb565b801515806138bf575b61386090613770565b6005549060005b8281106138875760405162461bcd60e51b8152806102e8600482016137ad565b8161389182613017565b5054146138a6576138a1906125da565b613867565b6121609250600691506138b890613017565b5001613255565b506004548110613857565b6001600160a01b0391906138e39083906103c8906134cb565b80151580613999575b6138f590613770565b6000916005918254935b84811061391f5760405162461bcd60e51b8152806102e8600482016137ad565b8161392982613017565b50541461393e57613939906125da565b6138ff565b905061394c91929350613017565b50928354916001850154169360028101549360ff600383015460081c169360048301549360068401549261399460078601549399989796956103416040518094819301612503565b929190565b5060045481106138ec565b156139ab57565b60405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152606490fd5b909190613a09906001600160a01b03906103c8906134cb565b6005549081831015613a8657613a1f9083612599565b90808211613a7e575b50613a3661343983836127fb565b91805b828110613a465750505090565b80610c7b613a5a6101a8613a799486612599565b50613a6861347786856127fb565b613a7282896125e9565b52866125e9565b613a39565b905038613a28565b505050604051613a95816120b7565b600081529056fea26469706673582212201fb0f667e8430bb8a82c1cef0be75b5e6c2d7f273f0207f3e7127b4f74dd835d64736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816320ac792e146117f65750806326224c64146117b85780633bec53c61461178a5780634bb30b75146116a55780634c4e262d1461163657806350d6756c146113cf5780635fd8c710146112dd5780636f9fb98a146112c15780637f476b6f1461062a578063893d20e8146106015780639999a9c11461045b578063a3cb679d1461043d578063ad6d46161461039a578063b624010a1461035c578063c2fb26a61461031d578063c627348d14610303578063c6d87da9146101145763c908bea6146100e557600080fd5b3461010f5761010b6100ff6100f936612363565b916133ad565b60405191829182612398565b0390f35b600080fd5b3461010f57610122366122a9565b6003805490916001600160a01b0391821633811415929091836102ec575b5050506102b557811515806102aa575b61015990613770565b600091600080600554905b81811061027a575b5050610177906137d5565b61018083613017565b5082015460ff93600891821c851690600482101561021f576101a86101ad92969596156137f5565b613017565b5093808501936103009261ff001994848688541617875560009760068101985b89548110156102355784866101e2838d613135565b500154851c1690600482101561021f576102009115610205576125da565b6101cd565b86610210828d613135565b5001888a8254161790556125da565b634e487b7160e01b600052602160045260246000fd5b506002604092947fb4810c14f5f90d64272bdaaa79adbcd7a5593b0be3da5c9073f83a6e05169a16948a54901c16910154610272835180936121e9565b6020820152a2005b8361028482613017565b50541461029957610294906125da565b610164565b94506001915061017790508561016c565b506004548210610150565b60405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08185b1b1bddd95960aa1b6044820152606490fd5b0390fd5b6102f8919293506134cb565b161415838080610140565b3461010f5761010b6100ff61031736612363565b916139f0565b3461010f57600036600319011261010f5761010b6040516103488161034181612460565b03826120d2565b6040519182916020835260208301906121b7565b3461010f57602036600319011261010f576004356001600160a01b0381169081900361010f5760005260066020526020604060002054604051908152f35b3461010f576103d06103ab36612163565b91906103b56131be565b506001600160a01b03906103c8906134cb565b161515613172565b600554811015610403576103ef6103e961010b92613017565b50613318565b6040519182916020835260208301906122d8565b60405162461bcd60e51b815260206004820152601260248201527110995d08191bd95cc81b9bdd08195e1a5cdd60721b6044820152606490fd5b3461010f57600036600319011261010f576020600554604051908152f35b3461010f57606036600319011261010f576004356001600160a01b038181169182900361010f57602435906044356001600160401b03811161010f576104a5903690600401612145565b908060035416908133141592836105ea575b5050506102b55781156105a5578015610551576104d6478211156139a4565b600080808084865af16104e761262f565b501561051a5760207feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d91604051908152a2005b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152602660248201527f5472616e7366657220616d6f756e74206d75737420626520677265617465722060448201526507468616e20360d41b6064820152608490fd5b60405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74207472616e7366657220746f207a65726f2061646472657373006044820152606490fd5b6105f6919293506134cb565b1614158380806104b7565b3461010f57600036600319011261010f576003546040516001600160a01b039091168152602090f35b3461010f57608036600319011261010f576004356001600160401b03811161010f5761065a903690600401611fed565b90606036602319011261010f5761066f6123fa565b90600083807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000808210156112b2575b50600a906d04ee2d6d415b85acef8100000000808210156112a5575b50662386f26fc1000080821015611298575b506305f5e1008082101561128b575b506127108082101561127e575b506064811015611270575b1015611266575b6001820190600a602161072061070a856120f3565b9461071860405196876120d2565b8086526120f3565b602085019590601f19013687378401015b60001901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304908682156107625750600a90610731565b868660206000608088866107ca603a8d6040519384916107ae8a8401977f19457468657265756d205369676e6564204d6573736167653a0a000000000000895251809286860190612194565b8201818b8583013701878382015203601a8101845201826120d2565b51902060405190815260ff60643516848201526024356040820152604435606082015282805260015afa1561125a576000516001600160a01b03811660208401908152909261081761265f565b5061082061265f565b916000945b8686106111b7575b6032860180871161091e576034870180911161091e57605c8701811161091e5761086690605c880190610861368b8a61210e565b612808565b9460288651036111a55761087d865160011c6126f1565b9760005b875160011c811015610934576001600160ff1b038116810361091e576108b66108ad8260011b8a612723565b5160f81c612745565b60041b610ff0811660f082160361091e57600182811b01808360011b1161091e5760ff6108e86108ad60f0938d612723565b169116019060ff821161091e576109199160f81b6001600160f81b03191660001a610913828d612723565b536125da565b610881565b634e487b7160e01b600052601160045260246000fd5b50605c888a60208151910151906bffffffffffffffffffffffff19918281169160148110611190575b505060601c60208a015250605e81019101811061091e57808281108061116d575b61110e575b50610a4c610a22610a1b6109ee6109c161099e6008966125da565b6040516109aa8161209c565b600381526255524960e81b6020820152888a6128d2565b9060608d01526040516109d38161209c565b60078152662b32b939b4b7b760c91b602082015287896128d2565b9060808c0152604051610a008161209c565b8581526710da185a5b88125160c21b602082015286886128d2565b9190612877565b60a08a0152604051610a338161209c565b60058152644e6f6e636560d81b602082015284866128d2565b91908060c08a015251106110fc57610af6610ac5610a90610b2793604051610a738161209c565b6009815268125cdcdd595908105d60ba1b602082015286886128d2565b9060e08b0152604051610aa28161209c565b600f81526e45787069726174696f6e2054696d6560881b602082015285876128d2565b906101008a0152604051610ad88161209c565b600a8152694e6f74204265666f726560b01b602082015284866128d2565b90610120890152604051610b098161209c565b600a81526914995c5d595cdd08125160b21b602082015283856128d2565b90610140880152610b5b81604051610b3e8161209c565b60098152685265736f757263657360b81b602082015284866128d2565b8092915003610e70575b50505060a08401514603610e5e57835160208151910120604051610b8c8161034181612460565b6020815191012003610e4c578351835260208401516001600160a01b03918216911603610e3a57610120830151805115159081610e27575b50610e15576101008301515115610dfe57610be3610100840151612a31565b60408301525b60408201918251421015610dec5761016060408501519460608301958652019283515192610c40610c19856125a6565b94610c2760405196876120d2565b808652610c36601f19916125a6565b01602086016125bd565b6080830193845260005b85518051821015610c865790610c7b81610c6781610c81956125e9565b51885190610c7583836125e9565b526125e9565b506125da565b610c4a565b505083610cdb8760025494610cb0604051976020808a01525160a060408a015260e08901906121b7565b94516001600160a01b0316606088015251608087015251603f19868503810160a088015293906121b7565b9051918482030160c0850152815180825260208201916020808360051b8301019401926000915b838310610dbf57600080888a610d21818b03601f1981018352826120d2565b610d5660405191610d31836120b7565b848352610d486040519384926020840196876125fd565b03601f1981018352826120d2565b51906003600160981b015afa610d6a61262f565b9015610d885761010b906040519182916020835260208301906121b7565b60405162461bcd60e51b815260206004820152600f60248201526e195b98dc9e5c1d0e8819985a5b1959608a1b6044820152606490fd5b9091929394602080610ddd600193601f1986820301875289516121b7565b97019301930191939290610d02565b604051630b17115560e41b8152600490fd5b62015180420180421161091e576040830152610be9565b60405163299d02f160e01b8152600490fd5b610e319150612a31565b42111584610bc4565b6040516305cc02e160e01b8152600490fd5b60405163283d62bd60e01b8152600490fd5b60405163362c833760e01b8152600490fd5b809694929593919681956000965b8960001981011161091e576000198a018110156110ed57602d60f81b6001600160f81b0319610eae838d8d6126cb565b351614806110be575b15610f34576002810180911161091e57610ed190976125da565b95965b89811080610f11575b15610ef057610eeb906125da565b610ed4565b610f02909997919293949596996125da565b98969895949392919095610e7e565b50600560f91b6001600160f81b0319610f2b838d8d6126cb565b35161415610edd565b509093929591949796975b610f48836125a6565b95610f5660405197886120d2565b838752610f72601f19610f68866125a6565b01602089016125bd565b936000975b6000198a018a811161091e578610806110b4575b1561109b57602d60f81b6001600160f81b0319610fa9888d8f6126cb565b3516148061106c575b611056575b945b89811080611033575b15610fd557610fd0906125da565b610fb9565b9761100790610ff28a89610861989e99959697988e36908c61210e565b610ffc828b6125e9565b52610c7b818a6125e9565b97898114611024575b611019906125da565b949993929190610f77565b801561091e5760001901611010565b50600560f91b6001600160f81b031961104d838d8f6126cb565b35161415610fc2565b955060028501851161091e576002850195610fb7565b5060018601861161091e57600160fd1b6001600160f81b0319611093600189018d8f6126cb565b351614610fb2565b9695509650965096505050610160850152848080610b65565b5084891415610f8b565b5060018101811161091e57600160fd1b6001600160f81b03196110e5600184018d8d6126cb565b351614610eb7565b50909392959194979697610f3f565b604051632d2f00c360e21b8152600490fd5b8281101561098357600560f91b6001600160f81b031961112f8386886126cb565b3516146111445761113f906125da565b61110e565b90816111559161086136868861210e565b60408801526001810180911161091e57610a4c610983565b50600560f91b6001600160f81b03196111878386886126cb565b3516141561097e565b8391925060140360031b1b1616808a8061095d565b60405163acf8696960e01b8152600490fd5b94600160fd1b6001600160f81b03196111d1838a896126cb565b3516146111e7576111e1906125da565b94610825565b9195926111f894919436858461210e565b96611202846126f1565b9560005b85811080611250575b1561123f5761123a906001600160f81b031961122b828d612723565b511660001a610913828b612723565b611206565b50929590939691949750845261082d565b508951811061120f565b6040513d6000823e3d90fd5b90600101906106f5565b6064600291049301926106ee565b60049104930192876106e3565b60089104930192876106d6565b60109104930192876106c7565b60209104930192876106b5565b6040935086049050600a610699565b3461010f57600036600319011261010f57602047604051908152f35b3461010f57600036600319011261010f5733600052600760205260406000205480156113915733600052600760205260006040812055600080808084335af161132461262f565b5015611358576040519081527feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d60203392a2005b60405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b6044820152606490fd5b3461010f57606036600319011261010f5760246004358135801515810361010f576044356001600160401b03811161010f5761140f903690600401612145565b600380546001600160a01b0392908316338114159184908361161f575b5050506102b55783151580611614575b61144590613770565b6000806000600554905b8181106115e5575b5050611462906137d5565b60ff8261146e83613017565b50015460081c169060048210156115d0576101a861148c92156137f5565b5060009160068201835b815481101561156c576114a98183613135565b5090871561152d57818401805461ff001916610100179055600180830154909681881b938215600284870414171561151857848a926115139660046114ef940155612599565b9787015416600052600760205261150c6040600020918254612599565b90556125da565b611496565b8c634e487b7160e01b60005260116004526000fd5b8184611513930161020061ff001982541617905560006004820155876001809201549187015416600052600760205261150c60406000209182546127fb565b50506040935082600760ff937fb4810c14f5f90d64272bdaaa79adbcd7a5593b0be3da5c9073f83a6e05169a16976000146115c5576115b16001945b82019485613069565b01555460081c1690610272835180936121e9565b6115b16002946115a8565b86634e487b7160e01b60005260216004526000fd5b876115ef82613017565b505414611604576115ff906125da565b61144f565b9250505061146260019088611457565b50600454841061143c565b61162b919293506134cb565b16141586838161142c565b3461010f5761169661168061165361164d36612163565b906138ca565b959894604098929491979851998a998a5260018060a01b031660208a0152604089015260608801906121e9565b60808601526101008060a08701528501906121b7565b9160c084015260e08301520390f35b3461010f576116b3366122a9565b6003546001600160a01b03919082169033821415908290849083611773575b5050506102b557600080808581946116ec478311156139a4565b5af16116f661262f565b501561172e5760207feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d916003541692604051908152a2005b60405162461bcd60e51b815260206004820152601760248201527f4f776e6572207769746864726177616c206661696c65640000000000000000006044820152606490fd5b61177f919293506134cb565b1614158183866116d2565b3461010f5761010b6117a461179e36612163565b90613838565b6040519182916020835260208301906121f6565b3461010f57602036600319011261010f576004356001600160a01b0381169081900361010f5760005260076020526020604060002054604051908152f35b60a036600319011261010f576004356001600160401b03811161010f57611821903690600401611fed565b90916002602435101561010f576044356001600160401b03811161010f5761184d90369060040161201a565b9390916064356001600160401b03811161010f5761186f90369060040161201a565b90916084356001600160401b03811161010f5761189090369060040161201a565b90913415611fa157508715611f5c5782881480611f53575b15611f0e576000805b848110611e8157503403611e2957600454966118cc886125da565b600455600554600160401b811015611a665760018101806005556118ef82613017565b5050811161091e5761190090613017565b508881556001810180546001600160a01b03191633179055346002820155956003870161192f60243582613051565b805461ff00191690554260048801556001600160401b038211611a665781906119688261195f60058b0154612426565b60058b01613088565b600090601f8311600114611db857600092611dad575b50508160011b916000199060031b1c19161760058601555b6000600786015560005b888110611a7c57888833600052600660205260406000206005546000199182820191821161091e57805490600160401b821015611a665760018201808255821015611a5057600052602060002001553360005260076020526040600020611a08348254612599565b905560055490810190811161091e5760405192348452602084015260408301527fab2115bac1de808eb7fe2be0309085b11f1f42b1eb980de8352efefdbfc098e260603393a3005b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80611a8b611acc928b8a6130dc565b9290611abe611a9b84898b613007565b35611aa785888a6130dc565b92909360405197611ab78961204a565b369161210e565b86526020860152369161210e565b6040830152611ae06024356060840161311d565b60006080830152600060a0830152600687018054600160401b811015611a6657611b0f91600182018155613135565b611d975782518051906001600160401b038211611a66578190611b3c82611b368654612426565b86613088565b602090601f8311600114611d2b57600092611d20575b50508160011b916000199060031b1c19161781555b6020830151600182015560408301518051906001600160401b038211611a66578190611ba382611b9a6002870154612426565b60028701613088565b602090601f8311600114611cae57600092611ca3575b50508160011b916000199060031b1c19161760028201555b6060830151600281101561021f57611bec9060038301613051565b608083015192600484101561021f5760a0600491611c10611c9e9660038601613069565b0151910155887ff1e09724ef7fd9973aeb6cb8f9b0df6826740ff52c43ae1cea8d4042289b5353611c42838d8c6130dc565b611c87611c50868b8d613007565b35611c5c878a8c6130dc565b90611c74604051968796608088526080880191613151565b9260208601528483036040860152613151565b611c96606083016024356121dc565b0390a26125da565b6119a0565b015190508d80611bb9565b9250600284016000526020600020906000935b601f1984168510611d05576001945083601f19811610611cec575b505050811b016002820155611bd1565b015160001960f88460031b161c191690558d8080611cdc565b81810151835560209485019460019093019290910190611cc1565b015190508d80611b52565b9250836000526020600020906000935b601f1984168510611d7c576001945083601f19811610611d63575b505050811b018155611b67565b015160001960f88460031b161c191690558d8080611d56565b81810151835560209485019460019093019290910190611d3b565b634e487b7160e01b600052600060045260246000fd5b013590508a8061197e565b909250600588016000526020600020906000935b601f1984168510611e11576001945083601f19811610611df7575b505050811b016005860155611996565b0135600019600384901b60f8161c191690558a8080611de7565b81810135835560209485019460019093019201611dcc565b60405162461bcd60e51b815260206004820152602a60248201527f546f74616c2073756262657420616d6f756e7473206d75737420657175616c2060448201526973656e742076616c756560b01b6064820152608490fd5b90611e8d828688613007565b3515611eb757611eac611eb291611ea584888a613007565b3590612599565b916125da565b6118b1565b60405162461bcd60e51b815260206004820152602960248201527f456163682073756262657420616d6f756e74206d75737420626520677265617460448201526806572207468616e20360bc1b6064820152608490fd5b60405162461bcd60e51b815260206004820152601860248201527f4172726179206c656e67746873206d757374206d6174636800000000000000006044820152606490fd5b508083146118a8565b60405162461bcd60e51b815260206004820152601c60248201527f4174206c65617374206f6e6520737562626574207265717569726564000000006044820152606490fd5b62461bcd60e51b815260206004820152602160248201527f42657420616d6f756e74206d7573742062652067726561746572207468616e206044820152600360fc1b6064820152608490fd5b9181601f8401121561010f578235916001600160401b03831161010f576020838186019501011161010f57565b9181601f8401121561010f578235916001600160401b03831161010f576020808501948460051b01011161010f57565b60c081019081106001600160401b03821117611a6657604052565b60a081019081106001600160401b03821117611a6657604052565b61012081019081106001600160401b03821117611a6657604052565b604081019081106001600160401b03821117611a6657604052565b602081019081106001600160401b03821117611a6657604052565b90601f801991011681019081106001600160401b03821117611a6657604052565b6001600160401b038111611a6657601f01601f191660200190565b92919261211a826120f3565b9161212860405193846120d2565b82948184528183011161010f578281602093846000960137010152565b9080601f8301121561010f578160206121609335910161210e565b90565b604060031982011261010f57600435906001600160401b03821161010f5761218d91600401612145565b9060243590565b60005b8381106121a75750506000910152565b8181015183820152602001612197565b906020916121d081518092818552858086019101612194565b601f01601f1916010190565b90600282101561021f5752565b90600482101561021f5752565b908082519081815260208091019281808460051b8301019501936000915b8483106122245750505050505090565b9091929394958480600192601f1985820301865289519061226b612250835160c08085528401906121b7565b848401518584015260408085015190848303908501526121b7565b9161227e606080830151908401906121dc565b612290608080830151908401906121e9565b60a0809101519101529801930193019194939290612214565b90604060031983011261010f5760043591602435906001600160401b03821161010f5761216091600401612145565b908151815260018060a01b0360208301511660208201526040820151604082015261230b606083015160608301906121dc565b61231d608083015160808301906121e9565b60a082015160a082015261235561234360c08401516101208060c08601528401906121b7565b60e084015183820360e08501526121f6565b916101008091015191015290565b606060031982011261010f57600435906001600160401b03821161010f5761238d91600401612145565b906024359060443590565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106123cc5750505050505090565b90919293949584806123ea600193603f198682030187528a516122d8565b98019301930191949392906123bc565b6040519061240782612065565b6060608083828152600060208201526000604082015282808201520152565b90600182811c92168015612456575b602083101461244057565b634e487b7160e01b600052602260045260246000fd5b91607f1691612435565b9060009160019081549161247383612426565b808352928181169081156124e6575060011461248e57505050565b80929394506000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6916000925b8484106124ce57505060209250010190565b805460208585018101919091529093019281016124bc565b915050602093945060ff929192191683830152151560051b010190565b906000929180549161251483612426565b9182825260019384811690816000146125765750600114612536575b50505050565b90919394506000526020928360002092846000945b838610612562575050505001019038808080612530565b80548587018301529401938590820161254b565b9294505050602093945060ff191683830152151560051b01019038808080612530565b9190820180921161091e57565b6001600160401b038111611a665760051b60200190565b60005b8281106125cc57505050565b6060828201526020016125c0565b600019811461091e5760010190565b8051821015611a505760209160051b010190565b916126219061216094928452600060208501526080604085015260808401906121b7565b9160608184039101526121b7565b3d1561265a573d90612640826120f3565b9161264e60405193846120d2565b82523d6000602084013e565b606090565b6040519061018082018281106001600160401b03821117611a665760405281610160606091828152600060208201528260408201528280820152826080820152600060a08201528260c08201528260e08201528261010082015282610120820152826101408201520152565b90821015611a50570190565b604051906126e48261209c565b6002825260203681840137565b906126fb826120f3565b61270860405191826120d2565b8281528092612719601f19916120f3565b0190602036910137565b908151811015611a50570160200190565b60ff16600a019060ff821161091e57565b60f881901b6001600160f81b031916600360fc1b811015806127ed575b6127d957606160f81b811015806127cb575b6127bc57604160f81b81101590816127ad575b506127925750600090565b60ff6127a060401992612734565b160160ff811161091e5790565b602360f91b1015905038612787565b5060ff6127a060601992612734565b50603360f91b811115612774565b5060ff602f1991160160ff811161091e5790565b50603960f81b811115612762565b9190820391821161091e57565b92909261281d61281885856127fb565b6126f1565b91845b8481108061286d575b156128645761285f906001600160f81b03196128458286612723565b511661091361285489846127fb565b9160001a9187612723565b612820565b50935050905090565b5082518110612829565b90600091825b81518410156128cd57600a9081810291818304149015171561091e576128a38483612723565b5160f81c90602f19820191821161091e576128c7916128c191612599565b936125da565b9261287d565b925050565b909392919382945b818610612967575b505b808510612900579161086185926128fc94369161210e565b9190565b9193600560f91b6001600160f81b031961291b8386866126cb565b3516146129325761292b906125da565b93916128e4565b93610861859261294394369161210e565b60018301809311612952579190565b60246000634e487b7160e01b81526011600452fd5b94909291906001600160f81b0319601d60f91b816129868488876126cb565b3516146129a15750612997906125da565b94929091926128da565b956129b682856108619694959636898961210e565b90815160208093012091815191012003612a1857506129d4906125da565b9382851090816129fd575b506129ed575b8391826128e2565b926129f7906125da565b926129e5565b600160fd1b9150612a0f8685856126cb565b351614386129df565b9450505050604051612a29816120b7565b600081529190565b90604051612a3e8161209c565b60048082526020368184013760005b81811080612f97575b15612a8657612a81906001600160f81b0319612a728288612723565b511660001a6109138286612723565b612a4d565b5092612a979161ffff928391612877565b1692612aa16126d7565b926005805b6007811080612f8d575b15612b04576001600160f81b0319612ac88287612723565b5160041983019116828211612aef5790610913612aea939260001a9189612723565b612aa6565b60118a634e487b7160e01b6000525260246000fd5b50909194612b169460ff958691612877565b1694612b206126d7565b9560085b600a811080612f83575b15612b82576001600160f81b0319612b468289612723565b5160071983019116828211612b6d5790610913612b68939260001a918b612723565b612b24565b60118c634e487b7160e01b6000525260246000fd5b5091939690612b92819497612877565b1690612b9c6126d7565b96600b5b600d811080612f79575b15612bfe576001600160f81b0319612bc2828a612723565b51600a1983019116828211612be95790610913612be4939260001a918c612723565b612ba0565b60118d634e487b7160e01b6000525260246000fd5b509193612c1081989992949699612877565b1697612c1a6126d7565b97600e5b6010811080612f6f575b15612c7c576001600160f81b0319612c40828b612723565b51600d1983019116828211612c675790610913612c62939260001a918d612723565b612c1e565b60118e634e487b7160e01b6000525260246000fd5b50612c8e819395979a92949699612877565b1692612c986126d7565b9860115b6013811080612f65575b15612cfa576001600160f81b0319612cbe828c612723565b5160101983019116828211612ce557610913612ce093928e9260001a92612723565b612c9c565b60118f634e487b7160e01b6000525260246000fd5b509295999194988691949850612d12909b979b612877565b16986000936107b25b818b821610612f0c5750604051906101808083018381106001600160401b03821117612ef757604052368337612d55601f91828452612fce565b15612ee757601d6020830152929190925b806040850152601e6060850152806080850152601e60a08501528060c08501528060e0850152601e61010085015280610120850152601e610140850152610160840152600192839283945b612e5d575b505050505060001901838111612e4857610e1091612de691612ddf63ffffffff96879216612fb4565b1690612599565b9102918216918203612e3357603c91612dfe91612599565b9202928316928303612e1e57506121609291612e1991612599565b612599565b601190634e487b7160e01b6000525260246000fd5b601183634e487b7160e01b6000525260246000fd5b601185634e487b7160e01b6000525260246000fd5b90919293958b871682811015612ee057600019018c8111612ecb57600c8d82161015612eb657612eac91621fffe0612ddf612ea69363ffffffff9283918a1b1688015116612fb4565b96612fa1565b9392919083612db1565b60328b634e487b7160e01b6000525260246000fd5b60118b634e487b7160e01b6000525260246000fd5b5095612db6565b601c602083015292919092612d66565b60418b634e487b7160e01b6000525260246000fd5b94612f1686612fce565b15612f4d576301e285008101809111612f3857612f339095612fa1565b612d1b565b601189634e487b7160e01b6000525260246000fd5b6301e133808101809111612f3857612f339095612fa1565b5089518110612ca6565b5088518110612c28565b5087518110612baa565b5086518110612b2e565b5084518110612ab0565b5084518110612a56565b61ffff80911690811461091e5760010190565b906201518063ffffffff8093160291821691820361091e57565b600381166130015761ffff809116816064820616612ffa57610190900616612ff557600190565b600090565b5050600190565b50600090565b9190811015611a505760051b0190565b600554811015611a5057600560005260031b7f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00190600090565b90600281101561021f5760ff80198354169116179055565b90600481101561021f5761ff0082549160081b169061ff001916179055565b90601f811161309657505050565b600091825260208220906020601f850160051c830194106130d2575b601f0160051c01915b8281106130c757505050565b8181556001016130bb565b90925082906130b2565b9190811015611a505760051b81013590601e198136030182121561010f5701908135916001600160401b03831161010f57602001823603811361010f579190565b600282101561021f5752565b600482101561021f5752565b8054821015611a50576000526005602060002091020190600090565b908060209392818452848401376000828201840152601f01601f1916010190565b1561317957565b60405162461bcd60e51b815260206004820152601c60248201527f496e76616c69642061757468656e7469636174696f6e20746f6b656e000000006044820152606490fd5b604051906131cb82612080565b816101006000918281528260208201528260408201528260608201528260808201528260a0820152606060c0820152606060e08201520152565b9061320f826125a6565b61321c60405191826120d2565b828152809261322d601f19916125a6565b019060005b82811061323e57505050565b6020906132496131be565b82828501015201613232565b908154613261816125a6565b92604093613271855191826120d2565b828152809460208092019260005281600020906000935b85851061329757505050505050565b60058460019284516132a88161204a565b85516132b881610341818b612503565b8152848701548382015285516132d5816103418160028c01612503565b86820152613300600388015460ff906132f38282166060860161311d565b60081c1660808301613129565b600487015460a0820152815201930194019391613288565b9060405161332581612080565b610100600782948054845260018060a01b0360018201541660208501526002810154604085015261337260ff60038301546133658282166060890161311d565b60081c1660808601613129565b600481015460a0850152604051613390816103418160058601612503565b60c08501526133a160068201613255565b60e08501520154910152565b6001600160a01b03906133bf906134cb565b16916133cc831515613172565b60009283526020926006845260408120936040518095869183825491828152019185528385209385905b8282106134b15750505061340c925003856120d2565b835183101561349b57506134209082612599565b908251808311613493575b5061343e61343982846127fb565b613205565b92815b83811061344f575050505090565b80610c7b61346961346361348e94866125e9565b51613017565b5061347d61347787856127fb565b91613318565b613487828a6125e9565b52876125e9565b613441565b91503861342b565b92505050604051906134ac826120b7565b815290565b855484526001958601958a955093810193909101906133f6565b80516020820120600052600060205260ff604060002054166134f05761216090613502565b6040516313d4cf0960e31b8152600490fd5b805115613001576135116123fa565b50610d4860025461354660409182519061352a826120b7565b60009485938385809552865192839160209a8b840196876125fd565b51906004600160981b015afa9261355b61262f565b93156136fa57835184019080820181868403126136f657818601516001600160401b03968782116136f2579060a09101809403126136f65783519061359f82612065565b828401518781116136f25781846135b89287010161372e565b8252838501516001600160a01b039790969088881688036136ee5784840197885260608601519587850196875260808101518281116136ea5784876135ff9284010161372e565b606086015260a0810151908282116136ea57019280603f850112156136e357858401519161362c836125a6565b946136398a5196876120d2565b838652898887019460051b820101948386116136e7578a8201945b8686106136be5750505050505050608082015251818151910120908351906136868261367f81612460565b03836120d2565b8151910120036136ad5751421161369d5750511690565b51630b17115560e41b8152600490fd5b815163283d62bd60e01b8152600490fd5b85518481116136e3578a916136d8878f859488010161372e565b815201950194613654565b8280fd5b80fd5b8380fd5b5080fd5b8680fd5b8480fd5b606491519062461bcd60e51b82526004820152600f60248201526e191958dc9e5c1d0e8819985a5b1959608a1b6044820152fd5b81601f8201121561010f578051613744816120f3565b9261375260405194856120d2565b8184526020828401011161010f576121609160208085019101612194565b1561377757565b60405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a590818995d08125160921b6044820152606490fd5b60609060208152600d60208201526c10995d081b9bdd08199bdd5b99609a1b60408201520190565b156137dc57565b60405162461bcd60e51b8152806102e8600482016137ad565b156137fc57565b60405162461bcd60e51b815260206004820152601460248201527310995d08185b1c9958591e481c995cdbdb1d995960621b6044820152606490fd5b61384e906001600160a01b03906103c8906134cb565b801515806138bf575b61386090613770565b6005549060005b8281106138875760405162461bcd60e51b8152806102e8600482016137ad565b8161389182613017565b5054146138a6576138a1906125da565b613867565b6121609250600691506138b890613017565b5001613255565b506004548110613857565b6001600160a01b0391906138e39083906103c8906134cb565b80151580613999575b6138f590613770565b6000916005918254935b84811061391f5760405162461bcd60e51b8152806102e8600482016137ad565b8161392982613017565b50541461393e57613939906125da565b6138ff565b905061394c91929350613017565b50928354916001850154169360028101549360ff600383015460081c169360048301549360068401549261399460078601549399989796956103416040518094819301612503565b929190565b5060045481106138ec565b156139ab57565b60405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152606490fd5b909190613a09906001600160a01b03906103c8906134cb565b6005549081831015613a8657613a1f9083612599565b90808211613a7e575b50613a3661343983836127fb565b91805b828110613a465750505090565b80610c7b613a5a6101a8613a799486612599565b50613a6861347786856127fb565b613a7282896125e9565b52866125e9565b613a39565b905038613a28565b505050604051613a95816120b7565b600081529056fea26469706673582212201fb0f667e8430bb8a82c1cef0be75b5e6c2d7f273f0207f3e7127b4f74dd835d64736f6c63430008140033",
  "devdoc": {
    "details": "A simple betting smart contract with SiweAuth integration for Oasis Sapphire Users can place bets, contract acts as escrow, and owner can manage funds",
    "kind": "dev",
    "methods": {
      "cancelBet(uint256,bytes)": {
        "details": "Cancel a bet and refund (only owner)",
        "params": {
          "betId": "The bet ID to cancel",
          "token": "SIWE authentication token for owner"
        }
      },
      "domain()": {
        "returns": {
          "_0": "The domain string"
        }
      },
      "getAllBets(bytes,uint256,uint256)": {
        "details": "Get all bet metadata (paginated) - requires SIWE authentication",
        "params": {
          "count": "Number of bets to return",
          "offset": "Pagination offset",
          "token": "SIWE authentication token"
        }
      },
      "getBet(bytes,uint256)": {
        "details": "Get a specific bet by index - requires SIWE authentication",
        "params": {
          "betIndex": "Index of the bet in the _betMetas array",
          "token": "SIWE authentication token"
        }
      },
      "getBetSummary(bytes,uint256)": {
        "details": "Get bet summary with subbet count (requires SIWE authentication)",
        "params": {
          "betId": "The bet ID to get summary for",
          "token": "SIWE authentication token"
        }
      },
      "getContractBalance()": {
        "details": "Get contract balance"
      },
      "getOwner()": {
        "details": "Get owner address"
      },
      "getSubBets(bytes,uint256)": {
        "details": "Get subbets for a specific bet (requires SIWE authentication)",
        "params": {
          "betId": "The bet ID to get subbets for",
          "token": "SIWE authentication token"
        }
      },
      "getTotalBets()": {
        "details": "Get total number of bets"
      },
      "getUserBetCount(address)": {
        "details": "Get user's total bet count",
        "params": {
          "user": "User address"
        }
      },
      "getUserBets(bytes,uint256,uint256)": {
        "details": "Get user's bets using SIWE authentication",
        "params": {
          "count": "Number of bets to return",
          "offset": "Pagination offset",
          "token": "SIWE authentication token"
        }
      },
      "login(string,(bytes32,bytes32,uint256))": {
        "params": {
          "sig": "The signature of the SIWE message",
          "siweMsg": "The signed SIWE message"
        },
        "returns": {
          "_0": "The encrypted authentication token"
        }
      },
      "ownerWithdraw(uint256,bytes)": {
        "details": "Owner withdraws contract funds (only owner)",
        "params": {
          "amount": "Amount to withdraw",
          "token": "SIWE authentication token for owner"
        }
      },
      "placeBet(string,uint8,string[],uint256[],string[])": {
        "details": "Place a bet with subbets across multiple platforms",
        "params": {
          "amounts": "Array of amounts for each platform",
          "description": "Description of the bet (private)",
          "marketIds": "Array of market IDs for each platform",
          "outcome": "Overall outcome for all subbets (YES/NO)",
          "platforms": "Array of platform names"
        }
      },
      "resolveBet(uint256,bool,bytes)": {
        "details": "Resolve a bet and all its subbets (only owner)",
        "params": {
          "betId": "The bet ID to resolve",
          "token": "SIWE authentication token for owner",
          "won": "Whether the bet won or lost"
        }
      },
      "transferContractBalance(address,uint256,bytes)": {
        "details": "Transfer contract funds to a specified address (only owner)",
        "params": {
          "amount": "Amount to transfer",
          "to": "Address to transfer funds to",
          "token": "SIWE authentication token for owner"
        }
      },
      "withdrawBalance()": {
        "details": "Withdraw user balance"
      }
    },
    "title": "SimpleBet",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "A13e_RevokedAuthToken()": [
        {
          "notice": "The authentication token was revoked"
        }
      ],
      "SiweAuth_AddressMismatch()": [
        {
          "notice": "User address in the SIWE message does not match the message signer's address"
        }
      ],
      "SiweAuth_ChainIdMismatch()": [
        {
          "notice": "Chain ID in the SIWE message does not match the actual chain ID"
        }
      ],
      "SiweAuth_DomainMismatch()": [
        {
          "notice": "Domain in the SIWE message does not match the domain of a dApp"
        }
      ],
      "SiweAuth_Expired()": [
        {
          "notice": "Validity of the authentication token or the Expires value in the SIWE message is in the past"
        }
      ],
      "SiweAuth_NotBeforeInFuture()": [
        {
          "notice": "The Not before value in the SIWE message is still in the future"
        }
      ],
      "SiweParser_InvalidAddressLength()": [
        {
          "notice": "Invalid length of the hex-encoded address"
        }
      ],
      "SiweParser_InvalidNonce()": [
        {
          "notice": "Invalid length of the nonce"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "domain()": {
        "notice": "Return the domain associated with the dApp."
      },
      "login(string,(bytes32,bytes32,uint256))": {
        "notice": "Login using a SIWE message and signature"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2352,
        "contract": "contracts/SimpleBet.sol:SimpleBet",
        "label": "_revokedAuthTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 2436,
        "contract": "contracts/SimpleBet.sol:SimpleBet",
        "label": "_domain",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2439,
        "contract": "contracts/SimpleBet.sol:SimpleBet",
        "label": "_authTokenEncKey",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 4309,
        "contract": "contracts/SimpleBet.sol:SimpleBet",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4312,
        "contract": "contracts/SimpleBet.sol:SimpleBet",
        "label": "_nextBetId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4362,
        "contract": "contracts/SimpleBet.sol:SimpleBet",
        "label": "_betMetas",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(Bet)4358_storage)dyn_storage"
      },
      {
        "astId": 4367,
        "contract": "contracts/SimpleBet.sol:SimpleBet",
        "label": "_userBets",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4371,
        "contract": "contracts/SimpleBet.sol:SimpleBet",
        "label": "userBalances",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Bet)4358_storage)dyn_storage": {
        "base": "t_struct(Bet)4358_storage",
        "encoding": "dynamic_array",
        "label": "struct SimpleBet.Bet[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(SubBet)4335_storage)dyn_storage": {
        "base": "t_struct(SubBet)4335_storage",
        "encoding": "dynamic_array",
        "label": "struct SimpleBet.SubBet[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(BetOutcome)4315": {
        "encoding": "inplace",
        "label": "enum SimpleBet.BetOutcome",
        "numberOfBytes": "1"
      },
      "t_enum(BetStatus)4320": {
        "encoding": "inplace",
        "label": "enum SimpleBet.BetStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bet)4358_storage": {
        "encoding": "inplace",
        "label": "struct SimpleBet.Bet",
        "members": [
          {
            "astId": 4337,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4339,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "user",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4341,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "totalAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4344,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "outcome",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(BetOutcome)4315"
          },
          {
            "astId": 4347,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "status",
            "offset": 1,
            "slot": "3",
            "type": "t_enum(BetStatus)4320"
          },
          {
            "astId": 4349,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "createdAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4351,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "description",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 4355,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "subBets",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_struct(SubBet)4335_storage)dyn_storage"
          },
          {
            "astId": 4357,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "totalPayout",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(SubBet)4335_storage": {
        "encoding": "inplace",
        "label": "struct SimpleBet.SubBet",
        "members": [
          {
            "astId": 4322,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "platform",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4324,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4326,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "marketId",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 4329,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "outcome",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(BetOutcome)4315"
          },
          {
            "astId": 4332,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "status",
            "offset": 1,
            "slot": "3",
            "type": "t_enum(BetStatus)4320"
          },
          {
            "astId": 4334,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "payout",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}