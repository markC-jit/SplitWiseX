// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class FeeCharged extends ethereum.Event {
  get params(): FeeCharged__Params {
    return new FeeCharged__Params(this);
  }
}

export class FeeCharged__Params {
  _event: FeeCharged;

  constructor(event: FeeCharged) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewAdmin extends ethereum.Event {
  get params(): NewAdmin__Params {
    return new NewAdmin__Params(this);
  }
}

export class NewAdmin__Params {
  _event: NewAdmin;

  constructor(event: NewAdmin) {
    this._event = event;
  }

  get newAdminAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get admin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewOperator extends ethereum.Event {
  get params(): NewOperator__Params {
    return new NewOperator__Params(this);
  }
}

export class NewOperator__Params {
  _event: NewOperator;

  constructor(event: NewOperator) {
    this._event = event;
  }

  get newOperatorAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get admin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OrderCancelled extends ethereum.Event {
  get params(): OrderCancelled__Params {
    return new OrderCancelled__Params(this);
  }
}

export class OrderCancelled__Params {
  _event: OrderCancelled;

  constructor(event: OrderCancelled) {
    this._event = event;
  }

  get orderHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class OrderFilled extends ethereum.Event {
  get params(): OrderFilled__Params {
    return new OrderFilled__Params(this);
  }
}

export class OrderFilled__Params {
  _event: OrderFilled;

  constructor(event: OrderFilled) {
    this._event = event;
  }

  get orderHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get maker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get taker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get makerAssetId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get takerAssetId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get makerAmountFilled(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get takerAmountFilled(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class OrdersMatched extends ethereum.Event {
  get params(): OrdersMatched__Params {
    return new OrdersMatched__Params(this);
  }
}

export class OrdersMatched__Params {
  _event: OrdersMatched;

  constructor(event: OrdersMatched) {
    this._event = event;
  }

  get takerOrderHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get takerOrderMaker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get makerAssetId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get takerAssetId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get makerAmountFilled(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get takerAmountFilled(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ProxyFactoryUpdated extends ethereum.Event {
  get params(): ProxyFactoryUpdated__Params {
    return new ProxyFactoryUpdated__Params(this);
  }
}

export class ProxyFactoryUpdated__Params {
  _event: ProxyFactoryUpdated;

  constructor(event: ProxyFactoryUpdated) {
    this._event = event;
  }

  get oldProxyFactory(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newProxyFactory(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemovedAdmin extends ethereum.Event {
  get params(): RemovedAdmin__Params {
    return new RemovedAdmin__Params(this);
  }
}

export class RemovedAdmin__Params {
  _event: RemovedAdmin;

  constructor(event: RemovedAdmin) {
    this._event = event;
  }

  get removedAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get admin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemovedOperator extends ethereum.Event {
  get params(): RemovedOperator__Params {
    return new RemovedOperator__Params(this);
  }
}

export class RemovedOperator__Params {
  _event: RemovedOperator;

  constructor(event: RemovedOperator) {
    this._event = event;
  }

  get removedOperator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get admin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SafeFactoryUpdated extends ethereum.Event {
  get params(): SafeFactoryUpdated__Params {
    return new SafeFactoryUpdated__Params(this);
  }
}

export class SafeFactoryUpdated__Params {
  _event: SafeFactoryUpdated;

  constructor(event: SafeFactoryUpdated) {
    this._event = event;
  }

  get oldSafeFactory(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newSafeFactory(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenRegistered extends ethereum.Event {
  get params(): TokenRegistered__Params {
    return new TokenRegistered__Params(this);
  }
}

export class TokenRegistered__Params {
  _event: TokenRegistered;

  constructor(event: TokenRegistered) {
    this._event = event;
  }

  get token0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get token1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get conditionId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class TradingPaused extends ethereum.Event {
  get params(): TradingPaused__Params {
    return new TradingPaused__Params(this);
  }
}

export class TradingPaused__Params {
  _event: TradingPaused;

  constructor(event: TradingPaused) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TradingUnpaused extends ethereum.Event {
  get params(): TradingUnpaused__Params {
    return new TradingUnpaused__Params(this);
  }
}

export class TradingUnpaused__Params {
  _event: TradingUnpaused;

  constructor(event: TradingUnpaused) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Exchange__getOrderStatusResultValue0Struct extends ethereum.Tuple {
  get isFilledOrCancelled(): boolean {
    return this[0].toBoolean();
  }

  get remaining(): BigInt {
    return this[1].toBigInt();
  }
}

export class Exchange__hashOrderInputOrderStruct extends ethereum.Tuple {
  get salt(): BigInt {
    return this[0].toBigInt();
  }

  get maker(): Address {
    return this[1].toAddress();
  }

  get signer(): Address {
    return this[2].toAddress();
  }

  get taker(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get makerAmount(): BigInt {
    return this[5].toBigInt();
  }

  get takerAmount(): BigInt {
    return this[6].toBigInt();
  }

  get expiration(): BigInt {
    return this[7].toBigInt();
  }

  get nonce(): BigInt {
    return this[8].toBigInt();
  }

  get feeRateBps(): BigInt {
    return this[9].toBigInt();
  }

  get side(): i32 {
    return this[10].toI32();
  }

  get signatureType(): i32 {
    return this[11].toI32();
  }

  get signature(): Bytes {
    return this[12].toBytes();
  }
}

export class Exchange__orderStatusResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getIsFilledOrCancelled(): boolean {
    return this.value0;
  }

  getRemaining(): BigInt {
    return this.value1;
  }
}

export class Exchange__registryResult {
  value0: BigInt;
  value1: Bytes;

  constructor(value0: BigInt, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    return map;
  }

  getComplement(): BigInt {
    return this.value0;
  }

  getConditionId(): Bytes {
    return this.value1;
  }
}

export class Exchange extends ethereum.SmartContract {
  static bind(address: Address): Exchange {
    return new Exchange("Exchange", address);
  }

  admins(param0: Address): BigInt {
    let result = super.call("admins", "admins(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_admins(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("admins", "admins(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  domainSeparator(): Bytes {
    let result = super.call(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_domainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getCollateral(): Address {
    let result = super.call("getCollateral", "getCollateral():(address)", []);

    return result[0].toAddress();
  }

  try_getCollateral(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCollateral",
      "getCollateral():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getComplement(token: BigInt): BigInt {
    let result = super.call(
      "getComplement",
      "getComplement(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(token)],
    );

    return result[0].toBigInt();
  }

  try_getComplement(token: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getComplement",
      "getComplement(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getConditionId(token: BigInt): Bytes {
    let result = super.call(
      "getConditionId",
      "getConditionId(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(token)],
    );

    return result[0].toBytes();
  }

  try_getConditionId(token: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getConditionId",
      "getConditionId(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getCtf(): Address {
    let result = super.call("getCtf", "getCtf():(address)", []);

    return result[0].toAddress();
  }

  try_getCtf(): ethereum.CallResult<Address> {
    let result = super.tryCall("getCtf", "getCtf():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMaxFeeRate(): BigInt {
    let result = super.call("getMaxFeeRate", "getMaxFeeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getMaxFeeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxFeeRate",
      "getMaxFeeRate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOrderStatus(orderHash: Bytes): Exchange__getOrderStatusResultValue0Struct {
    let result = super.call(
      "getOrderStatus",
      "getOrderStatus(bytes32):((bool,uint256))",
      [ethereum.Value.fromFixedBytes(orderHash)],
    );

    return changetype<Exchange__getOrderStatusResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getOrderStatus(
    orderHash: Bytes,
  ): ethereum.CallResult<Exchange__getOrderStatusResultValue0Struct> {
    let result = super.tryCall(
      "getOrderStatus",
      "getOrderStatus(bytes32):((bool,uint256))",
      [ethereum.Value.fromFixedBytes(orderHash)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Exchange__getOrderStatusResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getPolyProxyFactoryImplementation(): Address {
    let result = super.call(
      "getPolyProxyFactoryImplementation",
      "getPolyProxyFactoryImplementation():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getPolyProxyFactoryImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPolyProxyFactoryImplementation",
      "getPolyProxyFactoryImplementation():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPolyProxyWalletAddress(_addr: Address): Address {
    let result = super.call(
      "getPolyProxyWalletAddress",
      "getPolyProxyWalletAddress(address):(address)",
      [ethereum.Value.fromAddress(_addr)],
    );

    return result[0].toAddress();
  }

  try_getPolyProxyWalletAddress(_addr: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPolyProxyWalletAddress",
      "getPolyProxyWalletAddress(address):(address)",
      [ethereum.Value.fromAddress(_addr)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProxyFactory(): Address {
    let result = super.call(
      "getProxyFactory",
      "getProxyFactory():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getProxyFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getProxyFactory",
      "getProxyFactory():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSafeAddress(_addr: Address): Address {
    let result = super.call(
      "getSafeAddress",
      "getSafeAddress(address):(address)",
      [ethereum.Value.fromAddress(_addr)],
    );

    return result[0].toAddress();
  }

  try_getSafeAddress(_addr: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSafeAddress",
      "getSafeAddress(address):(address)",
      [ethereum.Value.fromAddress(_addr)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSafeFactory(): Address {
    let result = super.call("getSafeFactory", "getSafeFactory():(address)", []);

    return result[0].toAddress();
  }

  try_getSafeFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSafeFactory",
      "getSafeFactory():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSafeFactoryImplementation(): Address {
    let result = super.call(
      "getSafeFactoryImplementation",
      "getSafeFactoryImplementation():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getSafeFactoryImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSafeFactoryImplementation",
      "getSafeFactoryImplementation():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hashOrder(order: Exchange__hashOrderInputOrderStruct): Bytes {
    let result = super.call(
      "hashOrder",
      "hashOrder((uint256,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint8,bytes)):(bytes32)",
      [ethereum.Value.fromTuple(order)],
    );

    return result[0].toBytes();
  }

  try_hashOrder(
    order: Exchange__hashOrderInputOrderStruct,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashOrder",
      "hashOrder((uint256,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint8,bytes)):(bytes32)",
      [ethereum.Value.fromTuple(order)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isAdmin(usr: Address): boolean {
    let result = super.call("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(usr),
    ]);

    return result[0].toBoolean();
  }

  try_isAdmin(usr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(usr),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOperator(usr: Address): boolean {
    let result = super.call("isOperator", "isOperator(address):(bool)", [
      ethereum.Value.fromAddress(usr),
    ]);

    return result[0].toBoolean();
  }

  try_isOperator(usr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOperator", "isOperator(address):(bool)", [
      ethereum.Value.fromAddress(usr),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidNonce(usr: Address, nonce: BigInt): boolean {
    let result = super.call(
      "isValidNonce",
      "isValidNonce(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(usr),
        ethereum.Value.fromUnsignedBigInt(nonce),
      ],
    );

    return result[0].toBoolean();
  }

  try_isValidNonce(usr: Address, nonce: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidNonce",
      "isValidNonce(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(usr),
        ethereum.Value.fromUnsignedBigInt(nonce),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  operators(param0: Address): BigInt {
    let result = super.call("operators", "operators(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_operators(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("operators", "operators(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orderStatus(param0: Bytes): Exchange__orderStatusResult {
    let result = super.call(
      "orderStatus",
      "orderStatus(bytes32):(bool,uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return new Exchange__orderStatusResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
    );
  }

  try_orderStatus(
    param0: Bytes,
  ): ethereum.CallResult<Exchange__orderStatusResult> {
    let result = super.tryCall(
      "orderStatus",
      "orderStatus(bytes32):(bool,uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Exchange__orderStatusResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
      ),
    );
  }

  parentCollectionId(): Bytes {
    let result = super.call(
      "parentCollectionId",
      "parentCollectionId():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_parentCollectionId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "parentCollectionId",
      "parentCollectionId():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proxyFactory(): Address {
    let result = super.call("proxyFactory", "proxyFactory():(address)", []);

    return result[0].toAddress();
  }

  try_proxyFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("proxyFactory", "proxyFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registry(param0: BigInt): Exchange__registryResult {
    let result = super.call("registry", "registry(uint256):(uint256,bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return new Exchange__registryResult(
      result[0].toBigInt(),
      result[1].toBytes(),
    );
  }

  try_registry(param0: BigInt): ethereum.CallResult<Exchange__registryResult> {
    let result = super.tryCall(
      "registry",
      "registry(uint256):(uint256,bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Exchange__registryResult(value[0].toBigInt(), value[1].toBytes()),
    );
  }

  safeFactory(): Address {
    let result = super.call("safeFactory", "safeFactory():(address)", []);

    return result[0].toAddress();
  }

  try_safeFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("safeFactory", "safeFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ctf(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _proxyFactory(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _safeFactory(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAdminCall extends ethereum.Call {
  get inputs(): AddAdminCall__Inputs {
    return new AddAdminCall__Inputs(this);
  }

  get outputs(): AddAdminCall__Outputs {
    return new AddAdminCall__Outputs(this);
  }
}

export class AddAdminCall__Inputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }

  get admin_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAdminCall__Outputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }
}

export class AddOperatorCall extends ethereum.Call {
  get inputs(): AddOperatorCall__Inputs {
    return new AddOperatorCall__Inputs(this);
  }

  get outputs(): AddOperatorCall__Outputs {
    return new AddOperatorCall__Outputs(this);
  }
}

export class AddOperatorCall__Inputs {
  _call: AddOperatorCall;

  constructor(call: AddOperatorCall) {
    this._call = call;
  }

  get operator_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddOperatorCall__Outputs {
  _call: AddOperatorCall;

  constructor(call: AddOperatorCall) {
    this._call = call;
  }
}

export class CancelOrderCall extends ethereum.Call {
  get inputs(): CancelOrderCall__Inputs {
    return new CancelOrderCall__Inputs(this);
  }

  get outputs(): CancelOrderCall__Outputs {
    return new CancelOrderCall__Outputs(this);
  }
}

export class CancelOrderCall__Inputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }

  get order(): CancelOrderCallOrderStruct {
    return changetype<CancelOrderCallOrderStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class CancelOrderCall__Outputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }
}

export class CancelOrderCallOrderStruct extends ethereum.Tuple {
  get salt(): BigInt {
    return this[0].toBigInt();
  }

  get maker(): Address {
    return this[1].toAddress();
  }

  get signer(): Address {
    return this[2].toAddress();
  }

  get taker(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get makerAmount(): BigInt {
    return this[5].toBigInt();
  }

  get takerAmount(): BigInt {
    return this[6].toBigInt();
  }

  get expiration(): BigInt {
    return this[7].toBigInt();
  }

  get nonce(): BigInt {
    return this[8].toBigInt();
  }

  get feeRateBps(): BigInt {
    return this[9].toBigInt();
  }

  get side(): i32 {
    return this[10].toI32();
  }

  get signatureType(): i32 {
    return this[11].toI32();
  }

  get signature(): Bytes {
    return this[12].toBytes();
  }
}

export class CancelOrdersCall extends ethereum.Call {
  get inputs(): CancelOrdersCall__Inputs {
    return new CancelOrdersCall__Inputs(this);
  }

  get outputs(): CancelOrdersCall__Outputs {
    return new CancelOrdersCall__Outputs(this);
  }
}

export class CancelOrdersCall__Inputs {
  _call: CancelOrdersCall;

  constructor(call: CancelOrdersCall) {
    this._call = call;
  }

  get orders(): Array<CancelOrdersCallOrdersStruct> {
    return this._call.inputValues[0].value.toTupleArray<CancelOrdersCallOrdersStruct>();
  }
}

export class CancelOrdersCall__Outputs {
  _call: CancelOrdersCall;

  constructor(call: CancelOrdersCall) {
    this._call = call;
  }
}

export class CancelOrdersCallOrdersStruct extends ethereum.Tuple {
  get salt(): BigInt {
    return this[0].toBigInt();
  }

  get maker(): Address {
    return this[1].toAddress();
  }

  get signer(): Address {
    return this[2].toAddress();
  }

  get taker(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get makerAmount(): BigInt {
    return this[5].toBigInt();
  }

  get takerAmount(): BigInt {
    return this[6].toBigInt();
  }

  get expiration(): BigInt {
    return this[7].toBigInt();
  }

  get nonce(): BigInt {
    return this[8].toBigInt();
  }

  get feeRateBps(): BigInt {
    return this[9].toBigInt();
  }

  get side(): i32 {
    return this[10].toI32();
  }

  get signatureType(): i32 {
    return this[11].toI32();
  }

  get signature(): Bytes {
    return this[12].toBytes();
  }
}

export class FillOrderCall extends ethereum.Call {
  get inputs(): FillOrderCall__Inputs {
    return new FillOrderCall__Inputs(this);
  }

  get outputs(): FillOrderCall__Outputs {
    return new FillOrderCall__Outputs(this);
  }
}

export class FillOrderCall__Inputs {
  _call: FillOrderCall;

  constructor(call: FillOrderCall) {
    this._call = call;
  }

  get order(): FillOrderCallOrderStruct {
    return changetype<FillOrderCallOrderStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get fillAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FillOrderCall__Outputs {
  _call: FillOrderCall;

  constructor(call: FillOrderCall) {
    this._call = call;
  }
}

export class FillOrderCallOrderStruct extends ethereum.Tuple {
  get salt(): BigInt {
    return this[0].toBigInt();
  }

  get maker(): Address {
    return this[1].toAddress();
  }

  get signer(): Address {
    return this[2].toAddress();
  }

  get taker(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get makerAmount(): BigInt {
    return this[5].toBigInt();
  }

  get takerAmount(): BigInt {
    return this[6].toBigInt();
  }

  get expiration(): BigInt {
    return this[7].toBigInt();
  }

  get nonce(): BigInt {
    return this[8].toBigInt();
  }

  get feeRateBps(): BigInt {
    return this[9].toBigInt();
  }

  get side(): i32 {
    return this[10].toI32();
  }

  get signatureType(): i32 {
    return this[11].toI32();
  }

  get signature(): Bytes {
    return this[12].toBytes();
  }
}

export class FillOrdersCall extends ethereum.Call {
  get inputs(): FillOrdersCall__Inputs {
    return new FillOrdersCall__Inputs(this);
  }

  get outputs(): FillOrdersCall__Outputs {
    return new FillOrdersCall__Outputs(this);
  }
}

export class FillOrdersCall__Inputs {
  _call: FillOrdersCall;

  constructor(call: FillOrdersCall) {
    this._call = call;
  }

  get orders(): Array<FillOrdersCallOrdersStruct> {
    return this._call.inputValues[0].value.toTupleArray<FillOrdersCallOrdersStruct>();
  }

  get fillAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class FillOrdersCall__Outputs {
  _call: FillOrdersCall;

  constructor(call: FillOrdersCall) {
    this._call = call;
  }
}

export class FillOrdersCallOrdersStruct extends ethereum.Tuple {
  get salt(): BigInt {
    return this[0].toBigInt();
  }

  get maker(): Address {
    return this[1].toAddress();
  }

  get signer(): Address {
    return this[2].toAddress();
  }

  get taker(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get makerAmount(): BigInt {
    return this[5].toBigInt();
  }

  get takerAmount(): BigInt {
    return this[6].toBigInt();
  }

  get expiration(): BigInt {
    return this[7].toBigInt();
  }

  get nonce(): BigInt {
    return this[8].toBigInt();
  }

  get feeRateBps(): BigInt {
    return this[9].toBigInt();
  }

  get side(): i32 {
    return this[10].toI32();
  }

  get signatureType(): i32 {
    return this[11].toI32();
  }

  get signature(): Bytes {
    return this[12].toBytes();
  }
}

export class IncrementNonceCall extends ethereum.Call {
  get inputs(): IncrementNonceCall__Inputs {
    return new IncrementNonceCall__Inputs(this);
  }

  get outputs(): IncrementNonceCall__Outputs {
    return new IncrementNonceCall__Outputs(this);
  }
}

export class IncrementNonceCall__Inputs {
  _call: IncrementNonceCall;

  constructor(call: IncrementNonceCall) {
    this._call = call;
  }
}

export class IncrementNonceCall__Outputs {
  _call: IncrementNonceCall;

  constructor(call: IncrementNonceCall) {
    this._call = call;
  }
}

export class MatchOrdersCall extends ethereum.Call {
  get inputs(): MatchOrdersCall__Inputs {
    return new MatchOrdersCall__Inputs(this);
  }

  get outputs(): MatchOrdersCall__Outputs {
    return new MatchOrdersCall__Outputs(this);
  }
}

export class MatchOrdersCall__Inputs {
  _call: MatchOrdersCall;

  constructor(call: MatchOrdersCall) {
    this._call = call;
  }

  get takerOrder(): MatchOrdersCallTakerOrderStruct {
    return changetype<MatchOrdersCallTakerOrderStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get makerOrders(): Array<MatchOrdersCallMakerOrdersStruct> {
    return this._call.inputValues[1].value.toTupleArray<MatchOrdersCallMakerOrdersStruct>();
  }

  get takerFillAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get makerFillAmounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class MatchOrdersCall__Outputs {
  _call: MatchOrdersCall;

  constructor(call: MatchOrdersCall) {
    this._call = call;
  }
}

export class MatchOrdersCallTakerOrderStruct extends ethereum.Tuple {
  get salt(): BigInt {
    return this[0].toBigInt();
  }

  get maker(): Address {
    return this[1].toAddress();
  }

  get signer(): Address {
    return this[2].toAddress();
  }

  get taker(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get makerAmount(): BigInt {
    return this[5].toBigInt();
  }

  get takerAmount(): BigInt {
    return this[6].toBigInt();
  }

  get expiration(): BigInt {
    return this[7].toBigInt();
  }

  get nonce(): BigInt {
    return this[8].toBigInt();
  }

  get feeRateBps(): BigInt {
    return this[9].toBigInt();
  }

  get side(): i32 {
    return this[10].toI32();
  }

  get signatureType(): i32 {
    return this[11].toI32();
  }

  get signature(): Bytes {
    return this[12].toBytes();
  }
}

export class MatchOrdersCallMakerOrdersStruct extends ethereum.Tuple {
  get salt(): BigInt {
    return this[0].toBigInt();
  }

  get maker(): Address {
    return this[1].toAddress();
  }

  get signer(): Address {
    return this[2].toAddress();
  }

  get taker(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get makerAmount(): BigInt {
    return this[5].toBigInt();
  }

  get takerAmount(): BigInt {
    return this[6].toBigInt();
  }

  get expiration(): BigInt {
    return this[7].toBigInt();
  }

  get nonce(): BigInt {
    return this[8].toBigInt();
  }

  get feeRateBps(): BigInt {
    return this[9].toBigInt();
  }

  get side(): i32 {
    return this[10].toI32();
  }

  get signatureType(): i32 {
    return this[11].toI32();
  }

  get signature(): Bytes {
    return this[12].toBytes();
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PauseTradingCall extends ethereum.Call {
  get inputs(): PauseTradingCall__Inputs {
    return new PauseTradingCall__Inputs(this);
  }

  get outputs(): PauseTradingCall__Outputs {
    return new PauseTradingCall__Outputs(this);
  }
}

export class PauseTradingCall__Inputs {
  _call: PauseTradingCall;

  constructor(call: PauseTradingCall) {
    this._call = call;
  }
}

export class PauseTradingCall__Outputs {
  _call: PauseTradingCall;

  constructor(call: PauseTradingCall) {
    this._call = call;
  }
}

export class RegisterTokenCall extends ethereum.Call {
  get inputs(): RegisterTokenCall__Inputs {
    return new RegisterTokenCall__Inputs(this);
  }

  get outputs(): RegisterTokenCall__Outputs {
    return new RegisterTokenCall__Outputs(this);
  }
}

export class RegisterTokenCall__Inputs {
  _call: RegisterTokenCall;

  constructor(call: RegisterTokenCall) {
    this._call = call;
  }

  get token(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get complement(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get conditionId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RegisterTokenCall__Outputs {
  _call: RegisterTokenCall;

  constructor(call: RegisterTokenCall) {
    this._call = call;
  }
}

export class RemoveAdminCall extends ethereum.Call {
  get inputs(): RemoveAdminCall__Inputs {
    return new RemoveAdminCall__Inputs(this);
  }

  get outputs(): RemoveAdminCall__Outputs {
    return new RemoveAdminCall__Outputs(this);
  }
}

export class RemoveAdminCall__Inputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }

  get admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAdminCall__Outputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }
}

export class RemoveOperatorCall extends ethereum.Call {
  get inputs(): RemoveOperatorCall__Inputs {
    return new RemoveOperatorCall__Inputs(this);
  }

  get outputs(): RemoveOperatorCall__Outputs {
    return new RemoveOperatorCall__Outputs(this);
  }
}

export class RemoveOperatorCall__Inputs {
  _call: RemoveOperatorCall;

  constructor(call: RemoveOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveOperatorCall__Outputs {
  _call: RemoveOperatorCall;

  constructor(call: RemoveOperatorCall) {
    this._call = call;
  }
}

export class RenounceAdminRoleCall extends ethereum.Call {
  get inputs(): RenounceAdminRoleCall__Inputs {
    return new RenounceAdminRoleCall__Inputs(this);
  }

  get outputs(): RenounceAdminRoleCall__Outputs {
    return new RenounceAdminRoleCall__Outputs(this);
  }
}

export class RenounceAdminRoleCall__Inputs {
  _call: RenounceAdminRoleCall;

  constructor(call: RenounceAdminRoleCall) {
    this._call = call;
  }
}

export class RenounceAdminRoleCall__Outputs {
  _call: RenounceAdminRoleCall;

  constructor(call: RenounceAdminRoleCall) {
    this._call = call;
  }
}

export class RenounceOperatorRoleCall extends ethereum.Call {
  get inputs(): RenounceOperatorRoleCall__Inputs {
    return new RenounceOperatorRoleCall__Inputs(this);
  }

  get outputs(): RenounceOperatorRoleCall__Outputs {
    return new RenounceOperatorRoleCall__Outputs(this);
  }
}

export class RenounceOperatorRoleCall__Inputs {
  _call: RenounceOperatorRoleCall;

  constructor(call: RenounceOperatorRoleCall) {
    this._call = call;
  }
}

export class RenounceOperatorRoleCall__Outputs {
  _call: RenounceOperatorRoleCall;

  constructor(call: RenounceOperatorRoleCall) {
    this._call = call;
  }
}

export class SetProxyFactoryCall extends ethereum.Call {
  get inputs(): SetProxyFactoryCall__Inputs {
    return new SetProxyFactoryCall__Inputs(this);
  }

  get outputs(): SetProxyFactoryCall__Outputs {
    return new SetProxyFactoryCall__Outputs(this);
  }
}

export class SetProxyFactoryCall__Inputs {
  _call: SetProxyFactoryCall;

  constructor(call: SetProxyFactoryCall) {
    this._call = call;
  }

  get _newProxyFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetProxyFactoryCall__Outputs {
  _call: SetProxyFactoryCall;

  constructor(call: SetProxyFactoryCall) {
    this._call = call;
  }
}

export class SetSafeFactoryCall extends ethereum.Call {
  get inputs(): SetSafeFactoryCall__Inputs {
    return new SetSafeFactoryCall__Inputs(this);
  }

  get outputs(): SetSafeFactoryCall__Outputs {
    return new SetSafeFactoryCall__Outputs(this);
  }
}

export class SetSafeFactoryCall__Inputs {
  _call: SetSafeFactoryCall;

  constructor(call: SetSafeFactoryCall) {
    this._call = call;
  }

  get _newSafeFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSafeFactoryCall__Outputs {
  _call: SetSafeFactoryCall;

  constructor(call: SetSafeFactoryCall) {
    this._call = call;
  }
}

export class UnpauseTradingCall extends ethereum.Call {
  get inputs(): UnpauseTradingCall__Inputs {
    return new UnpauseTradingCall__Inputs(this);
  }

  get outputs(): UnpauseTradingCall__Outputs {
    return new UnpauseTradingCall__Outputs(this);
  }
}

export class UnpauseTradingCall__Inputs {
  _call: UnpauseTradingCall;

  constructor(call: UnpauseTradingCall) {
    this._call = call;
  }
}

export class UnpauseTradingCall__Outputs {
  _call: UnpauseTradingCall;

  constructor(call: UnpauseTradingCall) {
    this._call = call;
  }
}
